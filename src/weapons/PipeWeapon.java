//Compiled from Pipe by SketchupModelJAXB

package weapons;
import javax.media.opengl.GL2;
import javax.media.opengl.glu.GLU;
//import game.Building;
//import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import com.jogamp.opengl.util.GLBuffers;
//import java.util.HashMap;
//import java.util.Map;
public class PipeWeapon extends BludgeoningWeapon{
private int displayList = -1;
//private Map<String, com.jogamp.opengl.util.texture.Texture> imageMap = new HashMap<String, com.jogamp.opengl.util.texture.Texture>(); // map of ID's to textures
public PipeWeapon() {
	super();
//	generate(gl, glu);
}

public void init(GL2 gl, GLU glu){
	generate(gl, glu);
}

public void draw(GL2 gl, GLU glu) {
	gl.glPushMatrix();
		gl.glScalef(.5f, .5f, .5f);
		gl.glRotatef(-90, 1, 0, 0);
		gl.glRotatef(40, 1, 0, 0);
		gl.glCallList(displayList);
	gl.glPopMatrix();
}
private void generate(GL2 gl, GLU glu){

displayList = gl.glGenLists(1);
gl.glNewList(displayList, GL2.GL_COMPILE);
  gl.glPushAttrib(GL2.GL_POLYGON_BIT);
    gl.glFrontFace(GL2.GL_CCW);
    gl.glCullFace(GL2.GL_BACK);
    gl.glEnable(GL2.GL_CULL_FACE);
gl.glPushMatrix();
gl.glScaled(0.08333333333333333, 0.08333333333333333, 0.08333333333333333);
gl.glRotatef(-90,1,0,0);
ID2(gl);
ID14(gl);
ID20(gl);
ID26(gl);
ID34(gl);
ID40(gl);
ID46(gl);
ID52(gl);
ID58(gl);
       gl.glPopMatrix();
   gl.glPopAttrib();
gl.glEndList();
}
//Trailer


private void ID2(GL2 gl){
float[] positionsArray = {
-0.872258f,126.984375f,-3.3939843f,-0.0236273f,132.73438f,-3.5057087f,-0.872258f,132.73438f,-3.3939843f,-0.0236273f,126.984375f,-3.5057087f,-0.872258f,132.73438f,-3.3939843f,-0.872258f,126.984375f,-3.3939843f,-0.0236273f,126.984375f,-3.5057087f,-0.0236273f,132.73438f,-3.5057087f,-1.663056f,132.73438f,-3.066425f,-1.663056f,126.984375f,-3.066425f,-1.663056f,132.73438f,-3.066425f,-1.663056f,126.984375f,-3.066425f,0.8250035f,132.73438f,-3.3939843f,0.8250035f,126.984375f,-3.3939843f,0.8250035f,126.984375f,-3.3939843f,0.8250035f,132.73438f,-3.3939843f,-2.3421297f,132.73438f,-2.5453537f,-2.3421297f,126.984375f,-2.5453537f,-2.3421297f,132.73438f,-2.5453537f,-2.3421297f,126.984375f,-2.5453537f,1.6158015f,132.73438f,-3.066425f,1.6158015f,126.984375f,-3.066425f,1.6158015f,126.984375f,-3.066425f,1.6158015f,132.73438f,-3.066425f,-2.8632011f,132.73438f,-1.8662801f,-2.8632011f,126.984375f,-1.8662801f,-2.8632011f,132.73438f,-1.8662801f,-2.8632011f,126.984375f,-1.8662801f,2.2948751f,126.984375f,-2.5453537f,2.2948751f,132.73438f,-2.5453537f,2.2948751f,126.984375f,-2.5453537f,2.2948751f,132.73438f,-2.5453537f,-3.1907604f,126.984375f,-1.0754821f,-3.1907604f,132.73438f,-1.0754821f,-3.1907604f,132.73438f,-1.0754821f,-3.1907604f,126.984375f,-1.0754821f,2.8159466f,132.73438f,-1.8662801f,2.8159466f,126.984375f,-1.8662801f,2.8159466f,126.984375f,-1.8662801f,2.8159466f,132.73438f,-1.8662801f,-3.3024848f,132.73438f,-0.2268514f,-3.3024848f,126.984375f,-0.2268514f,-3.3024848f,132.73438f,-0.2268514f,-3.3024848f,126.984375f,-0.2268514f,3.1435058f,126.984375f,-1.0754821f,3.1435058f,132.73438f,-1.0754821f,3.1435058f,126.984375f,-1.0754821f,3.1435058f,132.73438f,-1.0754821f,-3.1907604f,132.73438f,0.6217794f,-3.1907604f,126.984375f,0.6217794f,-3.1907604f,132.73438f,0.6217794f,-3.1907604f,126.984375f,0.6217794f,3.2552302f,132.73438f,-0.2268514f,3.2552302f,126.984375f,-0.2268514f,3.2552302f,126.984375f,-0.2268514f,3.2552302f,132.73438f,-0.2268514f,-2.8632011f,132.73438f,1.4125774f,-2.8632011f,126.984375f,1.4125774f,-2.8632011f,132.73438f,1.4125774f,-2.8632011f,126.984375f,1.4125774f,3.1435058f,132.73438f,0.6217794f,3.1435058f,126.984375f,0.6217794f,3.1435058f,126.984375f,0.6217794f,3.1435058f,132.73438f,0.6217794f,-2.3421297f,126.984375f,2.091651f,-2.3421297f,132.73438f,2.091651f,-2.3421297f,132.73438f,2.091651f,-2.3421297f,126.984375f,2.091651f,2.8159466f,132.73438f,1.4125774f,2.8159466f,126.984375f,1.4125774f,2.8159466f,126.984375f,1.4125774f,2.8159466f,132.73438f,1.4125774f,-1.663056f,126.984375f,2.6127224f,-1.663056f,132.73438f,2.6127224f,-1.663056f,132.73438f,2.6127224f,-1.663056f,126.984375f,2.6127224f,2.2948751f,126.984375f,2.091651f,2.2948751f,132.73438f,2.091651f,2.2948751f,126.984375f,2.091651f,2.2948751f,132.73438f,2.091651f,-0.872258f,132.73438f,2.9402816f,-0.872258f,126.984375f,2.9402816f,-0.872258f,132.73438f,2.9402816f,-0.872258f,126.984375f,2.9402816f,1.6158015f,126.984375f,2.6127224f,1.6158015f,132.73438f,2.6127224f,1.6158015f,126.984375f,2.6127224f,1.6158015f,132.73438f,2.6127224f,-0.0236273f,126.984375f,3.052006f,-0.0236273f,132.73438f,3.052006f,-0.0236273f,132.73438f,3.052006f,-0.0236273f,126.984375f,3.052006f,0.8250035f,132.73438f,2.9402816f,0.8250035f,126.984375f,2.9402816f,0.8250035f,126.984375f,2.9402816f,0.8250035f,132.73438f,2.9402816f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
//FloatBuffer fbn = null;
//FloatBuffer fbt = null;
//float[] texcoordArray = null;
{
gl.glColor4d(0.7764706, 0.7764706, 0.7764706, 1.0);
int[] indices = {
0,1,2,1,0,3,0,8,9,8,0,2,3,12,1,12,3,13,9,16,17,16,9,8,13,20,12,20,13,21,17,24,25,24,17,16,28,20,21,20,28,29,24,32,25,32,24,33,36,28,37,28,36,29,32,40,41,40,32,33,44,36,37,36,44,45,41,48,49,48,41,40,52,44,53,44,52,45,49,56,57,56,49,48,60,53,61,53,60,52,56,64,57,64,56,65,68,61,69,61,68,60,65,72,64,72,65,73,76,68,69,68,76,77,80,72,73,72,80,81,77,84,85,84,77,76,80,88,81,88,80,89,92,84,93,84,92,85,89,93,88,93,89,92,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 144, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
gl.glEnable(GL2.GL_BLEND);
gl.glColor4d(0.3137255, 0.3137255, 0.3137255, 1.0);
int[] indices = {
};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices);
gl.glDrawElements(GL2.GL_LINES, indices.length, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
gl.glEnable(GL2.GL_BLEND);
gl.glColor4d(0.7764706, 0.7764706, 0.7764706, 1.0);
int[] indices = {
5,
6,
7,
4,
11,
5,
4,
10,
6,
14,
15,
7,
19,
11,
10,
18,
14,
22,
23,
15,
27,
19,
18,
26,
22,
30,
31,
23,
35,
27,
26,
34,
30,
38,
39,
31,
43,
35,
34,
42,
38,
46,
47,
39,
51,
43,
42,
50,
46,
54,
55,
47,
59,
51,
50,
58,
54,
62,
63,
55,
67,
59,
58,
66,
62,
70,
71,
63,
75,
67,
66,
74,
70,
78,
79,
71,
83,
75,
74,
82,
78,
86,
87,
79,
91,
83,
82,
90,
86,
94,
95,
87,
94,
91,
90,
95,
};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices);
gl.glDrawElements(GL2.GL_LINES, indices.length, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID14(GL2 gl){
float[] positionsArray = {
3.0074615f,138.125f,-1.9768513f,2.4512465f,132.73438f,-2.701725f,3.0074615f,132.73438f,-1.9768513f,2.4512465f,138.125f,-2.701725f,3.0074615f,132.73438f,-1.9768513f,2.4512465f,132.73438f,-2.701725f,3.0074615f,138.125f,-1.9768513f,2.4512465f,138.125f,-2.701725f,-0.9294939f,132.73438f,-3.6075916f,0.8822394f,132.73438f,-3.6075916f,-0.0236273f,132.73438f,-3.7268515f,-0.0236273f,132.73438f,-3.5057087f,-0.872258f,132.73438f,-3.3939843f,-1.7736273f,132.73438f,-3.2579403f,-1.663056f,132.73438f,-3.066425f,-2.498501f,132.73438f,-2.701725f,-2.3421297f,132.73438f,-2.5453537f,-3.054716f,132.73438f,-1.9768513f,-2.8632011f,132.73438f,-1.8662801f,-3.4043677f,132.73438f,-1.132718f,-3.1907604f,132.73438f,-1.0754821f,-3.5236273f,132.73438f,-0.2268514f,-3.3024848f,132.73438f,-0.2268514f,-3.4043677f,132.73438f,0.6790153f,-3.1907604f,132.73438f,0.6217794f,-2.8632011f,132.73438f,1.4125774f,-3.054716f,132.73438f,1.5231487f,-2.3421297f,132.73438f,2.091651f,-2.498501f,132.73438f,2.2480223f,-1.663056f,132.73438f,2.6127224f,-1.7736273f,132.73438f,2.8042376f,-0.872258f,132.73438f,2.9402816f,-0.9294939f,132.73438f,3.153889f,-0.0236273f,132.73438f,3.052006f,0.8250035f,132.73438f,-3.3939843f,1.7263727f,132.73438f,-3.2579403f,1.6158015f,132.73438f,-3.066425f,2.4512465f,132.73438f,-2.701725f,2.2948751f,132.73438f,-2.5453537f,3.0074615f,132.73438f,-1.9768513f,2.8159466f,132.73438f,-1.8662801f,3.3571131f,132.73438f,-1.132718f,3.1435058f,132.73438f,-1.0754821f,3.4763727f,132.73438f,-0.2268514f,3.2552302f,132.73438f,-0.2268514f,3.1435058f,132.73438f,0.6217794f,3.3571131f,132.73438f,0.6790153f,2.8159466f,132.73438f,1.4125774f,3.0074615f,132.73438f,1.5231487f,2.2948751f,132.73438f,2.091651f,2.4512465f,132.73438f,2.2480223f,1.6158015f,132.73438f,2.6127224f,1.7263727f,132.73438f,2.8042376f,0.8250035f,132.73438f,2.9402816f,0.8822394f,132.73438f,3.153889f,-0.0236273f,132.73438f,3.2731485f,1.7263727f,132.73438f,-3.2579403f,0.8822394f,132.73438f,-3.6075916f,-0.0236273f,132.73438f,-3.7268515f,-0.9294939f,132.73438f,-3.6075916f,-1.7736273f,132.73438f,-3.2579403f,-2.498501f,132.73438f,-2.701725f,-3.054716f,132.73438f,-1.9768513f,-3.4043677f,132.73438f,-1.132718f,-3.5236273f,132.73438f,-0.2268514f,-3.4043677f,132.73438f,0.6790153f,-3.054716f,132.73438f,1.5231487f,-2.498501f,132.73438f,2.2480223f,-1.7736273f,132.73438f,2.8042376f,-0.9294939f,132.73438f,3.153889f,-0.0236273f,132.73438f,3.2731485f,0.8822394f,132.73438f,3.153889f,1.7263727f,132.73438f,2.8042376f,2.4512465f,132.73438f,2.2480223f,3.0074615f,132.73438f,1.5231487f,3.3571131f,132.73438f,0.6790153f,3.4763727f,132.73438f,-0.2268514f,3.3571131f,132.73438f,-1.132718f,-3.3024848f,132.73438f,-0.2268514f,-3.1907604f,132.73438f,0.6217794f,-3.1907604f,132.73438f,-1.0754821f,-2.8632011f,132.73438f,-1.8662801f,-2.3421297f,132.73438f,-2.5453537f,-1.663056f,132.73438f,-3.066425f,-0.872258f,132.73438f,-3.3939843f,-0.0236273f,132.73438f,-3.5057087f,0.8250035f,132.73438f,-3.3939843f,1.6158015f,132.73438f,-3.066425f,2.2948751f,132.73438f,-2.5453537f,2.8159466f,132.73438f,-1.8662801f,3.1435058f,132.73438f,-1.0754821f,3.2552302f,132.73438f,-0.2268514f,3.1435058f,132.73438f,0.6217794f,2.8159466f,132.73438f,1.4125774f,2.2948751f,132.73438f,2.091651f,1.6158015f,132.73438f,2.6127224f,0.8250035f,132.73438f,2.9402816f,-0.0236273f,132.73438f,3.052006f,-0.872258f,132.73438f,2.9402816f,-1.663056f,132.73438f,2.6127224f,-2.3421297f,132.73438f,2.091651f,-2.8632011f,132.73438f,1.4125774f,3.3571131f,132.73438f,-1.132718f,3.3571131f,138.125f,-1.132718f,3.3571131f,138.125f,-1.132718f,1.7263727f,138.125f,-3.2579403f,1.7263727f,132.73438f,-3.2579403f,1.7263727f,138.125f,-3.2579403f,2.4512465f,130.21875f,-2.701725f,3.0074615f,132.73438f,-1.9768513f,3.0074615f,130.21875f,-1.9768513f,2.4512465f,132.73438f,-2.701725f,3.0074615f,130.21875f,-1.9768513f,2.4512465f,130.21875f,-2.701725f,1.7263727f,130.21875f,-3.2579403f,1.7263727f,132.73438f,-3.2579403f,1.7263727f,130.21875f,-3.2579403f,0.8822394f,138.125f,-3.6075916f,0.8822394f,132.73438f,-3.6075916f,0.8822394f,138.125f,-3.6075916f,0.8822394f,130.21875f,-3.6075916f,0.8822394f,132.73438f,-3.6075916f,0.8822394f,130.21875f,-3.6075916f,-0.0236273f,138.125f,-3.7268515f,-0.0236273f,132.73438f,-3.7268515f,-0.0236273f,138.125f,-3.7268515f,-0.0236273f,130.21875f,-3.7268515f,-0.0236273f,132.73438f,-3.7268515f,-0.0236273f,130.21875f,-3.7268515f,-0.9294939f,138.125f,-3.6075916f,-0.9294939f,132.73438f,-3.6075916f,-0.9294939f,138.125f,-3.6075916f,-0.9294939f,130.21875f,-3.6075916f,-0.9294939f,132.73438f,-3.6075916f,-0.9294939f,130.21875f,-3.6075916f,-1.7736273f,138.125f,-3.2579403f,-1.7736273f,132.73438f,-3.2579403f,-1.7736273f,138.125f,-3.2579403f,-1.7736273f,130.21875f,-3.2579403f,-1.7736273f,132.73438f,-3.2579403f,-1.7736273f,130.21875f,-3.2579403f,-2.498501f,138.125f,-2.701725f,-2.498501f,132.73438f,-2.701725f,-2.498501f,138.125f,-2.701725f,-2.498501f,130.21875f,-2.701725f,-2.498501f,132.73438f,-2.701725f,-2.498501f,130.21875f,-2.701725f,-3.054716f,138.125f,-1.9768513f,-3.054716f,132.73438f,-1.9768513f,-3.054716f,138.125f,-1.9768513f,-3.054716f,132.73438f,-1.9768513f,-3.054716f,130.21875f,-1.9768513f,-3.054716f,130.21875f,-1.9768513f,-3.4043677f,132.73438f,-1.132718f,-3.4043677f,138.125f,-1.132718f,-3.4043677f,138.125f,-1.132718f,-3.4043677f,130.21875f,-1.132718f,-3.4043677f,132.73438f,-1.132718f,-3.4043677f,130.21875f,-1.132718f,-3.5236273f,138.125f,-0.2268514f,-3.5236273f,132.73438f,-0.2268514f,-3.5236273f,138.125f,-0.2268514f,-3.5236273f,132.73438f,-0.2268514f,-3.5236273f,130.21875f,-0.2268514f,-3.5236273f,130.21875f,-0.2268514f,-3.4043677f,138.125f,0.6790153f,-3.4043677f,132.73438f,0.6790153f,-3.4043677f,138.125f,0.6790153f,-3.4043677f,132.73438f,0.6790153f,-3.4043677f,130.21875f,0.6790153f,-3.4043677f,130.21875f,0.6790153f,-3.054716f,138.125f,1.5231487f,-3.054716f,132.73438f,1.5231487f,-3.054716f,138.125f,1.5231487f,-3.054716f,132.73438f,1.5231487f,-3.054716f,130.21875f,1.5231487f,-3.054716f,130.21875f,1.5231487f,-2.498501f,132.73438f,2.2480223f,-2.498501f,138.125f,2.2480223f,-2.498501f,138.125f,2.2480223f,-2.498501f,132.73438f,2.2480223f,-2.498501f,130.21875f,2.2480223f,-2.498501f,130.21875f,2.2480223f,-1.7736273f,138.125f,2.8042376f,-1.7736273f,132.73438f,2.8042376f,-1.7736273f,138.125f,2.8042376f,-1.7736273f,130.21875f,2.8042376f,-1.7736273f,132.73438f,2.8042376f,-1.7736273f,130.21875f,2.8042376f,-0.9294939f,138.125f,3.153889f,-0.9294939f,132.73438f,3.153889f,-0.9294939f,138.125f,3.153889f,-0.9294939f,130.21875f,3.153889f,-0.9294939f,132.73438f,3.153889f,-0.9294939f,130.21875f,3.153889f,-0.0236273f,138.125f,3.2731485f,-0.0236273f,132.73438f,3.2731485f,-0.0236273f,138.125f,3.2731485f,-0.0236273f,130.21875f,3.2731485f,-0.0236273f,132.73438f,3.2731485f,-0.0236273f,130.21875f,3.2731485f,0.8822394f,138.125f,3.153889f,0.8822394f,132.73438f,3.153889f,0.8822394f,138.125f,3.153889f,0.8822394f,130.21875f,3.153889f,0.8822394f,132.73438f,3.153889f,0.8822394f,130.21875f,3.153889f,1.7263727f,138.125f,2.8042376f,1.7263727f,132.73438f,2.8042376f,1.7263727f,138.125f,2.8042376f,1.7263727f,130.21875f,2.8042376f,1.7263727f,132.73438f,2.8042376f,1.7263727f,130.21875f,2.8042376f,2.4512465f,138.125f,2.2480223f,2.4512465f,132.73438f,2.2480223f,2.4512465f,138.125f,2.2480223f,2.4512465f,130.21875f,2.2480223f,2.4512465f,132.73438f,2.2480223f,2.4512465f,130.21875f,2.2480223f,3.0074615f,138.125f,1.5231487f,3.0074615f,132.73438f,1.5231487f,3.0074615f,138.125f,1.5231487f,3.0074615f,130.21875f,1.5231487f,3.0074615f,132.73438f,1.5231487f,3.0074615f,130.21875f,1.5231487f,3.3571131f,132.73438f,0.6790153f,3.3571131f,138.125f,0.6790153f,3.3571131f,138.125f,0.6790153f,3.3571131f,130.21875f,0.6790153f,3.3571131f,132.73438f,0.6790153f,3.3571131f,130.21875f,0.6790153f,3.4763727f,132.73438f,-0.2268514f,3.4763727f,138.125f,-0.2268514f,3.4763727f,138.125f,-0.2268514f,3.4763727f,132.73438f,-0.2268514f,3.4763727f,130.21875f,-0.2268514f,3.4763727f,130.21875f,-0.2268514f,3.3571131f,130.21875f,-1.132718f,3.3571131f,132.73438f,-1.132718f,3.3571131f,130.21875f,-1.132718f,2.4512465f,126.984375f,-2.701725f,3.0074615f,130.21875f,-1.9768513f,3.0074615f,126.984375f,-1.9768513f,2.4512465f,130.21875f,-2.701725f,3.0074615f,126.984375f,-1.9768513f,2.4512465f,126.984375f,-2.701725f,1.7263727f,126.984375f,-3.2579403f,1.7263727f,130.21875f,-3.2579403f,1.7263727f,126.984375f,-3.2579403f,0.8822394f,130.21875f,-3.6075916f,0.8822394f,126.984375f,-3.6075916f,0.8822394f,126.984375f,-3.6075916f,-0.0236273f,126.984375f,-3.7268515f,-0.0236273f,130.21875f,-3.7268515f,-0.0236273f,126.984375f,-3.7268515f,-0.9294939f,130.21875f,-3.6075916f,-0.9294939f,126.984375f,-3.6075916f,-0.9294939f,126.984375f,-3.6075916f,-1.7736273f,126.984375f,-3.2579403f,-1.7736273f,130.21875f,-3.2579403f,-1.7736273f,126.984375f,-3.2579403f,-2.498501f,130.21875f,-2.701725f,-2.498501f,126.984375f,-2.701725f,-2.498501f,126.984375f,-2.701725f,-3.054716f,130.21875f,-1.9768513f,-3.054716f,126.984375f,-1.9768513f,-3.054716f,126.984375f,-1.9768513f,-3.4043677f,126.984375f,-1.132718f,-3.4043677f,130.21875f,-1.132718f,-3.4043677f,126.984375f,-1.132718f,-3.5236273f,130.21875f,-0.2268514f,-3.5236273f,126.984375f,-0.2268514f,-3.5236273f,126.984375f,-0.2268514f,-3.4043677f,130.21875f,0.6790153f,-3.4043677f,126.984375f,0.6790153f,-3.4043677f,126.984375f,0.6790153f,-3.054716f,130.21875f,1.5231487f,-3.054716f,126.984375f,1.5231487f,-3.054716f,126.984375f,1.5231487f,-2.498501f,126.984375f,2.2480223f,-2.498501f,130.21875f,2.2480223f,-2.498501f,126.984375f,2.2480223f,-1.7736273f,126.984375f,2.8042376f,-1.7736273f,130.21875f,2.8042376f,-1.7736273f,126.984375f,2.8042376f,-0.9294939f,126.984375f,3.153889f,-0.9294939f,130.21875f,3.153889f,-0.9294939f,126.984375f,3.153889f,-0.0236273f,130.21875f,3.2731485f,-0.0236273f,126.984375f,3.2731485f,-0.0236273f,126.984375f,3.2731485f,0.8822394f,126.984375f,3.153889f,0.8822394f,130.21875f,3.153889f,0.8822394f,126.984375f,3.153889f,1.7263727f,130.21875f,2.8042376f,1.7263727f,126.984375f,2.8042376f,1.7263727f,126.984375f,2.8042376f,2.4512465f,126.984375f,2.2480223f,2.4512465f,130.21875f,2.2480223f,2.4512465f,126.984375f,2.2480223f,3.0074615f,130.21875f,1.5231487f,3.0074615f,126.984375f,1.5231487f,3.0074615f,126.984375f,1.5231487f,3.3571131f,126.984375f,0.6790153f,3.3571131f,130.21875f,0.6790153f,3.3571131f,126.984375f,0.6790153f,3.4763727f,126.984375f,-0.2268514f,3.4763727f,130.21875f,-0.2268514f,3.4763727f,126.984375f,-0.2268514f,3.3571131f,126.984375f,-1.132718f,3.3571131f,130.21875f,-1.132718f,3.3571131f,126.984375f,-1.132718f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
//FloatBuffer fbn = null;
//FloatBuffer fbt = null;
//float[] texcoordArray = null;
{
gl.glColor4d(0.7764706, 0.7764706, 0.7764706, 1.0);
int[] indices = {
0,1,2,1,0,3,8,9,10,9,8,11,11,8,12,12,8,13,12,13,14,14,13,15,14,15,16,16,15,17,16,17,18,18,17,19,18,19,20,20,19,21,20,21,22,22,21,23,22,23,24,24,23,25,25,23,26,25,26,27,27,26,28,27,28,29,29,28,30,29,30,31,31,30,32,31,32,33,9,34,35,34,9,11,35,34,36,35,36,37,37,36,38,37,38,39,39,38,40,39,40,41,41,40,42,41,42,43,43,42,44,43,44,45,43,45,46,46,45,47,46,47,48,48,47,49,48,49,50,50,49,51,50,51,52,52,51,53,52,53,54,54,53,33,54,33,32,54,32,55,102,0,2,0,102,103,1,105,106,105,1,3,108,109,110,109,108,111,111,114,115,114,111,108,106,117,118,117,106,105,115,120,121,120,115,114,118,123,124,123,118,117,121,126,127,126,121,120,124,129,130,129,124,123,127,132,133,132,127,126,130,135,136,135,130,129,133,138,139,138,133,132,136,141,142,141,136,135,139,144,145,144,139,138,142,147,148,147,142,141,150,144,151,144,150,145,147,153,148,153,147,154,156,150,151,150,156,157,153,159,160,159,153,154,162,156,163,156,162,157,160,165,166,165,160,159,168,163,169,163,168,162,166,171,172,171,166,165,174,169,175,169,174,168,171,177,172,177,171,178,180,175,181,175,180,174,183,177,178,177,183,184,186,180,181,180,186,187,189,184,183,184,189,190,192,187,186,187,192,193,195,190,189,190,195,196,198,193,192,193,198,199,201,196,195,196,201,202,204,199,198,199,204,205,207,202,201,202,207,208,210,205,204,205,210,211,213,208,207,208,213,214,216,211,210,211,216,217,214,219,220,219,214,213,222,217,216,217,222,223,219,225,220,225,219,226,228,223,222,223,228,229,226,231,225,231,226,232,234,228,235,228,234,229,232,102,231,102,232,103,237,234,235,234,237,238,109,237,110,237,109,238,240,241,242,241,240,243,243,246,247,246,243,240,249,246,250,246,249,247,249,252,253,252,249,250,255,252,256,252,255,253,255,258,259,258,255,256,261,258,262,258,261,259,264,262,265,262,264,261,267,264,265,264,267,268,270,267,271,267,270,268,273,271,274,271,273,270,276,274,277,274,276,273,279,276,277,276,279,280,282,280,279,280,282,283,285,283,282,283,285,286,285,288,286,288,285,289,291,288,289,288,291,292,291,294,292,294,291,295,297,294,295,294,297,298,300,297,301,297,300,298,303,300,301,300,303,304,306,304,303,304,306,307,309,307,306,307,309,310,241,309,242,309,241,310,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 576, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
gl.glEnable(GL2.GL_BLEND);
gl.glColor4d(0.7764706, 0.7764706, 0.7764706, 1.0);
int[] indices = {
4,
5,
6,
7,
5,
56,
56,
57,
57,
58,
58,
59,
59,
60,
60,
61,
61,
62,
62,
63,
63,
64,
64,
65,
65,
66,
66,
67,
67,
68,
68,
69,
69,
70,
70,
71,
71,
72,
72,
73,
73,
74,
74,
75,
75,
76,
76,
77,
77,
4,
78,
79,
80,
78,
81,
80,
82,
81,
83,
82,
84,
83,
85,
84,
86,
85,
87,
86,
88,
87,
89,
88,
90,
89,
91,
90,
92,
91,
93,
92,
94,
93,
95,
94,
96,
95,
97,
96,
98,
97,
99,
98,
100,
99,
101,
100,
79,
101,
104,
6,
7,
107,
112,
113,
113,
116,
107,
119,
116,
122,
119,
125,
122,
128,
125,
131,
128,
134,
131,
137,
134,
140,
137,
143,
140,
146,
143,
149,
146,
152,
149,
155,
152,
158,
155,
161,
158,
164,
161,
167,
164,
170,
167,
173,
170,
176,
173,
179,
176,
182,
179,
185,
182,
188,
185,
191,
188,
194,
191,
197,
194,
200,
197,
203,
200,
206,
203,
209,
206,
212,
209,
215,
212,
218,
215,
221,
218,
224,
221,
227,
224,
230,
227,
233,
230,
236,
233,
104,
236,
239,
239,
112,
245,
244,
248,
245,
251,
248,
254,
251,
257,
254,
260,
257,
263,
260,
266,
263,
269,
266,
272,
269,
275,
272,
278,
275,
281,
278,
284,
281,
287,
284,
290,
287,
293,
290,
296,
293,
299,
296,
302,
299,
305,
302,
308,
305,
311,
308,
244,
311,
};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices);
gl.glDrawElements(GL2.GL_LINES, indices.length, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
gl.glEnable(GL2.GL_BLEND);
gl.glColor4d(0.3137255, 0.3137255, 0.3137255, 1.0);
int[] indices = {
};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices);
gl.glDrawElements(GL2.GL_LINES, indices.length, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID20(GL2 gl){
float[] positionsArray = {
-1.0101962f,138.125f,-3.9087765f,0.9629416f,138.125f,-3.9087765f,-0.0236273f,138.125f,-4.038661f,-1.929532f,138.125f,-3.527975f,-0.0236273f,138.125f,-3.7268515f,-0.9294939f,138.125f,-3.6075916f,-1.7736273f,138.125f,-3.2579403f,-2.7189837f,138.125f,-2.9222076f,-2.498501f,138.125f,-2.701725f,-3.3247511f,138.125f,-2.132756f,-3.054716f,138.125f,-1.9768513f,-3.7055526f,138.125f,-1.2134203f,-3.4043677f,138.125f,-1.132718f,-3.8354368f,138.125f,-0.2268514f,-3.5236273f,138.125f,-0.2268514f,-3.7055526f,138.125f,0.7597175f,-3.4043677f,138.125f,0.6790153f,-3.054716f,138.125f,1.5231487f,-3.3247511f,138.125f,1.6790534f,-2.498501f,138.125f,2.2480223f,-2.7189837f,138.125f,2.468505f,-1.7736273f,138.125f,2.8042376f,-1.929532f,138.125f,3.0742724f,-0.9294939f,138.125f,3.153889f,-1.0101962f,138.125f,3.4550738f,-0.0236273f,138.125f,3.2731485f,1.8822775f,138.125f,-3.527975f,0.8822394f,138.125f,-3.6075916f,1.7263727f,138.125f,-3.2579403f,2.671729f,138.125f,-2.9222076f,2.4512465f,138.125f,-2.701725f,3.2774966f,138.125f,-2.132756f,3.0074615f,138.125f,-1.9768513f,3.658298f,138.125f,-1.2134203f,3.3571131f,138.125f,-1.132718f,3.7881823f,138.125f,-0.2268514f,3.4763727f,138.125f,-0.2268514f,3.3571131f,138.125f,0.6790153f,3.658298f,138.125f,0.7597175f,3.0074615f,138.125f,1.5231487f,3.2774966f,138.125f,1.6790534f,2.4512465f,138.125f,2.2480223f,2.671729f,138.125f,2.468505f,1.7263727f,138.125f,2.8042376f,1.8822775f,138.125f,3.0742724f,0.8822394f,138.125f,3.153889f,0.9629416f,138.125f,3.4550738f,-0.0236273f,138.125f,3.584958f,3.658298f,138.125f,-1.2134203f,3.2774966f,138.125f,-2.132756f,2.671729f,138.125f,-2.9222076f,1.8822775f,138.125f,-3.527975f,0.9629416f,138.125f,-3.9087765f,-0.0236273f,138.125f,-4.038661f,-1.0101962f,138.125f,-3.9087765f,-1.929532f,138.125f,-3.527975f,-2.7189837f,138.125f,-2.9222076f,-3.3247511f,138.125f,-2.132756f,-3.7055526f,138.125f,-1.2134203f,-3.8354368f,138.125f,-0.2268514f,-3.7055526f,138.125f,0.7597175f,-3.3247511f,138.125f,1.6790534f,-2.7189837f,138.125f,2.468505f,-1.929532f,138.125f,3.0742724f,-1.0101962f,138.125f,3.4550738f,-0.0236273f,138.125f,3.584958f,0.9629416f,138.125f,3.4550738f,1.8822775f,138.125f,3.0742724f,2.671729f,138.125f,2.468505f,3.2774966f,138.125f,1.6790534f,3.658298f,138.125f,0.7597175f,3.7881823f,138.125f,-0.2268514f,3.0074615f,138.125f,-1.9768513f,2.4512465f,138.125f,-2.701725f,3.3571131f,138.125f,-1.132718f,3.4763727f,138.125f,-0.2268514f,3.3571131f,138.125f,0.6790153f,3.0074615f,138.125f,1.5231487f,2.4512465f,138.125f,2.2480223f,1.7263727f,138.125f,2.8042376f,0.8822394f,138.125f,3.153889f,-0.0236273f,138.125f,3.2731485f,-0.9294939f,138.125f,3.153889f,-1.7736273f,138.125f,2.8042376f,-2.498501f,138.125f,2.2480223f,-3.054716f,138.125f,1.5231487f,-3.4043677f,138.125f,0.6790153f,-3.5236273f,138.125f,-0.2268514f,-3.4043677f,138.125f,-1.132718f,-3.054716f,138.125f,-1.9768513f,-2.498501f,138.125f,-2.701725f,-1.7736273f,138.125f,-3.2579403f,-0.9294939f,138.125f,-3.6075916f,-0.0236273f,138.125f,-3.7268515f,0.8822394f,138.125f,-3.6075916f,1.7263727f,138.125f,-3.2579403f,3.2774966f,138.125f,-2.132756f,3.658298f,130.21875f,-1.2134203f,3.2774966f,130.21875f,-2.132756f,3.658298f,138.125f,-1.2134203f,3.2774966f,130.21875f,-2.132756f,3.658298f,130.21875f,-1.2134203f,2.671729f,130.21875f,-2.9222076f,2.671729f,138.125f,-2.9222076f,2.671729f,130.21875f,-2.9222076f,1.8822775f,130.21875f,-3.527975f,1.8822775f,138.125f,-3.527975f,1.8822775f,130.21875f,-3.527975f,0.9629416f,130.21875f,-3.9087765f,0.9629416f,138.125f,-3.9087765f,0.9629416f,130.21875f,-3.9087765f,-0.0236273f,130.21875f,-4.038661f,-0.0236273f,138.125f,-4.038661f,-0.0236273f,130.21875f,-4.038661f,-1.0101962f,130.21875f,-3.9087765f,-1.0101962f,138.125f,-3.9087765f,-1.0101962f,130.21875f,-3.9087765f,-1.929532f,130.21875f,-3.527975f,-1.929532f,138.125f,-3.527975f,-1.929532f,130.21875f,-3.527975f,-2.7189837f,130.21875f,-2.9222076f,-2.7189837f,138.125f,-2.9222076f,-2.7189837f,130.21875f,-2.9222076f,-3.3247511f,138.125f,-2.132756f,-3.3247511f,130.21875f,-2.132756f,-3.3247511f,130.21875f,-2.132756f,-3.7055526f,130.21875f,-1.2134203f,-3.7055526f,138.125f,-1.2134203f,-3.7055526f,130.21875f,-1.2134203f,-3.8354368f,138.125f,-0.2268514f,-3.8354368f,130.21875f,-0.2268514f,-3.8354368f,130.21875f,-0.2268514f,-3.7055526f,138.125f,0.7597175f,-3.7055526f,130.21875f,0.7597175f,-3.7055526f,130.21875f,0.7597175f,-3.3247511f,138.125f,1.6790534f,-3.3247511f,130.21875f,1.6790534f,-3.3247511f,130.21875f,1.6790534f,-2.7189837f,138.125f,2.468505f,-2.7189837f,130.21875f,2.468505f,-2.7189837f,130.21875f,2.468505f,-1.929532f,130.21875f,3.0742724f,-1.929532f,138.125f,3.0742724f,-1.929532f,130.21875f,3.0742724f,-1.0101962f,130.21875f,3.4550738f,-1.0101962f,138.125f,3.4550738f,-1.0101962f,130.21875f,3.4550738f,-0.0236273f,130.21875f,3.584958f,-0.0236273f,138.125f,3.584958f,-0.0236273f,130.21875f,3.584958f,0.9629416f,130.21875f,3.4550738f,0.9629416f,138.125f,3.4550738f,0.9629416f,130.21875f,3.4550738f,1.8822775f,130.21875f,3.0742724f,1.8822775f,138.125f,3.0742724f,1.8822775f,130.21875f,3.0742724f,2.671729f,130.21875f,2.468505f,2.671729f,138.125f,2.468505f,2.671729f,130.21875f,2.468505f,3.2774966f,130.21875f,1.6790534f,3.2774966f,138.125f,1.6790534f,3.2774966f,130.21875f,1.6790534f,3.658298f,130.21875f,0.7597175f,3.658298f,138.125f,0.7597175f,3.658298f,130.21875f,0.7597175f,3.7881823f,138.125f,-0.2268514f,3.7881823f,130.21875f,-0.2268514f,3.7881823f,130.21875f,-0.2268514f,0.9629416f,130.21875f,-3.9087765f,-1.0101962f,130.21875f,-3.9087765f,-0.0236273f,130.21875f,-4.038661f,1.8822775f,130.21875f,-3.527975f,-0.0236273f,130.21875f,-3.7268515f,0.8822394f,130.21875f,-3.6075916f,1.7263727f,130.21875f,-3.2579403f,2.671729f,130.21875f,-2.9222076f,2.4512465f,130.21875f,-2.701725f,3.2774966f,130.21875f,-2.132756f,3.0074615f,130.21875f,-1.9768513f,3.658298f,130.21875f,-1.2134203f,3.3571131f,130.21875f,-1.132718f,3.7881823f,130.21875f,-0.2268514f,3.4763727f,130.21875f,-0.2268514f,3.658298f,130.21875f,0.7597175f,3.3571131f,130.21875f,0.6790153f,3.0074615f,130.21875f,1.5231487f,3.2774966f,130.21875f,1.6790534f,2.4512465f,130.21875f,2.2480223f,2.671729f,130.21875f,2.468505f,1.7263727f,130.21875f,2.8042376f,1.8822775f,130.21875f,3.0742724f,0.8822394f,130.21875f,3.153889f,0.9629416f,130.21875f,3.4550738f,-0.0236273f,130.21875f,3.2731485f,-1.929532f,130.21875f,-3.527975f,-0.9294939f,130.21875f,-3.6075916f,-1.7736273f,130.21875f,-3.2579403f,-2.7189837f,130.21875f,-2.9222076f,-2.498501f,130.21875f,-2.701725f,-3.3247511f,130.21875f,-2.132756f,-3.054716f,130.21875f,-1.9768513f,-3.7055526f,130.21875f,-1.2134203f,-3.4043677f,130.21875f,-1.132718f,-3.8354368f,130.21875f,-0.2268514f,-3.5236273f,130.21875f,-0.2268514f,-3.4043677f,130.21875f,0.6790153f,-3.7055526f,130.21875f,0.7597175f,-3.054716f,130.21875f,1.5231487f,-3.3247511f,130.21875f,1.6790534f,-2.498501f,130.21875f,2.2480223f,-2.7189837f,130.21875f,2.468505f,-1.7736273f,130.21875f,2.8042376f,-1.929532f,130.21875f,3.0742724f,-0.9294939f,130.21875f,3.153889f,-1.0101962f,130.21875f,3.4550738f,-0.0236273f,130.21875f,3.584958f,3.0074615f,130.21875f,-1.9768513f,2.4512465f,130.21875f,-2.701725f,1.7263727f,130.21875f,-3.2579403f,0.8822394f,130.21875f,-3.6075916f,-0.0236273f,130.21875f,-3.7268515f,-0.9294939f,130.21875f,-3.6075916f,-1.7736273f,130.21875f,-3.2579403f,-2.498501f,130.21875f,-2.701725f,-3.054716f,130.21875f,-1.9768513f,-3.4043677f,130.21875f,-1.132718f,-3.5236273f,130.21875f,-0.2268514f,-3.4043677f,130.21875f,0.6790153f,-3.054716f,130.21875f,1.5231487f,-2.498501f,130.21875f,2.2480223f,-1.7736273f,130.21875f,2.8042376f,-0.9294939f,130.21875f,3.153889f,-0.0236273f,130.21875f,3.2731485f,0.8822394f,130.21875f,3.153889f,1.7263727f,130.21875f,2.8042376f,2.4512465f,130.21875f,2.2480223f,3.0074615f,130.21875f,1.5231487f,3.3571131f,130.21875f,0.6790153f,3.4763727f,130.21875f,-0.2268514f,3.3571131f,130.21875f,-1.132718f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
//FloatBuffer fbn = null;
//FloatBuffer fbt = null;
//float[] texcoordArray = null;
{
gl.glColor4d(0.7764706, 0.7764706, 0.7764706, 1.0);
int[] indices = {
0,1,2,1,0,3,1,3,4,4,3,5,5,3,6,6,3,7,6,7,8,8,7,9,8,9,10,10,9,11,10,11,12,12,11,13,12,13,14,14,13,15,14,15,16,16,15,17,17,15,18,17,18,19,19,18,20,19,20,21,21,20,22,21,22,23,23,22,24,23,24,25,4,26,1,26,4,27,26,27,28,26,28,29,29,28,30,29,30,31,31,30,32,31,32,33,33,32,34,33,34,35,35,34,36,35,36,37,35,37,38,38,37,39,38,39,40,40,39,41,40,41,42,42,41,43,42,43,44,44,43,45,44,45,46,46,45,25,46,25,24,46,24,47,96,97,98,97,96,99,102,96,98,96,102,103,103,105,106,105,103,102,106,108,109,108,106,105,109,111,112,111,109,108,112,114,115,114,112,111,115,117,118,117,115,114,118,120,121,120,118,117,123,120,124,120,123,121,126,123,124,123,126,127,129,126,130,126,129,127,132,130,133,130,132,129,135,133,136,133,135,132,138,136,139,136,138,135,141,138,139,138,141,142,144,142,141,142,144,145,147,145,144,145,147,148,150,148,147,148,150,151,153,151,150,151,153,154,156,154,153,154,156,157,159,157,156,157,159,160,162,160,159,160,162,163,165,162,166,162,165,163,97,165,166,165,97,99,168,169,170,169,168,171,169,171,172,172,171,173,173,171,174,174,171,175,174,175,176,176,175,177,176,177,178,178,177,179,178,179,180,180,179,181,180,181,182,182,181,183,182,183,184,184,183,185,185,183,186,185,186,187,187,186,188,187,188,189,189,188,190,189,190,191,191,190,192,191,192,193,172,194,169,194,172,195,194,195,196,194,196,197,197,196,198,197,198,199,199,198,200,199,200,201,201,200,202,201,202,203,203,202,204,203,204,205,203,205,206,206,205,207,206,207,208,208,207,209,208,209,210,210,209,211,210,211,212,212,211,213,212,213,214,214,213,193,214,193,192,214,192,215,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 432, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
gl.glEnable(GL2.GL_BLEND);
gl.glColor4d(0.7764706, 0.7764706, 0.7764706, 1.0);
int[] indices = {
48,
49,
49,
50,
50,
51,
51,
52,
52,
53,
53,
54,
54,
55,
55,
56,
56,
57,
57,
58,
58,
59,
59,
60,
60,
61,
61,
62,
62,
63,
63,
64,
64,
65,
65,
66,
66,
67,
67,
68,
68,
69,
69,
70,
70,
71,
71,
48,
72,
73,
74,
72,
75,
74,
76,
75,
77,
76,
78,
77,
79,
78,
80,
79,
81,
80,
82,
81,
83,
82,
84,
83,
85,
84,
86,
85,
87,
86,
88,
87,
89,
88,
90,
89,
91,
90,
92,
91,
93,
92,
94,
93,
95,
94,
73,
95,
101,
100,
100,
104,
104,
107,
107,
110,
110,
113,
113,
116,
116,
119,
119,
122,
122,
125,
125,
128,
128,
131,
131,
134,
134,
137,
137,
140,
140,
143,
143,
146,
146,
149,
149,
152,
152,
155,
155,
158,
158,
161,
161,
164,
164,
167,
167,
101,
216,
217,
217,
218,
218,
219,
219,
220,
220,
221,
221,
222,
222,
223,
223,
224,
224,
225,
225,
226,
226,
227,
227,
228,
228,
229,
229,
230,
230,
231,
231,
232,
232,
233,
233,
234,
234,
235,
235,
236,
236,
237,
237,
238,
238,
239,
239,
216,
};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices);
gl.glDrawElements(GL2.GL_LINES, indices.length, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
gl.glEnable(GL2.GL_BLEND);
gl.glColor4d(0.3137255, 0.3137255, 0.3137255, 1.0);
int[] indices = {
};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices);
gl.glDrawElements(GL2.GL_LINES, indices.length, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID26(GL2 gl){
float[] positionsArray = {
-2.498501f,-9.578125f,2.2480223f,-1.7736273f,126.984375f,2.8042376f,-2.498501f,126.984375f,2.2480223f,-1.7736273f,-9.578125f,2.8042376f,-2.498501f,126.984375f,2.2480223f,-2.498501f,-9.578125f,2.2480223f,-1.7736273f,-9.578125f,2.8042376f,-1.7736273f,126.984375f,2.8042376f,-3.054716f,-9.578125f,1.5231487f,-3.054716f,126.984375f,1.5231487f,-3.054716f,126.984375f,1.5231487f,-3.054716f,-9.578125f,1.5231487f,-0.9294939f,-9.578125f,3.153889f,-0.9294939f,126.984375f,3.153889f,-0.9294939f,-9.578125f,3.153889f,-0.9294939f,126.984375f,3.153889f,-3.4043677f,126.984375f,0.6790153f,-3.4043677f,-9.578125f,0.6790153f,-3.4043677f,126.984375f,0.6790153f,-3.4043677f,-9.578125f,0.6790153f,-0.0236273f,-9.578125f,3.2731485f,-0.0236273f,126.984375f,3.2731485f,-0.0236273f,-9.578125f,3.2731485f,-0.0236273f,126.984375f,3.2731485f,-3.5236273f,-9.578125f,-0.2268514f,-3.5236273f,126.984375f,-0.2268514f,-3.5236273f,126.984375f,-0.2268514f,-3.5236273f,-9.578125f,-0.2268514f,0.8822394f,-9.578125f,3.153889f,0.8822394f,126.984375f,3.153889f,0.8822394f,-9.578125f,3.153889f,0.8822394f,126.984375f,3.153889f,-3.4043677f,-9.578125f,-1.132718f,-3.4043677f,126.984375f,-1.132718f,-3.4043677f,126.984375f,-1.132718f,-3.4043677f,-9.578125f,-1.132718f,1.7263727f,-9.578125f,2.8042376f,1.7263727f,126.984375f,2.8042376f,1.7263727f,-9.578125f,2.8042376f,1.7263727f,126.984375f,2.8042376f,-3.054716f,-9.578125f,-1.9768513f,-3.054716f,126.984375f,-1.9768513f,-3.054716f,126.984375f,-1.9768513f,-3.054716f,-9.578125f,-1.9768513f,2.4512465f,-9.578125f,2.2480223f,2.4512465f,126.984375f,2.2480223f,2.4512465f,-9.578125f,2.2480223f,2.4512465f,126.984375f,2.2480223f,-2.498501f,126.984375f,-2.701725f,-2.498501f,-9.578125f,-2.701725f,-2.498501f,126.984375f,-2.701725f,-2.498501f,-9.578125f,-2.701725f,3.0074615f,-9.578125f,1.5231487f,3.0074615f,126.984375f,1.5231487f,3.0074615f,-9.578125f,1.5231487f,3.0074615f,126.984375f,1.5231487f,-1.7736273f,126.984375f,-3.2579403f,-1.7736273f,-9.578125f,-3.2579403f,-1.7736273f,126.984375f,-3.2579403f,-1.7736273f,-9.578125f,-3.2579403f,3.3571131f,126.984375f,0.6790153f,3.3571131f,-9.578125f,0.6790153f,3.3571131f,-9.578125f,0.6790153f,3.3571131f,126.984375f,0.6790153f,-0.9294939f,126.984375f,-3.6075916f,-0.9294939f,-9.578125f,-3.6075916f,-0.9294939f,126.984375f,-3.6075916f,-0.9294939f,-9.578125f,-3.6075916f,3.4763727f,-9.578125f,-0.2268514f,3.4763727f,126.984375f,-0.2268514f,3.4763727f,-9.578125f,-0.2268514f,3.4763727f,126.984375f,-0.2268514f,-0.0236273f,126.984375f,-3.7268515f,-0.0236273f,-9.578125f,-3.7268515f,-0.0236273f,126.984375f,-3.7268515f,-0.0236273f,-9.578125f,-3.7268515f,3.3571131f,-9.578125f,-1.132718f,3.3571131f,126.984375f,-1.132718f,3.3571131f,-9.578125f,-1.132718f,3.3571131f,126.984375f,-1.132718f,0.8822394f,126.984375f,-3.6075916f,0.8822394f,-9.578125f,-3.6075916f,0.8822394f,126.984375f,-3.6075916f,0.8822394f,-9.578125f,-3.6075916f,3.0074615f,-9.578125f,-1.9768513f,3.0074615f,126.984375f,-1.9768513f,3.0074615f,-9.578125f,-1.9768513f,3.0074615f,126.984375f,-1.9768513f,1.7263727f,126.984375f,-3.2579403f,1.7263727f,-9.578125f,-3.2579403f,1.7263727f,126.984375f,-3.2579403f,1.7263727f,-9.578125f,-3.2579403f,2.4512465f,126.984375f,-2.701725f,2.4512465f,-9.578125f,-2.701725f,2.4512465f,-9.578125f,-2.701725f,2.4512465f,126.984375f,-2.701725f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
//FloatBuffer fbn = null;
//FloatBuffer fbt = null;
//float[] texcoordArray = null;
{
gl.glColor4d(0.3372549, 0.3372549, 0.3372549, 1.0);
int[] indices = {
0,1,2,1,0,3,2,8,0,8,2,9,12,1,3,1,12,13,8,16,17,16,8,9,20,13,12,13,20,21,16,24,17,24,16,25,28,21,20,21,28,29,25,32,24,32,25,33,36,29,28,29,36,37,33,40,32,40,33,41,44,37,36,37,44,45,40,48,49,48,40,41,52,45,44,45,52,53,56,49,48,49,56,57,60,52,61,52,60,53,64,57,56,57,64,65,68,60,61,60,68,69,72,65,64,65,72,73,76,69,68,69,76,77,80,73,72,73,80,81,84,77,76,77,84,85,88,81,80,81,88,89,92,84,93,84,92,85,92,89,88,89,92,93,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 144, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
gl.glEnable(GL2.GL_BLEND);
gl.glColor4d(0.3137255, 0.3137255, 0.3137255, 1.0);
int[] indices = {
};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices);
gl.glDrawElements(GL2.GL_LINES, indices.length, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
gl.glEnable(GL2.GL_BLEND);
gl.glColor4d(0.7764706, 0.7764706, 0.7764706, 1.0);
int[] indices = {
5,
6,
7,
4,
11,
5,
4,
10,
6,
14,
15,
7,
19,
11,
10,
18,
14,
22,
23,
15,
27,
19,
18,
26,
22,
30,
31,
23,
35,
27,
26,
34,
30,
38,
39,
31,
43,
35,
34,
42,
38,
46,
47,
39,
51,
43,
42,
50,
46,
54,
55,
47,
59,
51,
50,
58,
54,
62,
63,
55,
67,
59,
58,
66,
62,
70,
71,
63,
75,
67,
66,
74,
70,
78,
79,
71,
83,
75,
74,
82,
78,
86,
87,
79,
91,
83,
82,
90,
86,
94,
95,
87,
94,
91,
90,
95,
};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices);
gl.glDrawElements(GL2.GL_LINES, indices.length, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID34(GL2 gl){
float[] positionsArray = {
-0.9294939f,126.984375f,-3.6075916f,0.8822394f,126.984375f,-3.6075916f,-0.0236273f,126.984375f,-3.7268515f,-0.0236273f,126.984375f,-3.5057087f,-0.872258f,126.984375f,-3.3939843f,-1.7736273f,126.984375f,-3.2579403f,-1.663056f,126.984375f,-3.066425f,-2.498501f,126.984375f,-2.701725f,-2.3421297f,126.984375f,-2.5453537f,-3.054716f,126.984375f,-1.9768513f,-2.8632011f,126.984375f,-1.8662801f,-3.4043677f,126.984375f,-1.132718f,-3.1907604f,126.984375f,-1.0754821f,-3.5236273f,126.984375f,-0.2268514f,-3.3024848f,126.984375f,-0.2268514f,-3.1907604f,126.984375f,0.6217794f,-3.4043677f,126.984375f,0.6790153f,-2.8632011f,126.984375f,1.4125774f,-3.054716f,126.984375f,1.5231487f,-2.3421297f,126.984375f,2.091651f,-2.498501f,126.984375f,2.2480223f,-1.663056f,126.984375f,2.6127224f,-1.7736273f,126.984375f,2.8042376f,-0.872258f,126.984375f,2.9402816f,-0.9294939f,126.984375f,3.153889f,-0.0236273f,126.984375f,3.052006f,0.8250035f,126.984375f,-3.3939843f,1.7263727f,126.984375f,-3.2579403f,1.6158015f,126.984375f,-3.066425f,2.4512465f,126.984375f,-2.701725f,2.2948751f,126.984375f,-2.5453537f,3.0074615f,126.984375f,-1.9768513f,2.8159466f,126.984375f,-1.8662801f,3.3571131f,126.984375f,-1.132718f,3.1435058f,126.984375f,-1.0754821f,3.4763727f,126.984375f,-0.2268514f,3.2552302f,126.984375f,-0.2268514f,3.1435058f,126.984375f,0.6217794f,3.3571131f,126.984375f,0.6790153f,2.8159466f,126.984375f,1.4125774f,3.0074615f,126.984375f,1.5231487f,2.2948751f,126.984375f,2.091651f,2.4512465f,126.984375f,2.2480223f,1.6158015f,126.984375f,2.6127224f,1.7263727f,126.984375f,2.8042376f,0.8250035f,126.984375f,2.9402816f,0.8822394f,126.984375f,3.153889f,-0.0236273f,126.984375f,3.2731485f,-3.054716f,126.984375f,-1.9768513f,-2.498501f,126.984375f,-2.701725f,-3.4043677f,126.984375f,-1.132718f,-3.5236273f,126.984375f,-0.2268514f,-3.4043677f,126.984375f,0.6790153f,-3.054716f,126.984375f,1.5231487f,-2.498501f,126.984375f,2.2480223f,-1.7736273f,126.984375f,2.8042376f,-0.9294939f,126.984375f,3.153889f,-0.0236273f,126.984375f,3.2731485f,0.8822394f,126.984375f,3.153889f,1.7263727f,126.984375f,2.8042376f,2.4512465f,126.984375f,2.2480223f,3.0074615f,126.984375f,1.5231487f,3.3571131f,126.984375f,0.6790153f,3.4763727f,126.984375f,-0.2268514f,3.3571131f,126.984375f,-1.132718f,3.0074615f,126.984375f,-1.9768513f,2.4512465f,126.984375f,-2.701725f,1.7263727f,126.984375f,-3.2579403f,0.8822394f,126.984375f,-3.6075916f,-0.0236273f,126.984375f,-3.7268515f,-0.9294939f,126.984375f,-3.6075916f,-1.7736273f,126.984375f,-3.2579403f,3.2552302f,126.984375f,-0.2268514f,3.1435058f,126.984375f,0.6217794f,2.8159466f,126.984375f,1.4125774f,2.2948751f,126.984375f,2.091651f,1.6158015f,126.984375f,2.6127224f,0.8250035f,126.984375f,2.9402816f,-0.0236273f,126.984375f,3.052006f,-0.872258f,126.984375f,2.9402816f,-1.663056f,126.984375f,2.6127224f,-2.3421297f,126.984375f,2.091651f,-2.8632011f,126.984375f,1.4125774f,-3.1907604f,126.984375f,0.6217794f,-3.3024848f,126.984375f,-0.2268514f,-3.1907604f,126.984375f,-1.0754821f,-2.8632011f,126.984375f,-1.8662801f,-2.3421297f,126.984375f,-2.5453537f,-1.663056f,126.984375f,-3.066425f,-0.872258f,126.984375f,-3.3939843f,-0.0236273f,126.984375f,-3.5057087f,0.8250035f,126.984375f,-3.3939843f,1.6158015f,126.984375f,-3.066425f,2.2948751f,126.984375f,-2.5453537f,2.8159466f,126.984375f,-1.8662801f,3.1435058f,126.984375f,-1.0754821f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
//FloatBuffer fbn = null;
//FloatBuffer fbt = null;
//float[] texcoordArray = null;
{
gl.glColor4d(0.7764706, 0.7764706, 0.7764706, 1.0);
int[] indices = {
0,1,2,1,0,3,3,0,4,4,0,5,4,5,6,6,5,7,6,7,8,8,7,9,8,9,10,10,9,11,10,11,12,12,11,13,12,13,14,14,13,15,15,13,16,15,16,17,17,16,18,17,18,19,19,18,20,19,20,21,21,20,22,21,22,23,23,22,24,23,24,25,1,26,27,26,1,3,27,26,28,27,28,29,29,28,30,29,30,31,31,30,32,31,32,33,33,32,34,33,34,35,35,34,36,35,36,37,35,37,38,38,37,39,38,39,40,40,39,41,40,41,42,42,41,43,42,43,44,44,43,45,44,45,46,46,45,25,46,25,24,46,24,47,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 144, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
gl.glEnable(GL2.GL_BLEND);
gl.glColor4d(0.7764706, 0.7764706, 0.7764706, 1.0);
int[] indices = {
48,
49,
50,
48,
51,
50,
52,
51,
53,
52,
54,
53,
55,
54,
56,
55,
57,
56,
58,
57,
59,
58,
60,
59,
61,
60,
62,
61,
63,
62,
64,
63,
65,
64,
66,
65,
67,
66,
68,
67,
69,
68,
70,
69,
71,
70,
49,
71,
72,
73,
73,
74,
74,
75,
75,
76,
76,
77,
77,
78,
78,
79,
79,
80,
80,
81,
81,
82,
82,
83,
83,
84,
84,
85,
85,
86,
86,
87,
87,
88,
88,
89,
89,
90,
90,
91,
91,
92,
92,
93,
93,
94,
94,
95,
95,
72,
};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices);
gl.glDrawElements(GL2.GL_LINES, indices.length, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID40(GL2 gl){
float[] positionsArray = {
0.8822394f,-15.328125f,-3.6075916f,-0.9294939f,-15.328125f,-3.6075916f,-0.0236273f,-15.328125f,-3.7268515f,-0.0236273f,-15.328125f,-3.5057087f,0.8250035f,-15.328125f,-3.3939843f,1.7263727f,-15.328125f,-3.2579403f,1.6158015f,-15.328125f,-3.066425f,2.4512465f,-15.328125f,-2.701725f,2.2948751f,-15.328125f,-2.5453537f,3.0074615f,-15.328125f,-1.9768513f,2.8159466f,-15.328125f,-1.8662801f,3.3571131f,-15.328125f,-1.132718f,3.1435058f,-15.328125f,-1.0754821f,3.4763727f,-15.328125f,-0.2268514f,3.2552302f,-15.328125f,-0.2268514f,3.3571131f,-15.328125f,0.6790153f,3.1435058f,-15.328125f,0.6217794f,2.8159466f,-15.328125f,1.4125774f,3.0074615f,-15.328125f,1.5231487f,2.2948751f,-15.328125f,2.091651f,2.4512465f,-15.328125f,2.2480223f,1.6158015f,-15.328125f,2.6127224f,1.7263727f,-15.328125f,2.8042376f,0.8250035f,-15.328125f,2.9402816f,0.8822394f,-15.328125f,3.153889f,-0.0236273f,-15.328125f,3.052006f,-0.872258f,-15.328125f,-3.3939843f,-1.7736273f,-15.328125f,-3.2579403f,-1.663056f,-15.328125f,-3.066425f,-2.498501f,-15.328125f,-2.701725f,-2.3421297f,-15.328125f,-2.5453537f,-3.054716f,-15.328125f,-1.9768513f,-2.8632011f,-15.328125f,-1.8662801f,-3.4043677f,-15.328125f,-1.132718f,-3.1907604f,-15.328125f,-1.0754821f,-3.5236273f,-15.328125f,-0.2268514f,-3.3024848f,-15.328125f,-0.2268514f,-3.1907604f,-15.328125f,0.6217794f,-3.4043677f,-15.328125f,0.6790153f,-2.8632011f,-15.328125f,1.4125774f,-3.054716f,-15.328125f,1.5231487f,-2.3421297f,-15.328125f,2.091651f,-2.498501f,-15.328125f,2.2480223f,-1.663056f,-15.328125f,2.6127224f,-1.7736273f,-15.328125f,2.8042376f,-0.872258f,-15.328125f,2.9402816f,-0.9294939f,-15.328125f,3.153889f,-0.0236273f,-15.328125f,3.2731485f,-3.054716f,-15.328125f,-1.9768513f,-2.498501f,-15.328125f,-2.701725f,-1.7736273f,-15.328125f,-3.2579403f,-0.9294939f,-15.328125f,-3.6075916f,-0.0236273f,-15.328125f,-3.7268515f,0.8822394f,-15.328125f,-3.6075916f,1.7263727f,-15.328125f,-3.2579403f,2.4512465f,-15.328125f,-2.701725f,3.0074615f,-15.328125f,-1.9768513f,3.3571131f,-15.328125f,-1.132718f,3.4763727f,-15.328125f,-0.2268514f,3.3571131f,-15.328125f,0.6790153f,3.0074615f,-15.328125f,1.5231487f,2.4512465f,-15.328125f,2.2480223f,1.7263727f,-15.328125f,2.8042376f,0.8822394f,-15.328125f,3.153889f,-0.0236273f,-15.328125f,3.2731485f,-0.9294939f,-15.328125f,3.153889f,-1.7736273f,-15.328125f,2.8042376f,-2.498501f,-15.328125f,2.2480223f,-3.054716f,-15.328125f,1.5231487f,-3.4043677f,-15.328125f,0.6790153f,-3.5236273f,-15.328125f,-0.2268514f,-3.4043677f,-15.328125f,-1.132718f,3.2552302f,-15.328125f,-0.2268514f,3.1435058f,-15.328125f,0.6217794f,3.1435058f,-15.328125f,-1.0754821f,2.8159466f,-15.328125f,-1.8662801f,2.2948751f,-15.328125f,-2.5453537f,1.6158015f,-15.328125f,-3.066425f,0.8250035f,-15.328125f,-3.3939843f,-0.0236273f,-15.328125f,-3.5057087f,-0.872258f,-15.328125f,-3.3939843f,-1.663056f,-15.328125f,-3.066425f,-2.3421297f,-15.328125f,-2.5453537f,-2.8632011f,-15.328125f,-1.8662801f,-3.1907604f,-15.328125f,-1.0754821f,-3.3024848f,-15.328125f,-0.2268514f,-3.1907604f,-15.328125f,0.6217794f,-2.8632011f,-15.328125f,1.4125774f,-2.3421297f,-15.328125f,2.091651f,-1.663056f,-15.328125f,2.6127224f,-0.872258f,-15.328125f,2.9402816f,-0.0236273f,-15.328125f,3.052006f,0.8250035f,-15.328125f,2.9402816f,1.6158015f,-15.328125f,2.6127224f,2.2948751f,-15.328125f,2.091651f,2.8159466f,-15.328125f,1.4125774f,-3.054716f,-15.328125f,-1.9768513f,-2.498501f,-12.8125f,-2.701725f,-2.498501f,-15.328125f,-2.701725f,-3.054716f,-12.8125f,-1.9768513f,-3.054716f,-12.8125f,-1.9768513f,-2.498501f,-12.8125f,-2.701725f,-2.498501f,-15.328125f,-2.701725f,-3.054716f,-20.71875f,-1.9768513f,-2.498501f,-20.71875f,-2.701725f,-3.054716f,-15.328125f,-1.9768513f,-3.054716f,-20.71875f,-1.9768513f,-2.498501f,-20.71875f,-2.701725f,-1.7736273f,-12.8125f,-3.2579403f,-1.7736273f,-15.328125f,-3.2579403f,-1.7736273f,-12.8125f,-3.2579403f,-1.7736273f,-20.71875f,-3.2579403f,-1.7736273f,-15.328125f,-3.2579403f,-1.7736273f,-20.71875f,-3.2579403f,-0.9294939f,-12.8125f,-3.6075916f,-0.9294939f,-15.328125f,-3.6075916f,-0.9294939f,-12.8125f,-3.6075916f,-0.9294939f,-20.71875f,-3.6075916f,-0.9294939f,-15.328125f,-3.6075916f,-0.9294939f,-20.71875f,-3.6075916f,-0.0236273f,-12.8125f,-3.7268515f,-0.0236273f,-15.328125f,-3.7268515f,-0.0236273f,-12.8125f,-3.7268515f,-0.0236273f,-20.71875f,-3.7268515f,-0.0236273f,-15.328125f,-3.7268515f,-0.0236273f,-20.71875f,-3.7268515f,0.8822394f,-12.8125f,-3.6075916f,0.8822394f,-15.328125f,-3.6075916f,0.8822394f,-12.8125f,-3.6075916f,0.8822394f,-20.71875f,-3.6075916f,0.8822394f,-15.328125f,-3.6075916f,0.8822394f,-20.71875f,-3.6075916f,1.7263727f,-12.8125f,-3.2579403f,1.7263727f,-15.328125f,-3.2579403f,1.7263727f,-12.8125f,-3.2579403f,1.7263727f,-20.71875f,-3.2579403f,1.7263727f,-15.328125f,-3.2579403f,1.7263727f,-20.71875f,-3.2579403f,2.4512465f,-12.8125f,-2.701725f,2.4512465f,-15.328125f,-2.701725f,2.4512465f,-12.8125f,-2.701725f,2.4512465f,-20.71875f,-2.701725f,2.4512465f,-15.328125f,-2.701725f,2.4512465f,-20.71875f,-2.701725f,3.0074615f,-15.328125f,-1.9768513f,3.0074615f,-12.8125f,-1.9768513f,3.0074615f,-12.8125f,-1.9768513f,3.0074615f,-20.71875f,-1.9768513f,3.0074615f,-15.328125f,-1.9768513f,3.0074615f,-20.71875f,-1.9768513f,3.3571131f,-12.8125f,-1.132718f,3.3571131f,-15.328125f,-1.132718f,3.3571131f,-12.8125f,-1.132718f,3.3571131f,-20.71875f,-1.132718f,3.3571131f,-15.328125f,-1.132718f,3.3571131f,-20.71875f,-1.132718f,3.4763727f,-12.8125f,-0.2268514f,3.4763727f,-15.328125f,-0.2268514f,3.4763727f,-12.8125f,-0.2268514f,3.4763727f,-15.328125f,-0.2268514f,3.4763727f,-20.71875f,-0.2268514f,3.4763727f,-20.71875f,-0.2268514f,3.3571131f,-12.8125f,0.6790153f,3.3571131f,-15.328125f,0.6790153f,3.3571131f,-12.8125f,0.6790153f,3.3571131f,-15.328125f,0.6790153f,3.3571131f,-20.71875f,0.6790153f,3.3571131f,-20.71875f,0.6790153f,3.0074615f,-15.328125f,1.5231487f,3.0074615f,-12.8125f,1.5231487f,3.0074615f,-12.8125f,1.5231487f,3.0074615f,-20.71875f,1.5231487f,3.0074615f,-15.328125f,1.5231487f,3.0074615f,-20.71875f,1.5231487f,2.4512465f,-12.8125f,2.2480223f,2.4512465f,-15.328125f,2.2480223f,2.4512465f,-12.8125f,2.2480223f,2.4512465f,-15.328125f,2.2480223f,2.4512465f,-20.71875f,2.2480223f,2.4512465f,-20.71875f,2.2480223f,1.7263727f,-12.8125f,2.8042376f,1.7263727f,-15.328125f,2.8042376f,1.7263727f,-12.8125f,2.8042376f,1.7263727f,-20.71875f,2.8042376f,1.7263727f,-15.328125f,2.8042376f,1.7263727f,-20.71875f,2.8042376f,0.8822394f,-12.8125f,3.153889f,0.8822394f,-15.328125f,3.153889f,0.8822394f,-12.8125f,3.153889f,0.8822394f,-15.328125f,3.153889f,0.8822394f,-20.71875f,3.153889f,0.8822394f,-20.71875f,3.153889f,-0.0236273f,-12.8125f,3.2731485f,-0.0236273f,-15.328125f,3.2731485f,-0.0236273f,-12.8125f,3.2731485f,-0.0236273f,-15.328125f,3.2731485f,-0.0236273f,-20.71875f,3.2731485f,-0.0236273f,-20.71875f,3.2731485f,-0.9294939f,-12.8125f,3.153889f,-0.9294939f,-15.328125f,3.153889f,-0.9294939f,-12.8125f,3.153889f,-0.9294939f,-20.71875f,3.153889f,-0.9294939f,-15.328125f,3.153889f,-0.9294939f,-20.71875f,3.153889f,-1.7736273f,-12.8125f,2.8042376f,-1.7736273f,-15.328125f,2.8042376f,-1.7736273f,-12.8125f,2.8042376f,-1.7736273f,-15.328125f,2.8042376f,-1.7736273f,-20.71875f,2.8042376f,-1.7736273f,-20.71875f,2.8042376f,-2.498501f,-12.8125f,2.2480223f,-2.498501f,-15.328125f,2.2480223f,-2.498501f,-12.8125f,2.2480223f,-2.498501f,-15.328125f,2.2480223f,-2.498501f,-20.71875f,2.2480223f,-2.498501f,-20.71875f,2.2480223f,-3.054716f,-15.328125f,1.5231487f,-3.054716f,-12.8125f,1.5231487f,-3.054716f,-12.8125f,1.5231487f,-3.054716f,-20.71875f,1.5231487f,-3.054716f,-15.328125f,1.5231487f,-3.054716f,-20.71875f,1.5231487f,-3.4043677f,-12.8125f,0.6790153f,-3.4043677f,-15.328125f,0.6790153f,-3.4043677f,-12.8125f,0.6790153f,-3.4043677f,-15.328125f,0.6790153f,-3.4043677f,-20.71875f,0.6790153f,-3.4043677f,-20.71875f,0.6790153f,-3.5236273f,-15.328125f,-0.2268514f,-3.5236273f,-12.8125f,-0.2268514f,-3.5236273f,-12.8125f,-0.2268514f,-3.5236273f,-20.71875f,-0.2268514f,-3.5236273f,-15.328125f,-0.2268514f,-3.5236273f,-20.71875f,-0.2268514f,-3.4043677f,-15.328125f,-1.132718f,-3.4043677f,-12.8125f,-1.132718f,-3.4043677f,-12.8125f,-1.132718f,-3.4043677f,-20.71875f,-1.132718f,-3.4043677f,-15.328125f,-1.132718f,-3.4043677f,-20.71875f,-1.132718f,-3.054716f,-12.8125f,-1.9768513f,-2.498501f,-9.578125f,-2.701725f,-2.498501f,-12.8125f,-2.701725f,-3.054716f,-9.578125f,-1.9768513f,-3.054716f,-9.578125f,-1.9768513f,-2.498501f,-9.578125f,-2.701725f,-1.7736273f,-12.8125f,-3.2579403f,-1.7736273f,-9.578125f,-3.2579403f,-1.7736273f,-9.578125f,-3.2579403f,-0.9294939f,-12.8125f,-3.6075916f,-0.9294939f,-9.578125f,-3.6075916f,-0.9294939f,-9.578125f,-3.6075916f,-0.0236273f,-12.8125f,-3.7268515f,-0.0236273f,-9.578125f,-3.7268515f,-0.0236273f,-9.578125f,-3.7268515f,0.8822394f,-12.8125f,-3.6075916f,0.8822394f,-9.578125f,-3.6075916f,0.8822394f,-9.578125f,-3.6075916f,1.7263727f,-12.8125f,-3.2579403f,1.7263727f,-9.578125f,-3.2579403f,1.7263727f,-9.578125f,-3.2579403f,2.4512465f,-12.8125f,-2.701725f,2.4512465f,-9.578125f,-2.701725f,2.4512465f,-9.578125f,-2.701725f,3.0074615f,-12.8125f,-1.9768513f,3.0074615f,-9.578125f,-1.9768513f,3.0074615f,-9.578125f,-1.9768513f,3.3571131f,-9.578125f,-1.132718f,3.3571131f,-12.8125f,-1.132718f,3.3571131f,-9.578125f,-1.132718f,3.4763727f,-9.578125f,-0.2268514f,3.4763727f,-12.8125f,-0.2268514f,3.4763727f,-9.578125f,-0.2268514f,3.3571131f,-9.578125f,0.6790153f,3.3571131f,-12.8125f,0.6790153f,3.3571131f,-9.578125f,0.6790153f,3.0074615f,-12.8125f,1.5231487f,3.0074615f,-9.578125f,1.5231487f,3.0074615f,-9.578125f,1.5231487f,2.4512465f,-9.578125f,2.2480223f,2.4512465f,-12.8125f,2.2480223f,2.4512465f,-9.578125f,2.2480223f,1.7263727f,-9.578125f,2.8042376f,1.7263727f,-12.8125f,2.8042376f,1.7263727f,-9.578125f,2.8042376f,0.8822394f,-9.578125f,3.153889f,0.8822394f,-12.8125f,3.153889f,0.8822394f,-9.578125f,3.153889f,-0.0236273f,-9.578125f,3.2731485f,-0.0236273f,-12.8125f,3.2731485f,-0.0236273f,-9.578125f,3.2731485f,-0.9294939f,-9.578125f,3.153889f,-0.9294939f,-12.8125f,3.153889f,-0.9294939f,-9.578125f,3.153889f,-1.7736273f,-9.578125f,2.8042376f,-1.7736273f,-12.8125f,2.8042376f,-1.7736273f,-9.578125f,2.8042376f,-2.498501f,-9.578125f,2.2480223f,-2.498501f,-12.8125f,2.2480223f,-2.498501f,-9.578125f,2.2480223f,-3.054716f,-12.8125f,1.5231487f,-3.054716f,-9.578125f,1.5231487f,-3.054716f,-9.578125f,1.5231487f,-3.4043677f,-9.578125f,0.6790153f,-3.4043677f,-12.8125f,0.6790153f,-3.4043677f,-9.578125f,0.6790153f,-3.5236273f,-12.8125f,-0.2268514f,-3.5236273f,-9.578125f,-0.2268514f,-3.5236273f,-9.578125f,-0.2268514f,-3.4043677f,-12.8125f,-1.132718f,-3.4043677f,-9.578125f,-1.132718f,-3.4043677f,-9.578125f,-1.132718f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
//FloatBuffer fbn = null;
//FloatBuffer fbt = null;
//float[] texcoordArray = null;
{
gl.glColor4d(0.7764706, 0.7764706, 0.7764706, 1.0);
int[] indices = {
0,1,2,1,0,3,3,0,4,4,0,5,4,5,6,6,5,7,6,7,8,8,7,9,8,9,10,10,9,11,10,11,12,12,11,13,12,13,14,14,13,15,14,15,16,16,15,17,17,15,18,17,18,19,19,18,20,19,20,21,21,20,22,21,22,23,23,22,24,23,24,25,1,26,27,26,1,3,27,26,28,27,28,29,29,28,30,29,30,31,31,30,32,31,32,33,33,32,34,33,34,35,35,34,36,35,36,37,35,37,38,38,37,39,38,39,40,40,39,41,40,41,42,42,41,43,42,43,44,44,43,45,44,45,46,46,45,25,46,25,24,46,24,47,96,97,98,97,96,99,102,103,104,103,102,105,108,98,97,98,108,109,111,102,104,102,111,112,114,109,108,109,114,115,117,112,111,112,117,118,120,115,114,115,120,121,123,118,117,118,123,124,126,121,120,121,126,127,129,124,123,124,129,130,132,127,126,127,132,133,135,130,129,130,135,136,138,133,132,133,138,139,141,136,135,136,141,142,138,144,139,144,138,145,147,142,141,142,147,148,144,150,151,150,144,145,153,148,147,148,153,154,151,156,157,156,151,150,159,153,160,153,159,154,157,162,163,162,157,156,165,160,166,160,165,159,162,168,163,168,162,169,171,165,166,165,171,172,168,174,175,174,168,169,177,171,178,171,177,172,175,180,181,180,175,174,177,183,184,183,177,178,181,186,187,186,181,180,189,183,190,183,189,184,187,192,193,192,187,186,195,190,196,190,195,189,193,198,199,198,193,192,195,201,202,201,195,196,199,204,205,204,199,198,207,201,208,201,207,202,205,210,211,210,205,204,213,208,214,208,213,207,210,216,211,216,210,217,219,213,214,213,219,220,216,222,223,222,216,217,225,219,226,219,225,220,222,228,223,228,222,229,231,225,226,225,231,232,229,234,228,234,229,235,237,232,231,232,237,238,235,96,234,96,235,99,105,237,103,237,105,238,240,241,242,241,240,243,241,246,242,246,241,247,247,249,246,249,247,250,250,252,249,252,250,253,253,255,252,255,253,256,256,258,255,258,256,259,259,261,258,261,259,262,262,264,261,264,262,265,264,267,268,267,264,265,268,270,271,270,268,267,271,273,274,273,271,270,273,276,274,276,273,277,276,279,280,279,276,277,280,282,283,282,280,279,283,285,286,285,283,282,286,288,289,288,286,285,289,291,292,291,289,288,292,294,295,294,292,291,295,297,298,297,295,294,297,300,298,300,297,301,300,303,304,303,300,301,303,306,304,306,303,307,307,309,306,309,307,310,310,240,309,240,310,243,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 576, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
gl.glEnable(GL2.GL_BLEND);
gl.glColor4d(0.7764706, 0.7764706, 0.7764706, 1.0);
int[] indices = {
48,
49,
49,
50,
50,
51,
51,
52,
52,
53,
53,
54,
54,
55,
55,
56,
56,
57,
57,
58,
58,
59,
59,
60,
60,
61,
61,
62,
62,
63,
63,
64,
64,
65,
65,
66,
66,
67,
67,
68,
68,
69,
69,
70,
70,
71,
71,
48,
72,
73,
74,
72,
75,
74,
76,
75,
77,
76,
78,
77,
79,
78,
80,
79,
81,
80,
82,
81,
83,
82,
84,
83,
85,
84,
86,
85,
87,
86,
88,
87,
89,
88,
90,
89,
91,
90,
92,
91,
93,
92,
94,
93,
95,
94,
73,
95,
100,
101,
106,
107,
101,
110,
107,
113,
110,
116,
113,
119,
116,
122,
119,
125,
122,
128,
125,
131,
128,
134,
131,
137,
134,
140,
137,
143,
140,
146,
143,
149,
146,
152,
149,
155,
152,
158,
155,
161,
158,
164,
161,
167,
164,
170,
167,
173,
170,
176,
173,
179,
176,
182,
179,
185,
182,
188,
185,
191,
188,
194,
191,
197,
194,
200,
197,
203,
200,
206,
203,
209,
206,
212,
209,
215,
212,
218,
215,
221,
218,
224,
221,
227,
224,
230,
227,
233,
230,
236,
233,
239,
236,
100,
239,
106,
245,
244,
248,
245,
251,
248,
254,
251,
257,
254,
260,
257,
263,
260,
266,
263,
269,
266,
272,
269,
275,
272,
278,
275,
281,
278,
284,
281,
287,
284,
290,
287,
293,
290,
296,
293,
299,
296,
302,
299,
305,
302,
308,
305,
311,
308,
244,
311,
};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices);
gl.glDrawElements(GL2.GL_LINES, indices.length, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
gl.glEnable(GL2.GL_BLEND);
gl.glColor4d(0.3137255, 0.3137255, 0.3137255, 1.0);
int[] indices = {
};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices);
gl.glDrawElements(GL2.GL_LINES, indices.length, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID46(GL2 gl){
float[] positionsArray = {
1.8822775f,-20.71875f,3.0742724f,0.9629416f,-12.8125f,3.4550738f,0.9629416f,-20.71875f,3.4550738f,1.8822775f,-12.8125f,3.0742724f,0.9629416f,-20.71875f,3.4550738f,0.9629416f,-12.8125f,3.4550738f,1.8822775f,-20.71875f,3.0742724f,1.8822775f,-12.8125f,3.0742724f,-0.0236273f,-12.8125f,3.584958f,-0.0236273f,-20.71875f,3.584958f,-0.0236273f,-20.71875f,3.584958f,-0.0236273f,-12.8125f,3.584958f,0.9629416f,-20.71875f,-3.9087765f,-1.0101962f,-20.71875f,-3.9087765f,-0.0236273f,-20.71875f,-4.038661f,1.8822775f,-20.71875f,-3.527975f,-0.0236273f,-20.71875f,-3.7268515f,0.8822394f,-20.71875f,-3.6075916f,1.7263727f,-20.71875f,-3.2579403f,2.671729f,-20.71875f,-2.9222076f,2.4512465f,-20.71875f,-2.701725f,3.2774966f,-20.71875f,-2.132756f,3.0074615f,-20.71875f,-1.9768513f,3.658298f,-20.71875f,-1.2134203f,3.3571131f,-20.71875f,-1.132718f,3.7881823f,-20.71875f,-0.2268514f,3.4763727f,-20.71875f,-0.2268514f,3.658298f,-20.71875f,0.7597175f,3.3571131f,-20.71875f,0.6790153f,3.0074615f,-20.71875f,1.5231487f,3.2774966f,-20.71875f,1.6790534f,2.4512465f,-20.71875f,2.2480223f,2.671729f,-20.71875f,2.468505f,1.7263727f,-20.71875f,2.8042376f,1.8822775f,-20.71875f,3.0742724f,0.8822394f,-20.71875f,3.153889f,0.9629416f,-20.71875f,3.4550738f,-0.0236273f,-20.71875f,3.2731485f,-1.929532f,-20.71875f,-3.527975f,-0.9294939f,-20.71875f,-3.6075916f,-1.7736273f,-20.71875f,-3.2579403f,-2.7189837f,-20.71875f,-2.9222076f,-2.498501f,-20.71875f,-2.701725f,-3.3247511f,-20.71875f,-2.132756f,-3.054716f,-20.71875f,-1.9768513f,-3.7055526f,-20.71875f,-1.2134203f,-3.4043677f,-20.71875f,-1.132718f,-3.8354368f,-20.71875f,-0.2268514f,-3.5236273f,-20.71875f,-0.2268514f,-3.4043677f,-20.71875f,0.6790153f,-3.7055526f,-20.71875f,0.7597175f,-3.054716f,-20.71875f,1.5231487f,-3.3247511f,-20.71875f,1.6790534f,-2.498501f,-20.71875f,2.2480223f,-2.7189837f,-20.71875f,2.468505f,-1.7736273f,-20.71875f,2.8042376f,-1.929532f,-20.71875f,3.0742724f,-0.9294939f,-20.71875f,3.153889f,-1.0101962f,-20.71875f,3.4550738f,-0.0236273f,-20.71875f,3.584958f,-3.7055526f,-20.71875f,-1.2134203f,-3.3247511f,-20.71875f,-2.132756f,-2.7189837f,-20.71875f,-2.9222076f,-1.929532f,-20.71875f,-3.527975f,-1.0101962f,-20.71875f,-3.9087765f,-0.0236273f,-20.71875f,-4.038661f,0.9629416f,-20.71875f,-3.9087765f,1.8822775f,-20.71875f,-3.527975f,2.671729f,-20.71875f,-2.9222076f,3.2774966f,-20.71875f,-2.132756f,3.658298f,-20.71875f,-1.2134203f,3.7881823f,-20.71875f,-0.2268514f,3.658298f,-20.71875f,0.7597175f,3.2774966f,-20.71875f,1.6790534f,2.671729f,-20.71875f,2.468505f,-1.0101962f,-20.71875f,3.4550738f,-1.929532f,-20.71875f,3.0742724f,-2.7189837f,-20.71875f,2.468505f,-3.3247511f,-20.71875f,1.6790534f,-3.7055526f,-20.71875f,0.7597175f,-3.8354368f,-20.71875f,-0.2268514f,-3.054716f,-20.71875f,-1.9768513f,-2.498501f,-20.71875f,-2.701725f,-3.4043677f,-20.71875f,-1.132718f,-3.5236273f,-20.71875f,-0.2268514f,-3.4043677f,-20.71875f,0.6790153f,-3.054716f,-20.71875f,1.5231487f,-2.498501f,-20.71875f,2.2480223f,-1.7736273f,-20.71875f,2.8042376f,-0.9294939f,-20.71875f,3.153889f,-0.0236273f,-20.71875f,3.2731485f,0.8822394f,-20.71875f,3.153889f,1.7263727f,-20.71875f,2.8042376f,2.4512465f,-20.71875f,2.2480223f,3.0074615f,-20.71875f,1.5231487f,3.3571131f,-20.71875f,0.6790153f,3.4763727f,-20.71875f,-0.2268514f,3.3571131f,-20.71875f,-1.132718f,3.0074615f,-20.71875f,-1.9768513f,2.4512465f,-20.71875f,-2.701725f,1.7263727f,-20.71875f,-3.2579403f,0.8822394f,-20.71875f,-3.6075916f,-0.0236273f,-20.71875f,-3.7268515f,-0.9294939f,-20.71875f,-3.6075916f,-1.7736273f,-20.71875f,-3.2579403f,2.671729f,-20.71875f,2.468505f,2.671729f,-12.8125f,2.468505f,2.671729f,-12.8125f,2.468505f,-1.0101962f,-12.8125f,-3.9087765f,0.9629416f,-12.8125f,-3.9087765f,-0.0236273f,-12.8125f,-4.038661f,-1.929532f,-12.8125f,-3.527975f,-0.0236273f,-12.8125f,-3.7268515f,-0.9294939f,-12.8125f,-3.6075916f,-1.7736273f,-12.8125f,-3.2579403f,-2.7189837f,-12.8125f,-2.9222076f,-2.498501f,-12.8125f,-2.701725f,-3.3247511f,-12.8125f,-2.132756f,-3.054716f,-12.8125f,-1.9768513f,-3.7055526f,-12.8125f,-1.2134203f,-3.4043677f,-12.8125f,-1.132718f,-3.8354368f,-12.8125f,-0.2268514f,-3.5236273f,-12.8125f,-0.2268514f,-3.7055526f,-12.8125f,0.7597175f,-3.4043677f,-12.8125f,0.6790153f,-3.054716f,-12.8125f,1.5231487f,-3.3247511f,-12.8125f,1.6790534f,-2.498501f,-12.8125f,2.2480223f,-2.7189837f,-12.8125f,2.468505f,-1.7736273f,-12.8125f,2.8042376f,-1.929532f,-12.8125f,3.0742724f,-0.9294939f,-12.8125f,3.153889f,-1.0101962f,-12.8125f,3.4550738f,-0.0236273f,-12.8125f,3.2731485f,1.8822775f,-12.8125f,-3.527975f,0.8822394f,-12.8125f,-3.6075916f,1.7263727f,-12.8125f,-3.2579403f,2.671729f,-12.8125f,-2.9222076f,2.4512465f,-12.8125f,-2.701725f,3.2774966f,-12.8125f,-2.132756f,3.0074615f,-12.8125f,-1.9768513f,3.658298f,-12.8125f,-1.2134203f,3.3571131f,-12.8125f,-1.132718f,3.7881823f,-12.8125f,-0.2268514f,3.4763727f,-12.8125f,-0.2268514f,3.3571131f,-12.8125f,0.6790153f,3.658298f,-12.8125f,0.7597175f,3.0074615f,-12.8125f,1.5231487f,3.2774966f,-12.8125f,1.6790534f,2.4512465f,-12.8125f,2.2480223f,2.671729f,-12.8125f,2.468505f,1.7263727f,-12.8125f,2.8042376f,1.8822775f,-12.8125f,3.0742724f,0.8822394f,-12.8125f,3.153889f,0.9629416f,-12.8125f,3.4550738f,-0.0236273f,-12.8125f,3.584958f,-3.7055526f,-12.8125f,-1.2134203f,-3.3247511f,-12.8125f,-2.132756f,-3.8354368f,-12.8125f,-0.2268514f,-3.7055526f,-12.8125f,0.7597175f,-3.3247511f,-12.8125f,1.6790534f,-2.7189837f,-12.8125f,2.468505f,-1.929532f,-12.8125f,3.0742724f,-1.0101962f,-12.8125f,3.4550738f,3.2774966f,-12.8125f,1.6790534f,3.658298f,-12.8125f,0.7597175f,3.7881823f,-12.8125f,-0.2268514f,3.658298f,-12.8125f,-1.2134203f,3.2774966f,-12.8125f,-2.132756f,2.671729f,-12.8125f,-2.9222076f,1.8822775f,-12.8125f,-3.527975f,0.9629416f,-12.8125f,-3.9087765f,-0.0236273f,-12.8125f,-4.038661f,-1.0101962f,-12.8125f,-3.9087765f,-1.929532f,-12.8125f,-3.527975f,-2.7189837f,-12.8125f,-2.9222076f,-3.054716f,-12.8125f,-1.9768513f,-2.498501f,-12.8125f,-2.701725f,-1.7736273f,-12.8125f,-3.2579403f,-0.9294939f,-12.8125f,-3.6075916f,-0.0236273f,-12.8125f,-3.7268515f,0.8822394f,-12.8125f,-3.6075916f,1.7263727f,-12.8125f,-3.2579403f,2.4512465f,-12.8125f,-2.701725f,3.0074615f,-12.8125f,-1.9768513f,3.3571131f,-12.8125f,-1.132718f,3.4763727f,-12.8125f,-0.2268514f,3.3571131f,-12.8125f,0.6790153f,3.0074615f,-12.8125f,1.5231487f,2.4512465f,-12.8125f,2.2480223f,1.7263727f,-12.8125f,2.8042376f,0.8822394f,-12.8125f,3.153889f,-0.0236273f,-12.8125f,3.2731485f,-0.9294939f,-12.8125f,3.153889f,-1.7736273f,-12.8125f,2.8042376f,-2.498501f,-12.8125f,2.2480223f,-3.054716f,-12.8125f,1.5231487f,-3.4043677f,-12.8125f,0.6790153f,-3.5236273f,-12.8125f,-0.2268514f,-3.4043677f,-12.8125f,-1.132718f,-1.0101962f,-12.8125f,3.4550738f,-1.0101962f,-20.71875f,3.4550738f,-3.7055526f,-20.71875f,-1.2134203f,-3.3247511f,-12.8125f,-2.132756f,-3.3247511f,-20.71875f,-2.132756f,-3.7055526f,-12.8125f,-1.2134203f,-2.7189837f,-20.71875f,-2.9222076f,-2.7189837f,-12.8125f,-2.9222076f,-1.929532f,-20.71875f,-3.527975f,-1.929532f,-12.8125f,-3.527975f,-1.0101962f,-20.71875f,-3.9087765f,-1.0101962f,-12.8125f,-3.9087765f,-0.0236273f,-20.71875f,-4.038661f,-0.0236273f,-12.8125f,-4.038661f,0.9629416f,-20.71875f,-3.9087765f,0.9629416f,-12.8125f,-3.9087765f,1.8822775f,-20.71875f,-3.527975f,1.8822775f,-12.8125f,-3.527975f,2.671729f,-12.8125f,-2.9222076f,2.671729f,-20.71875f,-2.9222076f,3.2774966f,-12.8125f,-2.132756f,3.2774966f,-20.71875f,-2.132756f,3.658298f,-20.71875f,-1.2134203f,3.658298f,-12.8125f,-1.2134203f,3.7881823f,-12.8125f,-0.2268514f,3.7881823f,-20.71875f,-0.2268514f,3.658298f,-12.8125f,0.7597175f,3.658298f,-20.71875f,0.7597175f,3.2774966f,-12.8125f,1.6790534f,3.2774966f,-20.71875f,1.6790534f,-1.929532f,-12.8125f,3.0742724f,-1.929532f,-20.71875f,3.0742724f,-2.7189837f,-12.8125f,2.468505f,-2.7189837f,-20.71875f,2.468505f,-3.3247511f,-20.71875f,1.6790534f,-3.3247511f,-12.8125f,1.6790534f,-3.7055526f,-20.71875f,0.7597175f,-3.7055526f,-12.8125f,0.7597175f,-3.8354368f,-20.71875f,-0.2268514f,-3.8354368f,-12.8125f,-0.2268514f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
//FloatBuffer fbn = null;
//FloatBuffer fbt = null;
//float[] texcoordArray = null;
{
gl.glColor4d(0.7764706, 0.7764706, 0.7764706, 1.0);
int[] indices = {
0,1,2,1,0,3,2,8,9,8,2,1,12,13,14,13,12,15,13,15,16,16,15,17,17,15,18,18,15,19,18,19,20,20,19,21,20,21,22,22,21,23,22,23,24,24,23,25,24,25,26,26,25,27,26,27,28,28,27,29,29,27,30,29,30,31,31,30,32,31,32,33,33,32,34,33,34,35,35,34,36,35,36,37,16,38,13,38,16,39,38,39,40,38,40,41,41,40,42,41,42,43,43,42,44,43,44,45,45,44,46,45,46,47,47,46,48,47,48,49,47,49,50,50,49,51,50,51,52,52,51,53,52,53,54,54,53,55,54,55,56,56,55,57,56,57,58,58,57,37,58,37,36,58,36,59,105,3,0,3,105,106,108,109,110,109,108,111,109,111,112,112,111,113,113,111,114,114,111,115,114,115,116,116,115,117,116,117,118,118,117,119,118,119,120,120,119,121,120,121,122,122,121,123,122,123,124,124,123,125,125,123,126,125,126,127,127,126,128,127,128,129,129,128,130,129,130,131,131,130,132,131,132,133,112,134,109,134,112,135,134,135,136,134,136,137,137,136,138,137,138,139,139,138,140,139,140,141,141,140,142,141,142,143,143,142,144,143,144,145,143,145,146,146,145,147,146,147,148,148,147,149,148,149,150,150,149,151,150,151,152,152,151,153,152,153,154,154,153,133,154,133,132,154,132,155,9,200,201,200,9,8,202,203,204,203,202,205,203,206,204,206,203,207,207,208,206,208,207,209,209,210,208,210,209,211,211,212,210,212,211,213,213,214,212,214,213,215,215,216,214,216,215,217,218,216,217,216,218,219,219,220,221,220,219,218,220,222,221,222,220,223,222,224,225,224,222,223,225,226,227,226,225,224,227,228,229,228,227,226,229,106,105,106,229,228,201,230,231,230,201,200,231,232,233,232,231,230,232,234,233,234,232,235,235,236,234,236,235,237,237,238,236,238,237,239,239,202,238,202,239,205,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 432, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
gl.glEnable(GL2.GL_BLEND);
gl.glColor4d(0.3137255, 0.3137255, 0.3137255, 1.0);
int[] indices = {
};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices);
gl.glDrawElements(GL2.GL_LINES, indices.length, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
gl.glEnable(GL2.GL_BLEND);
gl.glColor4d(0.7764706, 0.7764706, 0.7764706, 1.0);
int[] indices = {
6,
4,
7,
5,
4,
10,
5,
11,
60,
61,
61,
62,
62,
63,
63,
64,
64,
65,
65,
66,
66,
67,
67,
68,
68,
69,
69,
70,
70,
71,
71,
72,
72,
73,
73,
74,
74,
6,
10,
75,
75,
76,
76,
77,
77,
78,
78,
79,
79,
80,
80,
60,
81,
82,
83,
81,
84,
83,
85,
84,
86,
85,
87,
86,
88,
87,
89,
88,
90,
89,
91,
90,
92,
91,
93,
92,
94,
93,
95,
94,
96,
95,
97,
96,
98,
97,
99,
98,
100,
99,
101,
100,
102,
101,
103,
102,
104,
103,
82,
104,
107,
7,
156,
157,
158,
156,
159,
158,
160,
159,
161,
160,
162,
161,
163,
162,
11,
163,
164,
107,
165,
164,
166,
165,
167,
166,
168,
167,
169,
168,
170,
169,
171,
170,
172,
171,
173,
172,
174,
173,
175,
174,
157,
175,
176,
177,
177,
178,
178,
179,
179,
180,
180,
181,
181,
182,
182,
183,
183,
184,
184,
185,
185,
186,
186,
187,
187,
188,
188,
189,
189,
190,
190,
191,
191,
192,
192,
193,
193,
194,
194,
195,
195,
196,
196,
197,
197,
198,
198,
199,
199,
176,
};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices);
gl.glDrawElements(GL2.GL_LINES, indices.length, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID52(GL2 gl){
float[] positionsArray = {
3.2552302f,-9.578125f,-0.2268514f,3.1435058f,-15.328125f,-1.0754821f,3.2552302f,-15.328125f,-0.2268514f,3.1435058f,-9.578125f,-1.0754821f,3.2552302f,-15.328125f,-0.2268514f,3.2552302f,-9.578125f,-0.2268514f,3.1435058f,-9.578125f,-1.0754821f,3.1435058f,-15.328125f,-1.0754821f,3.1435058f,-9.578125f,0.6217794f,3.1435058f,-15.328125f,0.6217794f,3.1435058f,-15.328125f,0.6217794f,3.1435058f,-9.578125f,0.6217794f,2.8159466f,-15.328125f,-1.8662801f,2.8159466f,-9.578125f,-1.8662801f,2.8159466f,-9.578125f,-1.8662801f,2.8159466f,-15.328125f,-1.8662801f,2.8159466f,-15.328125f,1.4125774f,2.8159466f,-9.578125f,1.4125774f,2.8159466f,-15.328125f,1.4125774f,2.8159466f,-9.578125f,1.4125774f,2.2948751f,-15.328125f,-2.5453537f,2.2948751f,-9.578125f,-2.5453537f,2.2948751f,-9.578125f,-2.5453537f,2.2948751f,-15.328125f,-2.5453537f,2.2948751f,-9.578125f,2.091651f,2.2948751f,-15.328125f,2.091651f,2.2948751f,-15.328125f,2.091651f,2.2948751f,-9.578125f,2.091651f,1.6158015f,-9.578125f,-3.066425f,1.6158015f,-15.328125f,-3.066425f,1.6158015f,-9.578125f,-3.066425f,1.6158015f,-15.328125f,-3.066425f,1.6158015f,-15.328125f,2.6127224f,1.6158015f,-9.578125f,2.6127224f,1.6158015f,-15.328125f,2.6127224f,1.6158015f,-9.578125f,2.6127224f,0.8250035f,-15.328125f,-3.3939843f,0.8250035f,-9.578125f,-3.3939843f,0.8250035f,-9.578125f,-3.3939843f,0.8250035f,-15.328125f,-3.3939843f,0.8250035f,-9.578125f,2.9402816f,0.8250035f,-15.328125f,2.9402816f,0.8250035f,-15.328125f,2.9402816f,0.8250035f,-9.578125f,2.9402816f,-0.0236273f,-15.328125f,-3.5057087f,-0.0236273f,-9.578125f,-3.5057087f,-0.0236273f,-9.578125f,-3.5057087f,-0.0236273f,-15.328125f,-3.5057087f,-0.0236273f,-9.578125f,3.052006f,-0.0236273f,-15.328125f,3.052006f,-0.0236273f,-15.328125f,3.052006f,-0.0236273f,-9.578125f,3.052006f,-0.872258f,-15.328125f,-3.3939843f,-0.872258f,-9.578125f,-3.3939843f,-0.872258f,-9.578125f,-3.3939843f,-0.872258f,-15.328125f,-3.3939843f,-0.872258f,-9.578125f,2.9402816f,-0.872258f,-15.328125f,2.9402816f,-0.872258f,-15.328125f,2.9402816f,-0.872258f,-9.578125f,2.9402816f,-1.663056f,-9.578125f,-3.066425f,-1.663056f,-15.328125f,-3.066425f,-1.663056f,-9.578125f,-3.066425f,-1.663056f,-15.328125f,-3.066425f,-1.663056f,-15.328125f,2.6127224f,-1.663056f,-9.578125f,2.6127224f,-1.663056f,-15.328125f,2.6127224f,-1.663056f,-9.578125f,2.6127224f,-2.3421297f,-9.578125f,-2.5453537f,-2.3421297f,-15.328125f,-2.5453537f,-2.3421297f,-9.578125f,-2.5453537f,-2.3421297f,-15.328125f,-2.5453537f,-2.3421297f,-9.578125f,2.091651f,-2.3421297f,-15.328125f,2.091651f,-2.3421297f,-15.328125f,2.091651f,-2.3421297f,-9.578125f,2.091651f,-2.8632011f,-9.578125f,-1.8662801f,-2.8632011f,-15.328125f,-1.8662801f,-2.8632011f,-9.578125f,-1.8662801f,-2.8632011f,-15.328125f,-1.8662801f,-2.8632011f,-15.328125f,1.4125774f,-2.8632011f,-9.578125f,1.4125774f,-2.8632011f,-15.328125f,1.4125774f,-2.8632011f,-9.578125f,1.4125774f,-3.1907604f,-9.578125f,-1.0754821f,-3.1907604f,-15.328125f,-1.0754821f,-3.1907604f,-9.578125f,-1.0754821f,-3.1907604f,-15.328125f,-1.0754821f,-3.1907604f,-9.578125f,0.6217794f,-3.1907604f,-15.328125f,0.6217794f,-3.1907604f,-15.328125f,0.6217794f,-3.1907604f,-9.578125f,0.6217794f,-3.3024848f,-9.578125f,-0.2268514f,-3.3024848f,-15.328125f,-0.2268514f,-3.3024848f,-9.578125f,-0.2268514f,-3.3024848f,-15.328125f,-0.2268514f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
//FloatBuffer fbn = null;
//FloatBuffer fbt = null;
//float[] texcoordArray = null;
{
gl.glColor4d(0.7764706, 0.7764706, 0.7764706, 1.0);
int[] indices = {
0,1,2,1,0,3,8,2,9,2,8,0,3,12,1,12,3,13,16,8,9,8,16,17,13,20,12,20,13,21,24,16,25,16,24,17,20,28,29,28,20,21,24,32,33,32,24,25,36,28,37,28,36,29,40,32,41,32,40,33,44,37,45,37,44,36,48,41,49,41,48,40,52,45,53,45,52,44,56,49,57,49,56,48,52,60,61,60,52,53,56,64,65,64,56,57,61,68,69,68,61,60,72,64,73,64,72,65,69,76,77,76,69,68,80,72,73,72,80,81,77,84,85,84,77,76,88,80,89,80,88,81,85,92,93,92,85,84,93,88,89,88,93,92,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 144, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
gl.glEnable(GL2.GL_BLEND);
gl.glColor4d(0.3137255, 0.3137255, 0.3137255, 1.0);
int[] indices = {
};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices);
gl.glDrawElements(GL2.GL_LINES, indices.length, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
gl.glEnable(GL2.GL_BLEND);
gl.glColor4d(0.7764706, 0.7764706, 0.7764706, 1.0);
int[] indices = {
5,
6,
7,
4,
11,
5,
4,
10,
6,
14,
15,
7,
19,
11,
10,
18,
14,
22,
23,
15,
27,
19,
18,
26,
22,
30,
31,
23,
35,
27,
26,
34,
30,
38,
39,
31,
43,
35,
34,
42,
38,
46,
47,
39,
51,
43,
42,
50,
46,
54,
55,
47,
59,
51,
50,
58,
54,
62,
63,
55,
67,
59,
58,
66,
62,
70,
71,
63,
75,
67,
66,
74,
70,
78,
79,
71,
83,
75,
74,
82,
78,
86,
87,
79,
91,
83,
82,
90,
86,
94,
95,
87,
94,
91,
90,
95,
};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices);
gl.glDrawElements(GL2.GL_LINES, indices.length, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID58(GL2 gl){
float[] positionsArray = {
0.8822394f,-9.578125f,-3.6075916f,-0.9294939f,-9.578125f,-3.6075916f,-0.0236273f,-9.578125f,-3.7268515f,-0.0236273f,-9.578125f,-3.5057087f,0.8250035f,-9.578125f,-3.3939843f,1.7263727f,-9.578125f,-3.2579403f,1.6158015f,-9.578125f,-3.066425f,2.4512465f,-9.578125f,-2.701725f,2.2948751f,-9.578125f,-2.5453537f,3.0074615f,-9.578125f,-1.9768513f,2.8159466f,-9.578125f,-1.8662801f,3.3571131f,-9.578125f,-1.132718f,3.1435058f,-9.578125f,-1.0754821f,3.4763727f,-9.578125f,-0.2268514f,3.2552302f,-9.578125f,-0.2268514f,3.1435058f,-9.578125f,0.6217794f,3.3571131f,-9.578125f,0.6790153f,2.8159466f,-9.578125f,1.4125774f,3.0074615f,-9.578125f,1.5231487f,2.2948751f,-9.578125f,2.091651f,2.4512465f,-9.578125f,2.2480223f,1.6158015f,-9.578125f,2.6127224f,1.7263727f,-9.578125f,2.8042376f,0.8250035f,-9.578125f,2.9402816f,0.8822394f,-9.578125f,3.153889f,-0.0236273f,-9.578125f,3.052006f,-0.872258f,-9.578125f,-3.3939843f,-1.7736273f,-9.578125f,-3.2579403f,-1.663056f,-9.578125f,-3.066425f,-2.498501f,-9.578125f,-2.701725f,-2.3421297f,-9.578125f,-2.5453537f,-3.054716f,-9.578125f,-1.9768513f,-2.8632011f,-9.578125f,-1.8662801f,-3.4043677f,-9.578125f,-1.132718f,-3.1907604f,-9.578125f,-1.0754821f,-3.5236273f,-9.578125f,-0.2268514f,-3.3024848f,-9.578125f,-0.2268514f,-3.1907604f,-9.578125f,0.6217794f,-3.4043677f,-9.578125f,0.6790153f,-2.8632011f,-9.578125f,1.4125774f,-3.054716f,-9.578125f,1.5231487f,-2.3421297f,-9.578125f,2.091651f,-2.498501f,-9.578125f,2.2480223f,-1.663056f,-9.578125f,2.6127224f,-1.7736273f,-9.578125f,2.8042376f,-0.872258f,-9.578125f,2.9402816f,-0.9294939f,-9.578125f,3.153889f,-0.0236273f,-9.578125f,3.2731485f,3.0074615f,-9.578125f,-1.9768513f,2.4512465f,-9.578125f,-2.701725f,3.3571131f,-9.578125f,-1.132718f,3.4763727f,-9.578125f,-0.2268514f,3.3571131f,-9.578125f,0.6790153f,3.0074615f,-9.578125f,1.5231487f,2.4512465f,-9.578125f,2.2480223f,1.7263727f,-9.578125f,2.8042376f,0.8822394f,-9.578125f,3.153889f,-0.0236273f,-9.578125f,3.2731485f,-0.9294939f,-9.578125f,3.153889f,-1.7736273f,-9.578125f,2.8042376f,-2.498501f,-9.578125f,2.2480223f,-3.054716f,-9.578125f,1.5231487f,-3.4043677f,-9.578125f,0.6790153f,-3.5236273f,-9.578125f,-0.2268514f,-3.4043677f,-9.578125f,-1.132718f,-3.054716f,-9.578125f,-1.9768513f,-2.498501f,-9.578125f,-2.701725f,-1.7736273f,-9.578125f,-3.2579403f,-0.9294939f,-9.578125f,-3.6075916f,-0.0236273f,-9.578125f,-3.7268515f,0.8822394f,-9.578125f,-3.6075916f,1.7263727f,-9.578125f,-3.2579403f,-3.3024848f,-9.578125f,-0.2268514f,-3.1907604f,-9.578125f,0.6217794f,-2.8632011f,-9.578125f,1.4125774f,-2.3421297f,-9.578125f,2.091651f,-1.663056f,-9.578125f,2.6127224f,-0.872258f,-9.578125f,2.9402816f,-0.0236273f,-9.578125f,3.052006f,0.8250035f,-9.578125f,2.9402816f,1.6158015f,-9.578125f,2.6127224f,2.2948751f,-9.578125f,2.091651f,2.8159466f,-9.578125f,1.4125774f,3.1435058f,-9.578125f,0.6217794f,3.2552302f,-9.578125f,-0.2268514f,3.1435058f,-9.578125f,-1.0754821f,2.8159466f,-9.578125f,-1.8662801f,2.2948751f,-9.578125f,-2.5453537f,1.6158015f,-9.578125f,-3.066425f,0.8250035f,-9.578125f,-3.3939843f,-0.0236273f,-9.578125f,-3.5057087f,-0.872258f,-9.578125f,-3.3939843f,-1.663056f,-9.578125f,-3.066425f,-2.3421297f,-9.578125f,-2.5453537f,-2.8632011f,-9.578125f,-1.8662801f,-3.1907604f,-9.578125f,-1.0754821f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
//FloatBuffer fbn = null;
//FloatBuffer fbt = null;
//float[] texcoordArray = null;
{
gl.glColor4d(0.7764706, 0.7764706, 0.7764706, 1.0);
int[] indices = {
0,1,2,1,0,3,3,0,4,4,0,5,4,5,6,6,5,7,6,7,8,8,7,9,8,9,10,10,9,11,10,11,12,12,11,13,12,13,14,14,13,15,15,13,16,15,16,17,17,16,18,17,18,19,19,18,20,19,20,21,21,20,22,21,22,23,23,22,24,23,24,25,1,26,27,26,1,3,27,26,28,27,28,29,29,28,30,29,30,31,31,30,32,31,32,33,33,32,34,33,34,35,35,34,36,35,36,37,35,37,38,38,37,39,38,39,40,40,39,41,40,41,42,42,41,43,42,43,44,44,43,45,44,45,46,46,45,25,46,25,24,46,24,47,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 144, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
gl.glEnable(GL2.GL_BLEND);
gl.glColor4d(0.7764706, 0.7764706, 0.7764706, 1.0);
int[] indices = {
48,
49,
50,
48,
51,
50,
52,
51,
53,
52,
54,
53,
55,
54,
56,
55,
57,
56,
58,
57,
59,
58,
60,
59,
61,
60,
62,
61,
63,
62,
64,
63,
65,
64,
66,
65,
67,
66,
68,
67,
69,
68,
70,
69,
71,
70,
49,
71,
72,
73,
73,
74,
74,
75,
75,
76,
76,
77,
77,
78,
78,
79,
79,
80,
80,
81,
81,
82,
82,
83,
83,
84,
84,
85,
85,
86,
86,
87,
87,
88,
88,
89,
89,
90,
90,
91,
91,
92,
92,
93,
93,
94,
94,
95,
95,
72,
};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices);
gl.glDrawElements(GL2.GL_LINES, indices.length, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
}
