
package weapons;
import javax.media.opengl.GL2;
import javax.media.opengl.glu.GLU;

import game.Building;
import game.PlayerStats;

import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;

import com.jogamp.opengl.util.GLBuffers;

import java.util.HashMap;
import java.util.Map;
public class Bomb extends Projectile

{
private int displayList = -1;
private Map<String, com.jogamp.opengl.util.texture.Texture> imageMap = new HashMap<String, com.jogamp.opengl.util.texture.Texture>(); // map of ID's to textures
public Bomb(float x, float y, float z, float angle, float y_angle,PlayerStats s){
	super(s);
	setProjX(x);
	setProjY(y);
	setProjZ(z);
	setProjAngle(angle);
    setProjYAngle(y_angle);
}
private int count = 0;
private int angle = 0;
public void draw(GL2 gl, GLU glu) {
  gl.glCallList(displayList);
}
private void generate(GL2 gl, GLU glu){

displayList = gl.glGenLists(1);
gl.glNewList(displayList, GL2.GL_COMPILE);
  gl.glPushAttrib(GL2.GL_POLYGON_BIT);
    gl.glFrontFace(GL2.GL_CCW);
    gl.glCullFace(GL2.GL_BACK);
    gl.glEnable(GL2.GL_CULL_FACE);
gl.glPushMatrix();
gl.glScaled(0.08333333333333333, 0.08333333333333333, 0.08333333333333333);
gl.glRotatef(-90,1,0,0);
ID2(gl);
ID12(gl);
ID20(gl);
ID26(gl);
ID32(gl);
ID38(gl);
ID44(gl);
ID50(gl);
ID56(gl);
ID62(gl);
ID68(gl);
ID74(gl);
ID80(gl);
ID86(gl);
ID92(gl);
ID98(gl);
ID104(gl);
ID110(gl);
ID116(gl);
ID122(gl);
ID128(gl);
ID134(gl);
ID140(gl);
ID146(gl);
       gl.glPopMatrix();
   gl.glPopAttrib();
gl.glEndList();
}
//Trailer


private void ID2(GL2 gl){
float[] positionsArray = {
-114.465f,-107.9166f,7.499687f,-112.5227f,-107.9166f,7.243975f,-114.465f,-108.6637f,-0.004890828f,-114.465f,-108.6637f,-0.004890828f,-112.5227f,-107.9166f,7.243975f,-114.465f,-107.9166f,7.499687f,-114.465f,-107.9166f,7.499687f,-111.0868f,-106.634f,12.6028f,-112.5227f,-107.9166f,7.243975f,-114.465f,-106.634f,13.04755f,-110.4328f,-106.0499f,15.04335f,-114.465f,-106.0499f,15.57419f,-114.465f,-106.0499f,15.57419f,-114.465f,-106.634f,13.04755f,-110.4328f,-106.0499f,15.04335f,-111.0868f,-106.634f,12.6028f,-114.465f,-107.9166f,7.499687f,-112.5227f,-107.9166f,7.243975f,-110.7127f,-107.9166f,6.494264f,-110.7127f,-107.9166f,6.494264f,-116.4073f,-107.9166f,7.243975f,-116.4073f,-107.9166f,7.243975f,-117.8432f,-106.634f,12.6028f,-116.4073f,-107.9166f,7.243975f,-118.4972f,-106.0499f,15.04335f,-118.4972f,-106.0499f,15.04335f,-117.8432f,-106.634f,12.6028f,-116.4073f,-107.9166f,7.243975f,-108.4218f,-103.168f,22.54886f,-114.465f,-103.168f,23.34447f,-114.465f,-103.168f,23.34447f,-108.4218f,-103.168f,22.54886f,-107.9388f,-106.634f,11.29885f,-110.7127f,-107.9166f,6.494264f,-106.6755f,-106.0499f,13.48699f,-106.6755f,-106.0499f,13.48699f,-107.9388f,-106.634f,11.29885f,-110.7127f,-107.9166f,6.494264f,-109.1585f,-107.9166f,5.301647f,-109.1585f,-107.9166f,5.301647f,-118.2173f,-107.9166f,6.494264f,-118.2173f,-107.9166f,6.494264f,-120.9912f,-106.634f,11.29885f,-118.2173f,-107.9166f,6.494264f,-122.2546f,-106.0499f,13.48699f,-122.2546f,-106.0499f,13.48699f,-120.9912f,-106.634f,11.29885f,-118.2173f,-107.9166f,6.494264f,-120.5083f,-103.168f,22.54886f,-120.5083f,-103.168f,22.54886f,-102.7903f,-103.168f,20.21625f,-102.7903f,-103.168f,20.21625f,-105.2355f,-106.634f,9.224576f,-109.1585f,-107.9166f,5.301647f,-103.4489f,-106.0499f,11.01119f,-103.4489f,-106.0499f,11.01119f,-105.2355f,-106.634f,9.224576f,-109.1585f,-107.9166f,5.301647f,-107.9659f,-107.9166f,3.747398f,-107.9659f,-107.9166f,3.747398f,-119.7715f,-107.9166f,5.301647f,-119.7715f,-107.9166f,5.301647f,-123.6945f,-106.634f,9.224576f,-119.7715f,-107.9166f,5.301647f,-125.4811f,-106.0499f,11.01119f,-125.4811f,-106.0499f,11.01119f,-123.6945f,-106.634f,9.224576f,-119.7715f,-107.9166f,5.301647f,-126.1397f,-103.168f,20.21625f,-126.1397f,-103.168f,20.21625f,-97.95452f,-103.168f,16.5056f,-97.95452f,-103.168f,16.5056f,-103.1613f,-106.634f,6.521328f,-107.9659f,-107.9166f,3.747398f,-100.9731f,-106.0499f,7.784651f,-100.9731f,-106.0499f,7.784651f,-103.1613f,-106.634f,6.521328f,-107.9659f,-107.9166f,3.747398f,-107.2161f,-107.9166f,1.937437f,-107.2161f,-107.9166f,1.937437f,-120.9642f,-107.9166f,3.747398f,-120.9642f,-107.9166f,3.747398f,-125.7688f,-106.634f,6.521328f,-120.9642f,-107.9166f,3.747398f,-127.9569f,-106.0499f,7.784651f,-127.9569f,-106.0499f,7.784651f,-125.7688f,-106.634f,6.521328f,-120.9642f,-107.9166f,3.747398f,-130.9755f,-103.168f,16.5056f,-130.9755f,-103.168f,16.5056f,-94.24387f,-103.168f,11.66979f,-94.24387f,-103.168f,11.66979f,-101.8573f,-106.634f,3.373329f,-107.2161f,-107.9166f,1.937437f,-99.41677f,-106.0499f,4.027273f,-99.41677f,-106.0499f,4.027273f,-101.8573f,-106.634f,3.373329f,-107.2161f,-107.9166f,1.937437f,-106.9604f,-107.9166f,-0.004890828f,-106.9604f,-107.9166f,-0.004890828f,-121.7139f,-107.9166f,1.937437f,-121.7139f,-107.9166f,1.937437f,-127.0727f,-106.634f,3.373329f,-121.7139f,-107.9166f,1.937437f,-129.5133f,-106.0499f,4.027273f,-129.5133f,-106.0499f,4.027273f,-127.0727f,-106.634f,3.373329f,-121.7139f,-107.9166f,1.937437f,-134.6861f,-103.168f,11.66979f,-134.6861f,-103.168f,11.66979f,-91.91126f,-103.168f,6.038368f,-91.91126f,-103.168f,6.038368f,-106.9604f,-107.9166f,-0.004890828f,-98.88593f,-106.0499f,-0.004890828f,-101.4126f,-106.634f,-0.004890828f,-106.9604f,-107.9166f,-0.004890828f,-98.88593f,-106.0499f,-0.004890828f,-101.4126f,-106.634f,-0.004890828f,-107.2161f,-107.9166f,-1.947218f,-107.2161f,-107.9166f,-1.947218f,-121.9696f,-107.9166f,-0.004890828f,-121.9696f,-107.9166f,-0.004890828f,-127.5174f,-106.634f,-0.004890828f,-121.9696f,-107.9166f,-0.004890828f,-130.0441f,-106.0499f,-0.004890828f,-130.0441f,-106.0499f,-0.004890828f,-127.5174f,-106.634f,-0.004890828f,-121.9696f,-107.9166f,-0.004890828f,-137.0188f,-103.168f,6.038368f,-137.0188f,-103.168f,6.038368f,-91.11565f,-103.168f,-0.004890828f,-91.11565f,-103.168f,-0.004890828f,-107.2161f,-107.9166f,-1.947218f,-101.8573f,-106.634f,-3.38311f,-99.41677f,-106.0499f,-4.037055f,-107.2161f,-107.9166f,-1.947218f,-101.8573f,-106.634f,-3.38311f,-99.41677f,-106.0499f,-4.037055f,-107.9659f,-107.9166f,-3.75718f,-107.9659f,-107.9166f,-3.75718f,-121.7139f,-107.9166f,-1.947218f,-121.7139f,-107.9166f,-1.947218f,-127.0727f,-106.634f,-3.38311f,-129.5133f,-106.0499f,-4.037055f,-121.7139f,-107.9166f,-1.947218f,-121.7139f,-107.9166f,-1.947218f,-127.0727f,-106.634f,-3.38311f,-129.5133f,-106.0499f,-4.037055f,-137.8144f,-103.168f,-0.004890828f,-137.8144f,-103.168f,-0.004890828f,-91.91126f,-103.168f,-6.04815f,-91.91126f,-103.168f,-6.04815f,-103.1613f,-106.634f,-6.531109f,-100.9731f,-106.0499f,-7.794433f,-107.9659f,-107.9166f,-3.75718f,-107.9659f,-107.9166f,-3.75718f,-103.1613f,-106.634f,-6.531109f,-100.9731f,-106.0499f,-7.794433f,-109.1585f,-107.9166f,-5.311429f,-109.1585f,-107.9166f,-5.311429f,-120.9642f,-107.9166f,-3.75718f,-120.9642f,-107.9166f,-3.75718f,-125.7688f,-106.634f,-6.531109f,-127.9569f,-106.0499f,-7.794433f,-120.9642f,-107.9166f,-3.75718f,-120.9642f,-107.9166f,-3.75718f,-125.7688f,-106.634f,-6.531109f,-127.9569f,-106.0499f,-7.794433f,-137.0188f,-103.168f,-6.04815f,-137.0188f,-103.168f,-6.04815f,-94.24387f,-103.168f,-11.67957f,-94.24387f,-103.168f,-11.67957f,-105.2355f,-106.634f,-9.234358f,-103.4489f,-106.0499f,-11.02097f,-109.1585f,-107.9166f,-5.311429f,-109.1585f,-107.9166f,-5.311429f,-105.2355f,-106.634f,-9.234358f,-103.4489f,-106.0499f,-11.02097f,-110.7127f,-107.9166f,-6.504046f,-110.7127f,-107.9166f,-6.504046f,-119.7715f,-107.9166f,-5.311429f,-119.7715f,-107.9166f,-5.311429f,-123.6945f,-106.634f,-9.234358f,-125.4811f,-106.0499f,-11.02097f,-119.7715f,-107.9166f,-5.311429f,-119.7715f,-107.9166f,-5.311429f,-123.6945f,-106.634f,-9.234358f,-125.4811f,-106.0499f,-11.02097f,-134.6861f,-103.168f,-11.67957f,-134.6861f,-103.168f,-11.67957f,-97.95452f,-103.168f,-16.51538f,-97.95452f,-103.168f,-16.51538f,-107.9388f,-106.634f,-11.30863f,-106.6755f,-106.0499f,-13.49677f,-110.7127f,-107.9166f,-6.504046f,-110.7127f,-107.9166f,-6.504046f,-107.9388f,-106.634f,-11.30863f,-106.6755f,-106.0499f,-13.49677f,-112.5227f,-107.9166f,-7.253756f,-112.5227f,-107.9166f,-7.253756f,-118.2173f,-107.9166f,-6.504046f,-118.2173f,-107.9166f,-6.504046f,-120.9912f,-106.634f,-11.30863f,-122.2546f,-106.0499f,-13.49677f,-118.2173f,-107.9166f,-6.504046f,-118.2173f,-107.9166f,-6.504046f,-120.9912f,-106.634f,-11.30863f,-122.2546f,-106.0499f,-13.49677f,-130.9755f,-103.168f,-16.51538f,-130.9755f,-103.168f,-16.51538f,-102.7903f,-103.168f,-20.22603f,-102.7903f,-103.168f,-20.22603f,-111.0868f,-106.634f,-12.61258f,-110.4328f,-106.0499f,-15.05313f,-112.5227f,-107.9166f,-7.253756f,-112.5227f,-107.9166f,-7.253756f,-111.0868f,-106.634f,-12.61258f,-110.4328f,-106.0499f,-15.05313f,-114.465f,-107.9166f,-7.509469f,-114.465f,-107.9166f,-7.509469f,-116.4073f,-107.9166f,-7.253756f,-116.4073f,-107.9166f,-7.253756f,-117.8432f,-106.634f,-12.61258f,-118.4972f,-106.0499f,-15.05313f,-116.4073f,-107.9166f,-7.253756f,-116.4073f,-107.9166f,-7.253756f,-117.8432f,-106.634f,-12.61258f,-118.4972f,-106.0499f,-15.05313f,-126.1397f,-103.168f,-20.22603f,-126.1397f,-103.168f,-20.22603f,-108.4218f,-103.168f,-22.55864f,-108.4218f,-103.168f,-22.55864f,-114.465f,-106.634f,-13.05733f,-114.465f,-106.0499f,-15.58398f,-114.465f,-107.9166f,-7.509469f,-114.465f,-107.9166f,-7.509469f,-114.465f,-106.634f,-13.05733f,-114.465f,-106.0499f,-15.58398f,-120.5083f,-103.168f,-22.55864f,-120.5083f,-103.168f,-22.55864f,-114.465f,-103.168f,-23.35425f,-114.465f,-103.168f,-23.35425f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,6,7,8,7,6,9,7,9,10,10,9,11,1,18,2,0,2,20,22,6,23,6,22,9,9,22,24,9,24,11,11,28,10,28,11,29,8,32,33,32,8,7,32,7,34,34,7,10,18,38,2,20,2,40,42,23,43,23,42,22,22,42,44,22,44,24,48,11,24,11,48,29,10,50,34,50,10,28,33,52,53,52,33,32,52,32,54,54,32,34,38,58,2,40,2,60,62,43,63,43,62,42,42,62,64,42,64,44,68,24,44,24,68,48,34,70,54,70,34,50,53,72,73,72,53,52,72,52,74,74,52,54,58,78,2,60,2,80,82,63,83,63,82,62,62,82,84,62,84,64,88,44,64,44,88,68,54,90,74,90,54,70,73,92,93,92,73,94,94,73,72,94,72,74,78,98,2,80,2,100,102,83,103,83,102,104,83,104,82,82,104,84,108,64,84,64,108,88,74,110,94,110,74,90,112,113,114,113,112,94,94,112,92,92,112,93,2,98,118,100,2,120,122,103,123,103,122,124,103,124,104,103,104,102,128,84,104,84,128,108,113,110,130,110,113,94,112,114,132,133,113,134,113,133,132,113,132,114,2,118,138,2,140,120,124,142,143,142,124,144,144,124,122,144,122,123,128,124,148,124,128,104,134,130,150,130,134,113,152,134,153,134,152,154,134,154,133,133,154,132,2,138,158,2,160,140,143,162,163,162,143,164,164,143,142,164,142,144,148,143,168,143,148,124,153,150,170,150,153,134,172,153,173,153,172,174,153,174,152,152,174,154,2,158,178,2,180,160,163,182,183,182,163,184,184,163,162,184,162,164,168,163,188,163,168,143,173,170,190,170,173,153,192,173,193,173,192,194,173,194,172,172,194,174,2,178,198,2,200,180,183,202,203,202,183,204,204,183,182,204,182,184,188,183,208,183,188,163,193,190,210,190,193,173,212,193,213,193,212,192,192,212,214,192,214,194,2,198,218,2,220,200,203,222,223,222,203,202,222,202,224,224,202,204,208,203,228,203,208,183,213,210,230,210,213,193,232,213,233,213,232,212,212,232,234,212,234,214,2,218,220,223,232,233,232,223,222,232,222,234,234,222,224,228,223,238,223,228,203,233,230,240,230,233,213,238,233,240,233,238,223,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 504, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glColor4d(0.8, 0.8, 0.1568627, 1.0);
int[] indices = {
3,4,5,12,13,14,14,13,15,13,16,15,17,15,16,3,19,4,21,3,5,12,25,13,25,26,13,13,26,16,27,16,26,30,12,31,14,31,12,14,15,35,35,15,36,15,17,36,37,36,17,3,39,19,41,3,21,25,45,26,45,46,26,26,46,27,47,27,46,30,49,12,25,12,49,31,14,51,35,51,14,35,36,55,55,36,56,36,37,56,57,56,37,3,59,39,61,3,41,45,65,46,65,66,46,46,66,47,67,47,66,49,69,25,45,25,69,51,35,71,55,71,35,55,56,75,75,56,76,56,57,76,77,76,57,3,79,59,81,3,61,65,85,66,85,86,66,66,86,67,87,67,86,69,89,45,65,45,89,71,55,91,75,91,55,75,76,95,76,77,95,95,77,96,97,96,77,3,99,79,101,3,81,85,105,86,86,105,87,105,106,87,107,87,106,89,109,65,85,65,109,91,75,111,95,111,75,97,115,96,96,115,95,95,115,116,117,116,115,119,99,3,121,3,101,106,105,107,105,125,107,125,126,107,127,107,126,109,129,85,105,85,129,95,116,111,131,111,116,117,135,116,135,136,116,137,116,136,135,117,115,139,119,3,121,141,3,127,126,145,126,125,145,145,125,146,147,146,125,105,129,125,149,125,129,116,137,131,151,131,137,135,155,136,136,155,137,155,156,137,157,137,156,159,139,3,141,161,3,145,146,165,146,147,165,165,147,166,167,166,147,125,149,147,169,147,149,137,157,151,171,151,157,155,175,156,156,175,157,175,176,157,177,157,176,179,159,3,161,181,3,165,166,185,166,167,185,185,167,186,187,186,167,147,169,167,189,167,169,157,177,171,191,171,177,175,195,176,176,195,177,195,196,177,197,177,196,199,179,3,181,201,3,185,186,205,186,187,205,205,187,206,207,206,187,167,189,187,209,187,189,177,197,191,211,191,197,195,215,196,215,216,196,196,216,197,217,197,216,219,199,3,201,221,3,205,206,225,225,206,226,206,207,226,227,226,207,187,209,207,229,207,209,197,217,211,231,211,217,215,235,216,235,236,216,216,236,217,237,217,236,221,219,3,225,226,235,235,226,236,226,227,236,237,236,227,207,229,227,239,227,229,217,237,231,241,231,237,227,239,237,241,237,239,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 504, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID12(GL2 gl){
float[] positionsArray = {
-114.465f,-99.31818f,30.68345f,-104.7655f,-94.56323f,36.19417f,-106.5223f,-99.31818f,29.63777f,-114.465f,-94.56323f,37.47114f,-114.465f,-94.56323f,37.47114f,-114.465f,-99.31818f,30.68345f,-104.7655f,-94.56323f,36.19417f,-106.5223f,-99.31818f,29.63777f,-124.1645f,-94.56323f,36.19417f,-122.4077f,-99.31818f,29.63777f,-124.1645f,-94.56323f,36.19417f,-122.4077f,-99.31818f,29.63777f,-103.1801f,-88.98097f,42.11085f,-114.465f,-88.98097f,43.59653f,-114.465f,-88.98097f,43.59653f,-103.1801f,-88.98097f,42.11085f,-95.727f,-94.56323f,32.4503f,-99.12084f,-99.31818f,26.57199f,-95.727f,-94.56323f,32.4503f,-99.12084f,-99.31818f,26.57199f,-114.465f,-103.168f,23.34447f,-108.4218f,-103.168f,22.54886f,-114.465f,-103.168f,23.34447f,-108.4218f,-103.168f,22.54886f,-133.203f,-94.56323f,32.4503f,-129.8092f,-99.31818f,26.57199f,-133.203f,-94.56323f,32.4503f,-129.8092f,-99.31818f,26.57199f,-125.7499f,-88.98097f,42.11085f,-125.7499f,-88.98097f,42.11085f,-120.5083f,-103.168f,22.54886f,-120.5083f,-103.168f,22.54886f,-101.7921f,-82.66266f,47.29105f,-114.465f,-82.66266f,48.95947f,-101.7921f,-82.66266f,47.29105f,-114.465f,-82.66266f,48.95947f,-92.6643f,-88.98097f,37.75505f,-92.6643f,-88.98097f,37.75505f,-87.96546f,-94.56323f,26.49466f,-92.76508f,-99.31818f,21.69504f,-87.96546f,-94.56323f,26.49466f,-92.76508f,-99.31818f,21.69504f,-102.7903f,-103.168f,20.21625f,-102.7903f,-103.168f,20.21625f,-140.9646f,-94.56323f,26.49466f,-136.1649f,-99.31818f,21.69504f,-140.9646f,-94.56323f,26.49466f,-136.1649f,-99.31818f,21.69504f,-136.2657f,-88.98097f,37.75505f,-136.2657f,-88.98097f,37.75505f,-126.1397f,-103.168f,20.21625f,-126.1397f,-103.168f,20.21625f,-127.1379f,-82.66266f,47.29105f,-127.1379f,-82.66266f,47.29105f,-100.6241f,-75.71162f,51.65007f,-114.465f,-75.71162f,53.47226f,-100.6241f,-75.71162f,51.65007f,-114.465f,-75.71162f,53.47226f,-89.98283f,-82.66266f,42.39949f,-89.98283f,-82.66266f,42.39949f,-83.63415f,-88.98097f,30.82597f,-83.63415f,-88.98097f,30.82597f,-82.00982f,-94.56323f,18.73312f,-87.88813f,-99.31818f,15.33928f,-82.00982f,-94.56323f,18.73312f,-87.88813f,-99.31818f,15.33928f,-97.95452f,-103.168f,16.5056f,-97.95452f,-103.168f,16.5056f,-146.9202f,-94.56323f,18.73312f,-141.0419f,-99.31818f,15.33928f,-146.9202f,-94.56323f,18.73312f,-141.0419f,-99.31818f,15.33928f,-145.2959f,-88.98097f,30.82597f,-145.2959f,-88.98097f,30.82597f,-130.9755f,-103.168f,16.5056f,-130.9755f,-103.168f,16.5056f,-138.9472f,-82.66266f,42.39949f,-138.9472f,-82.66266f,42.39949f,-128.3059f,-75.71162f,51.65007f,-128.3059f,-75.71162f,51.65007f,-99.69524f,-68.24152f,55.11663f,-114.465f,-68.24152f,57.06111f,-99.69524f,-68.24152f,55.11663f,-114.465f,-68.24152f,57.06111f,-87.72643f,-75.71162f,46.30768f,-87.72643f,-75.71162f,46.30768f,-79.84198f,-82.66266f,34.61814f,-79.84198f,-82.66266f,34.61814f,-76.70507f,-88.98097f,21.79582f,-76.70507f,-88.98097f,21.79582f,-78.26595f,-94.56323f,9.694619f,-84.82235f,-99.31818f,7.937837f,-78.26595f,-94.56323f,9.694619f,-84.82235f,-99.31818f,7.937837f,-94.24387f,-103.168f,11.66979f,-94.24387f,-103.168f,11.66979f,-150.6641f,-94.56323f,9.694619f,-144.1077f,-99.31818f,7.937837f,-150.6641f,-94.56323f,9.694619f,-144.1077f,-99.31818f,7.937837f,-152.225f,-88.98097f,21.79582f,-152.225f,-88.98097f,21.79582f,-134.6861f,-103.168f,11.66979f,-134.6861f,-103.168f,11.66979f,-149.088f,-82.66266f,34.61814f,-149.088f,-82.66266f,34.61814f,-141.2036f,-75.71162f,46.30768f,-141.2036f,-75.71162f,46.30768f,-129.2348f,-68.24152f,55.11663f,-129.2348f,-68.24152f,55.11663f,-99.0207f,-60.37452f,57.63405f,-114.465f,-60.37452f,59.66733f,-99.0207f,-60.37452f,57.63405f,-114.465f,-60.37452f,59.66733f,-85.93201f,-68.24152f,49.41572f,-85.93201f,-68.24152f,49.41572f,-76.65095f,-75.71162f,37.80917f,-76.65095f,-75.71162f,37.80917f,-72.06063f,-82.66266f,24.47729f,-72.06063f,-82.66266f,24.47729f,-72.34927f,-88.98097f,11.27999f,-72.34927f,-88.98097f,11.27999f,-76.98898f,-94.56323f,-0.004890828f,-83.77667f,-99.31818f,-0.004890828f,-76.98898f,-94.56323f,-0.004890828f,-83.77667f,-99.31818f,-0.004890828f,-91.91126f,-103.168f,6.038368f,-91.91126f,-103.168f,6.038368f,-151.941f,-94.56323f,-0.004890828f,-145.1534f,-99.31818f,-0.004890828f,-151.941f,-94.56323f,-0.004890828f,-145.1534f,-99.31818f,-0.004890828f,-156.5808f,-88.98097f,11.27999f,-156.5808f,-88.98097f,11.27999f,-137.0188f,-103.168f,6.038368f,-137.0188f,-103.168f,6.038368f,-156.8694f,-82.66266f,24.47729f,-156.8694f,-82.66266f,24.47729f,-152.2791f,-75.71162f,37.80917f,-152.2791f,-75.71162f,37.80917f,-142.998f,-68.24152f,49.41572f,-142.998f,-68.24152f,49.41572f,-129.9093f,-60.37452f,57.63405f,-129.9093f,-60.37452f,57.63405f,-98.61152f,-52.23924f,59.16116f,-114.465f,-52.23924f,61.24831f,-98.61152f,-52.23924f,59.16116f,-114.465f,-52.23924f,61.24831f,-84.6289f,-60.37452f,51.67277f,-84.6289f,-60.37452f,51.67277f,-74.11325f,-68.24152f,40.34687f,-74.11325f,-68.24152f,40.34687f,-68.15244f,-75.71162f,26.73369f,-68.15244f,-75.71162f,26.73369f,-67.16907f,-82.66266f,12.66802f,-67.16907f,-82.66266f,12.66802f,-70.86359f,-88.98097f,-0.004890828f,-70.86359f,-88.98097f,-0.004890828f,-84.82235f,-99.31818f,-7.947619f,-78.26595f,-94.56323f,-9.704401f,-84.82235f,-99.31818f,-7.947619f,-78.26595f,-94.56323f,-9.704401f,-91.11565f,-103.168f,-0.004890828f,-91.11565f,-103.168f,-0.004890828f,-144.1077f,-99.31818f,-7.947619f,-150.6641f,-94.56323f,-9.704401f,-144.1077f,-99.31818f,-7.947619f,-150.6641f,-94.56323f,-9.704401f,-158.0664f,-88.98097f,-0.004890828f,-158.0664f,-88.98097f,-0.004890828f,-137.8144f,-103.168f,-0.004890828f,-137.8144f,-103.168f,-0.004890828f,-161.761f,-82.66266f,12.66802f,-161.761f,-82.66266f,12.66802f,-160.7776f,-75.71162f,26.73369f,-160.7776f,-75.71162f,26.73369f,-154.8168f,-68.24152f,40.34687f,-154.8168f,-68.24152f,40.34687f,-144.3011f,-60.37452f,51.67277f,-144.3011f,-60.37452f,51.67277f,-130.3185f,-52.23924f,59.16116f,-130.3185f,-52.23924f,59.16116f,-98.47437f,-43.96873f,59.67298f,-114.465f,-43.96873f,61.77819f,-98.47437f,-43.96873f,59.67298f,-114.465f,-43.96873f,61.77819f,-83.83841f,-52.23924f,53.04194f,-83.83841f,-52.23924f,53.04194f,-72.27038f,-60.37452f,42.18974f,-72.27038f,-60.37452f,42.18974f,-65.0444f,-68.24152f,28.52811f,-65.0444f,-68.24152f,28.52811f,-62.81005f,-75.71162f,13.83601f,-62.81005f,-75.71162f,13.83601f,-65.50065f,-82.66266f,-0.004890828f,-65.50065f,-82.66266f,-0.004890828f,-72.34927f,-88.98097f,-11.28977f,-72.34927f,-88.98097f,-11.28977f,-87.88813f,-99.31818f,-15.34906f,-82.00982f,-94.56323f,-18.7429f,-87.88813f,-99.31818f,-15.34906f,-82.00982f,-94.56323f,-18.7429f,-91.91126f,-103.168f,-6.04815f,-91.91126f,-103.168f,-6.04815f,-141.0419f,-99.31818f,-15.34906f,-146.9202f,-94.56323f,-18.7429f,-141.0419f,-99.31818f,-15.34906f,-146.9202f,-94.56323f,-18.7429f,-156.5808f,-88.98097f,-11.28977f,-156.5808f,-88.98097f,-11.28977f,-137.0188f,-103.168f,-6.04815f,-137.0188f,-103.168f,-6.04815f,-163.4294f,-82.66266f,-0.004890828f,-163.4294f,-82.66266f,-0.004890828f,-166.12f,-75.71162f,13.83601f,-166.12f,-75.71162f,13.83601f,-163.8856f,-68.24152f,28.52811f,-163.8856f,-68.24152f,28.52811f,-156.6596f,-60.37452f,42.18974f,-156.6596f,-60.37452f,42.18974f,-145.0916f,-52.23924f,53.04194f,-145.0916f,-52.23924f,53.04194f,-130.4556f,-43.96873f,59.67298f,-130.4556f,-43.96873f,59.67298f,-83.57347f,-43.96873f,53.50083f,-83.57347f,-43.96873f,53.50083f,-71.15246f,-52.23924f,43.30766f,-71.15246f,-52.23924f,43.30766f,-62.78735f,-60.37452f,29.83122f,-62.78735f,-60.37452f,29.83122f,-59.34349f,-68.24152f,14.76488f,-59.34349f,-68.24152f,14.76488f,-60.98786f,-75.71162f,-0.004890828f,-60.98786f,-75.71162f,-0.004890828f,-67.16907f,-82.66266f,-12.6778f,-67.16907f,-82.66266f,-12.6778f,-76.70507f,-88.98097f,-21.8056f,-76.70507f,-88.98097f,-21.8056f,-92.76508f,-99.31818f,-21.70483f,-87.96546f,-94.56323f,-26.50444f,-92.76508f,-99.31818f,-21.70483f,-87.96546f,-94.56323f,-26.50444f,-94.24387f,-103.168f,-11.67957f,-94.24387f,-103.168f,-11.67957f,-136.1649f,-99.31818f,-21.70483f,-140.9646f,-94.56323f,-26.50444f,-136.1649f,-99.31818f,-21.70483f,-140.9646f,-94.56323f,-26.50444f,-152.225f,-88.98097f,-21.8056f,-152.225f,-88.98097f,-21.8056f,-134.6861f,-103.168f,-11.67957f,-134.6861f,-103.168f,-11.67957f,-161.761f,-82.66266f,-12.6778f,-161.761f,-82.66266f,-12.6778f,-167.9422f,-75.71162f,-0.004890828f,-167.9422f,-75.71162f,-0.004890828f,-169.5865f,-68.24152f,14.76488f,-169.5865f,-68.24152f,14.76488f,-166.1427f,-60.37452f,29.83122f,-166.1427f,-60.37452f,29.83122f,-157.7776f,-52.23924f,43.30766f,-157.7776f,-52.23924f,43.30766f,-145.3566f,-43.96873f,53.50083f,-145.3566f,-43.96873f,53.50083f,-70.77778f,-43.96873f,43.68234f,-70.77778f,-43.96873f,43.68234f,-61.41818f,-52.23924f,30.62171f,-61.41818f,-52.23924f,30.62171f,-56.82607f,-60.37452f,15.43942f,-56.82607f,-60.37452f,15.43942f,-57.39901f,-68.24152f,-0.004890828f,-57.39901f,-68.24152f,-0.004890828f,-62.81005f,-75.71162f,-13.8458f,-62.81005f,-75.71162f,-13.8458f,-72.06063f,-82.66266f,-24.48707f,-72.06063f,-82.66266f,-24.48707f,-83.63415f,-88.98097f,-30.83575f,-83.63415f,-88.98097f,-30.83575f,-99.12084f,-99.31818f,-26.58178f,-95.727f,-94.56323f,-32.46008f,-99.12084f,-99.31818f,-26.58178f,-95.727f,-94.56323f,-32.46008f,-97.95452f,-103.168f,-16.51538f,-97.95452f,-103.168f,-16.51538f,-129.8092f,-99.31818f,-26.58178f,-133.203f,-94.56323f,-32.46008f,-129.8092f,-99.31818f,-26.58178f,-133.203f,-94.56323f,-32.46008f,-145.2959f,-88.98097f,-30.83575f,-145.2959f,-88.98097f,-30.83575f,-130.9755f,-103.168f,-16.51538f,-130.9755f,-103.168f,-16.51538f,-156.8694f,-82.66266f,-24.48707f,-156.8694f,-82.66266f,-24.48707f,-166.12f,-75.71162f,-13.8458f,-166.12f,-75.71162f,-13.8458f,-171.531f,-68.24152f,-0.004890828f,-171.531f,-68.24152f,-0.004890828f,-172.104f,-60.37452f,15.43942f,-172.104f,-60.37452f,15.43942f,-167.5118f,-52.23924f,30.62171f,-167.5118f,-52.23924f,30.62171f,-158.1522f,-43.96873f,43.68234f,-158.1522f,-43.96873f,43.68234f,-60.95929f,-43.96873f,30.88665f,-60.95929f,-43.96873f,30.88665f,-55.29896f,-52.23924f,15.8486f,-55.29896f,-52.23924f,15.8486f,-54.79279f,-60.37452f,-0.004890828f,-54.79279f,-60.37452f,-0.004890828f,-59.34349f,-68.24152f,-14.77466f,-59.34349f,-68.24152f,-14.77466f,-68.15244f,-75.71162f,-26.74347f,-68.15244f,-75.71162f,-26.74347f,-79.84198f,-82.66266f,-34.62792f,-79.84198f,-82.66266f,-34.62792f,-92.6643f,-88.98097f,-37.76483f,-92.6643f,-88.98097f,-37.76483f,-106.5223f,-99.31818f,-29.64755f,-104.7655f,-94.56323f,-36.20395f,-106.5223f,-99.31818f,-29.64755f,-104.7655f,-94.56323f,-36.20395f,-102.7903f,-103.168f,-20.22603f,-102.7903f,-103.168f,-20.22603f,-122.4077f,-99.31818f,-29.64755f,-124.1645f,-94.56323f,-36.20395f,-122.4077f,-99.31818f,-29.64755f,-124.1645f,-94.56323f,-36.20395f,-136.2657f,-88.98097f,-37.76483f,-136.2657f,-88.98097f,-37.76483f,-126.1397f,-103.168f,-20.22603f,-126.1397f,-103.168f,-20.22603f,-149.088f,-82.66266f,-34.62792f,-149.088f,-82.66266f,-34.62792f,-160.7776f,-75.71162f,-26.74347f,-160.7776f,-75.71162f,-26.74347f,-169.5865f,-68.24152f,-14.77466f,-169.5865f,-68.24152f,-14.77466f,-174.1372f,-60.37452f,-0.004890828f,-174.1372f,-60.37452f,-0.004890828f,-173.6311f,-52.23924f,15.8486f,-173.6311f,-52.23924f,15.8486f,-167.9707f,-43.96873f,30.88665f,-167.9707f,-43.96873f,30.88665f,-54.78714f,-43.96873f,15.98575f,-54.78714f,-43.96873f,15.98575f,-53.21181f,-52.23924f,-0.004890828f,-53.21181f,-52.23924f,-0.004890828f,-56.82607f,-60.37452f,-15.4492f,-56.82607f,-60.37452f,-15.4492f,-65.0444f,-68.24152f,-28.53789f,-65.0444f,-68.24152f,-28.53789f,-76.65095f,-75.71162f,-37.81895f,-76.65095f,-75.71162f,-37.81895f,-89.98283f,-82.66266f,-42.40927f,-89.98283f,-82.66266f,-42.40927f,-103.1801f,-88.98097f,-42.12063f,-103.1801f,-88.98097f,-42.12063f,-114.465f,-99.31818f,-30.69323f,-114.465f,-94.56323f,-37.48092f,-114.465f,-99.31818f,-30.69323f,-114.465f,-94.56323f,-37.48092f,-108.4218f,-103.168f,-22.55864f,-108.4218f,-103.168f,-22.55864f,-125.7499f,-88.98097f,-42.12063f,-125.7499f,-88.98097f,-42.12063f,-120.5083f,-103.168f,-22.55864f,-120.5083f,-103.168f,-22.55864f,-138.9472f,-82.66266f,-42.40927f,-138.9472f,-82.66266f,-42.40927f,-152.2791f,-75.71162f,-37.81895f,-152.2791f,-75.71162f,-37.81895f,-163.8856f,-68.24152f,-28.53789f,-163.8856f,-68.24152f,-28.53789f,-172.104f,-60.37452f,-15.4492f,-172.104f,-60.37452f,-15.4492f,-175.7182f,-52.23924f,-0.004890828f,-175.7182f,-52.23924f,-0.004890828f,-174.1429f,-43.96873f,15.98575f,-174.1429f,-43.96873f,15.98575f,-52.68193f,-43.96873f,-0.004890828f,-52.68193f,-43.96873f,-0.004890828f,-55.29896f,-52.23924f,-15.85839f,-55.29896f,-52.23924f,-15.85839f,-62.78735f,-60.37452f,-29.841f,-62.78735f,-60.37452f,-29.841f,-74.11325f,-68.24152f,-40.35665f,-74.11325f,-68.24152f,-40.35665f,-87.72643f,-75.71162f,-46.31746f,-87.72643f,-75.71162f,-46.31746f,-101.7921f,-82.66266f,-47.30083f,-101.7921f,-82.66266f,-47.30083f,-114.465f,-88.98097f,-43.60631f,-114.465f,-88.98097f,-43.60631f,-114.465f,-103.168f,-23.35425f,-114.465f,-103.168f,-23.35425f,-127.1379f,-82.66266f,-47.30083f,-127.1379f,-82.66266f,-47.30083f,-141.2036f,-75.71162f,-46.31746f,-141.2036f,-75.71162f,-46.31746f,-154.8168f,-68.24152f,-40.35665f,-154.8168f,-68.24152f,-40.35665f,-166.1427f,-60.37452f,-29.841f,-166.1427f,-60.37452f,-29.841f,-173.6311f,-52.23924f,-15.85839f,-173.6311f,-52.23924f,-15.85839f,-176.2481f,-43.96873f,-0.004890828f,-176.2481f,-43.96873f,-0.004890828f,-54.78714f,-43.96873f,-15.99553f,-54.78714f,-43.96873f,-15.99553f,-61.41818f,-52.23924f,-30.63149f,-61.41818f,-52.23924f,-30.63149f,-72.27038f,-60.37452f,-42.19952f,-72.27038f,-60.37452f,-42.19952f,-85.93201f,-68.24152f,-49.4255f,-85.93201f,-68.24152f,-49.4255f,-100.6241f,-75.71162f,-51.65985f,-100.6241f,-75.71162f,-51.65985f,-114.465f,-82.66266f,-48.96925f,-114.465f,-82.66266f,-48.96925f,-128.3059f,-75.71162f,-51.65985f,-128.3059f,-75.71162f,-51.65985f,-142.998f,-68.24152f,-49.4255f,-142.998f,-68.24152f,-49.4255f,-156.6596f,-60.37452f,-42.19952f,-156.6596f,-60.37452f,-42.19952f,-167.5118f,-52.23924f,-30.63149f,-167.5118f,-52.23924f,-30.63149f,-174.1429f,-43.96873f,-15.99553f,-174.1429f,-43.96873f,-15.99553f,-60.95929f,-43.96873f,-30.89643f,-60.95929f,-43.96873f,-30.89643f,-71.15246f,-52.23924f,-43.31744f,-71.15246f,-52.23924f,-43.31744f,-84.6289f,-60.37452f,-51.68255f,-84.6289f,-60.37452f,-51.68255f,-99.69524f,-68.24152f,-55.12642f,-99.69524f,-68.24152f,-55.12642f,-114.465f,-75.71162f,-53.48204f,-114.465f,-75.71162f,-53.48204f,-129.2348f,-68.24152f,-55.12642f,-129.2348f,-68.24152f,-55.12642f,-144.3011f,-60.37452f,-51.68255f,-144.3011f,-60.37452f,-51.68255f,-157.7776f,-52.23924f,-43.31744f,-157.7776f,-52.23924f,-43.31744f,-167.9707f,-43.96873f,-30.89643f,-167.9707f,-43.96873f,-30.89643f,-70.77778f,-43.96873f,-43.69213f,-70.77778f,-43.96873f,-43.69213f,-83.83841f,-52.23924f,-53.05172f,-83.83841f,-52.23924f,-53.05172f,-99.0207f,-60.37452f,-57.64383f,-99.0207f,-60.37452f,-57.64383f,-114.465f,-68.24152f,-57.07089f,-114.465f,-68.24152f,-57.07089f,-129.9093f,-60.37452f,-57.64383f,-129.9093f,-60.37452f,-57.64383f,-145.0916f,-52.23924f,-53.05172f,-145.0916f,-52.23924f,-53.05172f,-158.1522f,-43.96873f,-43.69213f,-158.1522f,-43.96873f,-43.69213f,-83.57347f,-43.96873f,-53.51061f,-83.57347f,-43.96873f,-53.51061f,-98.61152f,-52.23924f,-59.17094f,-98.61152f,-52.23924f,-59.17094f,-114.465f,-60.37452f,-59.67711f,-114.465f,-60.37452f,-59.67711f,-130.3185f,-52.23924f,-59.17094f,-130.3185f,-52.23924f,-59.17094f,-145.3566f,-43.96873f,-53.51061f,-145.3566f,-43.96873f,-53.51061f,-98.47437f,-43.96873f,-59.68276f,-98.47437f,-43.96873f,-59.68276f,-114.465f,-52.23924f,-61.25809f,-114.465f,-52.23924f,-61.25809f,-130.4556f,-43.96873f,-59.68276f,-130.4556f,-43.96873f,-59.68276f,-114.465f,-43.96873f,-61.78797f,-114.465f,-43.96873f,-61.78797f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,8,0,9,0,8,3,3,12,1,12,3,13,2,16,17,16,2,1,20,2,21,2,20,0,24,9,25,9,24,8,28,3,8,3,28,13,9,20,30,20,9,0,32,13,33,13,32,12,1,36,16,36,1,12,17,38,39,38,17,16,21,17,42,17,21,2,44,25,45,25,44,24,48,8,24,8,48,28,25,30,50,30,25,9,33,28,52,28,33,13,54,33,55,33,54,32,32,36,12,36,32,58,16,60,38,60,16,36,39,62,63,62,39,38,42,39,66,39,42,17,68,45,69,45,68,44,72,24,44,24,72,48,45,50,74,50,45,25,52,48,76,48,52,28,55,52,78,52,55,33,80,55,81,55,80,54,54,58,32,58,54,84,36,86,60,86,36,58,38,88,62,88,38,60,63,90,91,90,63,62,66,63,94,63,66,39,96,69,97,69,96,68,100,44,68,44,100,72,69,74,102,74,69,45,104,48,72,48,104,76,78,76,106,76,78,52,81,78,108,78,81,55,110,81,111,81,110,80,80,84,54,84,80,114,84,86,58,86,84,116,60,118,88,118,60,86,62,120,90,120,62,88,91,122,123,122,91,90,94,91,126,91,94,63,128,97,129,97,128,96,132,68,96,68,132,100,97,102,134,102,97,69,136,72,100,72,136,104,106,104,138,104,106,76,108,106,140,106,108,78,111,108,142,108,111,81,144,111,145,111,144,110,110,114,80,114,110,148,114,116,84,116,114,150,116,118,86,118,116,152,118,120,88,120,118,154,90,156,122,156,90,120,158,122,159,122,158,123,126,123,162,123,126,91,128,164,165,164,128,129,132,128,168,128,132,96,97,170,129,170,97,134,172,100,132,100,172,136,174,104,136,104,174,138,140,138,176,138,140,106,142,140,178,140,142,108,145,142,180,142,145,111,182,145,183,145,182,144,144,148,110,148,144,186,148,150,114,150,148,188,150,152,116,152,150,190,152,154,118,154,152,192,154,156,120,156,154,194,159,156,196,156,159,122,198,159,199,159,198,158,202,123,158,123,202,162,165,204,205,204,165,164,168,165,208,165,168,128,129,210,164,210,129,170,212,132,168,132,212,172,214,136,172,136,214,174,216,138,174,138,216,176,178,176,218,176,178,140,180,178,220,178,180,142,183,180,222,180,183,145,182,186,144,186,182,224,186,188,148,188,186,226,188,190,150,190,188,228,190,192,152,192,190,230,192,194,154,194,192,232,194,196,156,196,194,234,199,196,236,196,199,159,238,199,239,199,238,198,242,158,198,158,242,202,205,244,245,244,205,204,208,205,248,205,208,165,164,250,204,250,164,210,252,168,208,168,252,212,254,172,212,172,254,214,256,174,214,174,256,216,258,176,216,176,258,218,220,218,260,218,220,178,222,220,262,220,222,180,224,226,186,226,224,264,226,228,188,228,226,266,228,230,190,230,228,268,230,232,192,232,230,270,232,234,194,234,232,272,234,236,196,236,234,274,239,236,276,236,239,199,278,239,279,239,278,238,282,198,238,198,282,242,245,284,285,284,245,244,248,245,288,245,248,205,204,290,244,290,204,250,292,208,248,208,292,252,294,212,252,212,294,254,296,214,254,214,296,256,298,216,256,216,298,258,300,218,258,218,300,260,262,260,302,260,262,220,264,266,226,266,264,304,266,268,228,268,266,306,268,270,230,270,268,308,270,272,232,272,270,310,272,274,234,274,272,312,276,274,314,274,276,236,279,276,316,276,279,239,318,279,319,279,318,278,322,238,278,238,322,282,285,324,325,324,285,284,288,285,328,285,288,245,244,330,284,330,244,290,292,288,332,288,292,248,334,252,292,252,334,294,336,254,294,254,336,296,338,256,296,256,338,298,340,258,298,258,340,300,342,260,300,260,342,302,304,306,266,306,304,344,306,308,268,308,306,346,308,310,270,310,308,348,310,312,272,312,310,350,312,314,274,314,312,352,316,314,354,314,316,276,319,316,356,316,319,279,358,319,359,319,358,318,362,278,318,278,362,322,325,358,359,358,325,324,328,325,364,325,328,285,284,366,324,366,284,330,332,328,368,328,332,288,370,292,332,292,370,334,372,294,334,294,372,336,374,296,336,296,374,338,376,298,338,298,376,340,378,300,340,300,378,342,344,346,306,346,344,380,346,348,308,348,346,382,348,350,310,350,348,384,350,352,312,352,350,386,314,388,354,388,314,352,316,390,356,390,316,354,359,356,392,356,359,319,394,318,358,318,394,362,364,359,392,359,364,325,324,394,358,394,324,366,328,396,368,396,328,364,332,398,370,398,332,368,400,334,370,334,400,372,402,336,372,336,402,374,404,338,374,338,404,376,406,340,376,340,406,378,380,382,346,382,380,408,382,384,348,384,382,410,384,386,350,386,384,412,352,414,388,414,352,386,354,416,390,416,354,388,356,418,392,418,356,390,364,418,396,418,364,392,368,420,398,420,368,396,370,422,400,422,370,398,424,372,400,372,424,402,426,374,402,374,426,404,428,376,404,376,428,406,408,410,382,410,408,430,410,412,384,412,410,432,386,434,414,434,386,412,388,436,416,436,388,414,390,438,418,438,390,416,396,438,420,438,396,418,398,440,422,440,398,420,400,442,424,442,400,422,444,402,424,402,444,426,446,404,426,404,446,428,430,432,410,432,430,448,412,450,434,450,412,432,414,452,436,452,414,434,416,454,438,454,416,436,420,454,440,454,420,438,422,456,442,456,422,440,424,458,444,458,424,442,460,426,444,426,460,446,432,462,450,462,432,448,434,464,452,464,434,450,436,466,454,466,436,452,440,466,456,466,440,454,442,468,458,468,442,456,444,470,460,470,444,458,450,472,464,472,450,462,452,474,466,474,452,464,456,474,468,474,456,466,458,476,470,476,458,468,464,478,474,478,464,472,468,478,476,478,468,474,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 1296, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glColor4d(0.2392157, 0.4, 0.2392157, 1.0);
int[] indices = {
4,5,6,7,6,5,4,10,5,11,5,10,14,4,15,6,15,4,6,7,18,19,18,7,5,22,7,23,7,22,10,26,11,27,11,26,14,29,4,10,4,29,5,11,22,31,22,11,15,34,14,35,14,34,15,6,37,18,37,6,18,19,40,41,40,19,7,23,19,43,19,23,26,46,27,47,27,46,29,49,10,26,10,49,11,27,31,51,31,27,14,35,29,53,29,35,34,56,35,57,35,56,59,34,37,15,37,34,37,18,61,40,61,18,40,41,64,65,64,41,19,43,41,67,41,43,46,70,47,71,47,70,49,73,26,46,26,73,27,47,51,75,51,47,29,53,49,77,49,53,35,57,53,79,53,57,56,82,57,83,57,82,85,56,59,34,59,56,59,37,87,61,87,37,61,40,89,64,89,40,64,65,92,93,92,65,41,67,65,95,65,67,70,98,71,99,71,98,73,101,46,70,46,101,47,71,75,103,75,71,77,105,49,73,49,105,53,79,77,107,77,79,57,83,79,109,79,83,82,112,83,113,83,112,115,82,85,56,85,82,117,85,87,59,87,85,87,61,119,89,119,61,89,64,121,92,121,64,92,93,124,125,124,93,65,95,93,127,93,95,98,130,99,131,99,130,101,133,70,98,70,133,71,99,103,135,103,99,105,137,73,101,73,137,77,107,105,139,105,107,79,109,107,141,107,109,83,113,109,143,109,113,112,146,113,147,113,146,149,112,115,82,115,112,151,115,117,85,117,115,153,117,119,87,119,117,155,119,121,89,121,119,121,92,157,124,157,92,125,160,124,161,124,160,93,127,125,163,125,127,131,130,166,167,166,130,98,133,130,169,130,133,135,99,171,131,171,99,137,173,101,133,101,173,139,175,105,137,105,175,107,141,139,177,139,141,109,143,141,179,141,143,113,147,143,181,143,147,146,184,147,185,147,184,187,146,149,112,149,146,189,149,151,115,151,149,191,151,153,117,153,151,193,153,155,119,155,153,195,155,157,121,157,155,124,161,157,197,157,161,160,200,161,201,161,200,163,203,125,160,125,203,166,167,206,207,206,167,130,169,167,209,167,169,171,131,211,166,211,131,173,213,133,169,133,213,175,215,137,173,137,215,177,217,139,175,139,217,141,179,177,219,177,179,143,181,179,221,179,181,147,185,181,223,181,185,225,184,187,146,187,184,227,187,189,149,189,187,229,189,191,151,191,189,231,191,193,153,193,191,233,193,195,155,195,193,235,195,197,157,197,195,161,201,197,237,197,201,200,240,201,241,201,240,203,243,160,200,160,243,206,207,246,247,246,207,167,209,207,249,207,209,211,166,251,206,251,166,213,253,169,209,169,253,215,255,173,213,173,255,217,257,175,215,175,257,219,259,177,217,177,259,179,221,219,261,219,221,181,223,221,263,221,223,265,225,227,187,227,225,267,227,229,189,229,227,269,229,231,191,231,229,271,231,233,193,233,231,273,233,235,195,235,233,275,235,237,197,237,235,201,241,237,277,237,241,240,280,241,281,241,280,243,283,200,240,200,283,246,247,286,287,286,247,207,249,247,289,247,249,251,206,291,246,291,206,253,293,209,249,209,293,255,295,213,253,213,295,257,297,215,255,215,297,259,299,217,257,217,299,261,301,219,259,219,301,221,263,261,303,261,263,305,265,267,227,267,265,307,267,269,229,269,267,309,269,271,231,271,269,311,271,273,233,273,271,313,273,275,235,275,273,237,277,275,315,275,277,241,281,277,317,277,281,280,320,281,321,281,320,283,323,240,280,240,323,286,287,326,327,326,287,247,289,287,329,287,289,291,246,331,286,331,246,249,293,289,333,289,293,295,335,253,293,253,335,297,337,255,295,255,337,299,339,257,297,257,339,301,341,259,299,259,341,303,343,261,301,261,343,345,305,307,267,307,305,347,307,309,269,309,307,349,309,311,271,311,309,351,311,313,273,313,311,353,313,315,275,315,313,277,317,315,355,315,317,281,321,317,357,317,321,320,360,321,361,321,360,323,363,280,320,280,363,326,327,360,361,360,327,287,329,327,365,327,329,331,286,367,326,367,286,289,333,329,369,329,333,335,371,293,333,293,371,337,373,295,335,295,373,339,375,297,337,297,375,341,377,299,339,299,377,343,379,301,341,301,379,381,345,347,307,347,345,383,347,349,309,349,347,385,349,351,311,351,349,387,351,353,313,353,351,353,315,389,355,389,315,355,317,391,357,391,317,321,361,357,393,357,361,363,395,320,360,320,395,327,365,361,393,361,365,367,326,395,360,395,326,365,329,397,369,397,329,369,333,399,371,399,333,373,401,335,371,335,401,375,403,337,373,337,403,377,405,339,375,339,405,379,407,341,377,341,407,409,381,383,347,383,381,411,383,385,349,385,383,413,385,387,351,387,385,387,353,415,389,415,353,389,355,417,391,417,355,391,357,419,393,419,357,393,365,419,397,419,365,397,369,421,399,421,369,399,371,423,401,423,371,403,425,373,401,373,425,405,427,375,403,375,427,407,429,377,405,377,429,431,409,411,383,411,409,433,411,413,385,413,411,413,387,435,415,435,387,415,389,437,417,437,389,417,391,439,419,439,391,419,397,439,421,439,397,421,399,441,423,441,399,423,401,443,425,443,401,427,445,403,425,403,445,429,447,405,427,405,447,449,431,433,411,433,431,433,413,451,435,451,413,435,415,453,437,453,415,437,417,455,439,455,417,439,421,455,441,455,421,441,423,457,443,457,423,443,425,459,445,459,425,447,461,427,445,427,461,449,433,463,451,463,433,451,435,465,453,465,435,453,437,467,455,467,437,455,441,467,457,467,441,457,443,469,459,469,443,459,445,471,461,471,445,463,451,473,465,473,451,465,453,475,467,475,453,467,457,475,469,475,457,469,459,477,471,477,459,473,465,479,475,479,465,475,469,479,477,479,469,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 1296, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID20(GL2 gl){
float[] positionsArray = {
-111.1004f,-49.3505f,-12.56193f,-117.8297f,-49.3505f,-12.56193f,-114.465f,-49.3505f,-13.00489f,-120.965f,-49.3505f,-11.26322f,-107.965f,-49.3505f,-11.26322f,-123.6574f,-49.3505f,-9.197279f,-105.2726f,-49.3505f,-9.197279f,-125.7233f,-49.3505f,-6.504891f,-103.2067f,-49.3505f,-6.504891f,-127.022f,-49.3505f,-3.369538f,-101.908f,-49.3505f,-3.369538f,-127.465f,-49.3505f,-0.004890828f,-101.465f,-49.3505f,-0.004890828f,-101.908f,-49.3505f,3.359757f,-127.022f,-49.3505f,3.359757f,-125.7233f,-49.3505f,6.495109f,-103.2067f,-49.3505f,6.495109f,-123.6574f,-49.3505f,9.187497f,-105.2726f,-49.3505f,9.187497f,-107.965f,-49.3505f,11.25344f,-120.965f,-49.3505f,11.25344f,-111.1004f,-49.3505f,12.55214f,-117.8297f,-49.3505f,12.55214f,-114.465f,-49.3505f,12.99511f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,3,0,4,3,4,5,5,4,6,5,6,7,7,6,8,7,8,9,9,8,10,9,10,11,11,10,12,11,12,13,11,13,14,14,13,15,15,13,16,15,16,17,17,16,18,17,18,19,17,19,20,20,19,21,20,21,22,22,21,23,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 66, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID26(GL2 gl){
float[] positionsArray = {
-97.95673f,-38.71873f,61.60483f,-114.465f,-43.96873f,63.77819f,-114.465f,-38.71873f,63.77819f,-97.95673f,-43.96873f,61.60483f,-97.95673f,-43.96873f,61.60483f,-97.95673f,-38.71873f,61.60483f,-114.465f,-43.96873f,63.77819f,-114.465f,-38.71873f,63.77819f,-130.9733f,-43.96873f,61.60483f,-130.9733f,-38.71873f,61.60483f,-130.9733f,-43.96873f,61.60483f,-130.9733f,-38.71873f,61.60483f,-97.95673f,-38.71873f,-61.61462f,-114.465f,-38.71873f,-61.78797f,-114.465f,-38.71873f,-63.78797f,-98.47437f,-38.71873f,-59.68276f,-82.57347f,-38.71873f,-55.24266f,-83.57347f,-38.71873f,-53.51061f,-69.36356f,-38.71873f,-45.10634f,-70.77778f,-38.71873f,-43.69213f,-59.22724f,-38.71873f,-31.89643f,-60.95929f,-38.71873f,-30.89643f,-52.85529f,-38.71873f,-16.51317f,-54.78714f,-38.71873f,-15.99553f,-50.68193f,-38.71873f,-0.004890828f,-52.68193f,-38.71873f,-0.004890828f,-52.85529f,-38.71873f,16.50339f,-54.78714f,-38.71873f,15.98575f,-60.95929f,-38.71873f,30.88665f,-59.22724f,-38.71873f,31.88665f,-70.77778f,-38.71873f,43.68234f,-69.36356f,-38.71873f,45.09656f,-83.57347f,-38.71873f,53.50083f,-82.57347f,-38.71873f,55.23288f,-98.47437f,-38.71873f,59.67298f,-97.95673f,-38.71873f,61.60483f,-114.465f,-38.71873f,61.77819f,-114.465f,-38.71873f,63.77819f,-130.9733f,-38.71873f,-61.61462f,-130.4556f,-38.71873f,-59.68276f,-146.3566f,-38.71873f,-55.24266f,-145.3566f,-38.71873f,-53.51061f,-159.5665f,-38.71873f,-45.10634f,-158.1522f,-38.71873f,-43.69213f,-169.7028f,-38.71873f,-31.89643f,-167.9707f,-38.71873f,-30.89643f,-176.0747f,-38.71873f,-16.51317f,-174.1429f,-38.71873f,-15.99553f,-178.2481f,-38.71873f,-0.004890828f,-176.2481f,-38.71873f,-0.004890828f,-174.1429f,-38.71873f,15.98575f,-176.0747f,-38.71873f,16.50339f,-167.9707f,-38.71873f,30.88665f,-169.7028f,-38.71873f,31.88665f,-158.1522f,-38.71873f,43.68234f,-159.5665f,-38.71873f,45.09656f,-145.3566f,-38.71873f,53.50083f,-146.3566f,-38.71873f,55.23288f,-130.4556f,-38.71873f,59.67298f,-130.9733f,-38.71873f,61.60483f,-114.465f,-38.71873f,63.77819f,-114.465f,-38.71873f,61.77819f,-130.9733f,-38.71873f,61.60483f,-130.4556f,-38.71873f,59.67298f,-146.3566f,-38.71873f,55.23288f,-145.3566f,-38.71873f,53.50083f,-159.5665f,-38.71873f,45.09656f,-158.1522f,-38.71873f,43.68234f,-169.7028f,-38.71873f,31.88665f,-167.9707f,-38.71873f,30.88665f,-176.0747f,-38.71873f,16.50339f,-174.1429f,-38.71873f,15.98575f,-178.2481f,-38.71873f,-0.004890828f,-176.2481f,-38.71873f,-0.004890828f,-174.1429f,-38.71873f,-15.99553f,-176.0747f,-38.71873f,-16.51317f,-167.9707f,-38.71873f,-30.89643f,-169.7028f,-38.71873f,-31.89643f,-158.1522f,-38.71873f,-43.69213f,-159.5665f,-38.71873f,-45.10634f,-145.3566f,-38.71873f,-53.51061f,-146.3566f,-38.71873f,-55.24266f,-130.4556f,-38.71873f,-59.68276f,-130.9733f,-38.71873f,-61.61462f,-114.465f,-38.71873f,-61.78797f,-114.465f,-38.71873f,-63.78797f,-97.95673f,-38.71873f,61.60483f,-98.47437f,-38.71873f,59.67298f,-82.57347f,-38.71873f,55.23288f,-83.57347f,-38.71873f,53.50083f,-69.36356f,-38.71873f,45.09656f,-70.77778f,-38.71873f,43.68234f,-59.22724f,-38.71873f,31.88665f,-60.95929f,-38.71873f,30.88665f,-52.85529f,-38.71873f,16.50339f,-54.78714f,-38.71873f,15.98575f,-52.68193f,-38.71873f,-0.004890828f,-50.68193f,-38.71873f,-0.004890828f,-54.78714f,-38.71873f,-15.99553f,-52.85529f,-38.71873f,-16.51317f,-60.95929f,-38.71873f,-30.89643f,-59.22724f,-38.71873f,-31.89643f,-70.77778f,-38.71873f,-43.69213f,-69.36356f,-38.71873f,-45.10634f,-83.57347f,-38.71873f,-53.51061f,-82.57347f,-38.71873f,-55.24266f,-98.47437f,-38.71873f,-59.68276f,-97.95673f,-38.71873f,-61.61462f,-82.57347f,-38.71873f,55.23288f,-82.57347f,-43.96873f,55.23288f,-82.57347f,-43.96873f,55.23288f,-82.57347f,-38.71873f,55.23288f,-130.9733f,-43.96873f,-61.61462f,-114.465f,-43.96873f,-61.78797f,-114.465f,-43.96873f,-63.78797f,-130.4556f,-43.96873f,-59.68276f,-146.3566f,-43.96873f,-55.24266f,-145.3566f,-43.96873f,-53.51061f,-159.5665f,-43.96873f,-45.10634f,-158.1522f,-43.96873f,-43.69213f,-169.7028f,-43.96873f,-31.89643f,-167.9707f,-43.96873f,-30.89643f,-176.0747f,-43.96873f,-16.51317f,-174.1429f,-43.96873f,-15.99553f,-178.2481f,-43.96873f,-0.004890828f,-176.2481f,-43.96873f,-0.004890828f,-174.1429f,-43.96873f,15.98575f,-176.0747f,-43.96873f,16.50339f,-167.9707f,-43.96873f,30.88665f,-169.7028f,-43.96873f,31.88665f,-158.1522f,-43.96873f,43.68234f,-159.5665f,-43.96873f,45.09656f,-145.3566f,-43.96873f,53.50083f,-146.3566f,-43.96873f,55.23288f,-130.4556f,-43.96873f,59.67298f,-130.9733f,-43.96873f,61.60483f,-114.465f,-43.96873f,61.77819f,-114.465f,-43.96873f,63.77819f,-97.95673f,-43.96873f,-61.61462f,-98.47437f,-43.96873f,-59.68276f,-82.57347f,-43.96873f,-55.24266f,-83.57347f,-43.96873f,-53.51061f,-69.36356f,-43.96873f,-45.10634f,-70.77778f,-43.96873f,-43.69213f,-59.22724f,-43.96873f,-31.89643f,-60.95929f,-43.96873f,-30.89643f,-52.85529f,-43.96873f,-16.51317f,-54.78714f,-43.96873f,-15.99553f,-50.68193f,-43.96873f,-0.004890828f,-52.68193f,-43.96873f,-0.004890828f,-54.78714f,-43.96873f,15.98575f,-52.85529f,-43.96873f,16.50339f,-60.95929f,-43.96873f,30.88665f,-59.22724f,-43.96873f,31.88665f,-70.77778f,-43.96873f,43.68234f,-69.36356f,-43.96873f,45.09656f,-83.57347f,-43.96873f,53.50083f,-82.57347f,-43.96873f,55.23288f,-98.47437f,-43.96873f,59.67298f,-97.95673f,-43.96873f,61.60483f,-114.465f,-43.96873f,63.77819f,-114.465f,-43.96873f,61.77819f,-97.95673f,-43.96873f,61.60483f,-98.47437f,-43.96873f,59.67298f,-82.57347f,-43.96873f,55.23288f,-83.57347f,-43.96873f,53.50083f,-69.36356f,-43.96873f,45.09656f,-70.77778f,-43.96873f,43.68234f,-59.22724f,-43.96873f,31.88665f,-60.95929f,-43.96873f,30.88665f,-52.85529f,-43.96873f,16.50339f,-54.78714f,-43.96873f,15.98575f,-50.68193f,-43.96873f,-0.004890828f,-52.68193f,-43.96873f,-0.004890828f,-54.78714f,-43.96873f,-15.99553f,-52.85529f,-43.96873f,-16.51317f,-60.95929f,-43.96873f,-30.89643f,-59.22724f,-43.96873f,-31.89643f,-70.77778f,-43.96873f,-43.69213f,-69.36356f,-43.96873f,-45.10634f,-83.57347f,-43.96873f,-53.51061f,-82.57347f,-43.96873f,-55.24266f,-98.47437f,-43.96873f,-59.68276f,-97.95673f,-43.96873f,-61.61462f,-114.465f,-43.96873f,-61.78797f,-114.465f,-43.96873f,-63.78797f,-130.9733f,-43.96873f,61.60483f,-130.4556f,-43.96873f,59.67298f,-146.3566f,-43.96873f,55.23288f,-145.3566f,-43.96873f,53.50083f,-159.5665f,-43.96873f,45.09656f,-158.1522f,-43.96873f,43.68234f,-169.7028f,-43.96873f,31.88665f,-167.9707f,-43.96873f,30.88665f,-176.0747f,-43.96873f,16.50339f,-174.1429f,-43.96873f,15.98575f,-178.2481f,-43.96873f,-0.004890828f,-176.2481f,-43.96873f,-0.004890828f,-174.1429f,-43.96873f,-15.99553f,-176.0747f,-43.96873f,-16.51317f,-167.9707f,-43.96873f,-30.89643f,-169.7028f,-43.96873f,-31.89643f,-158.1522f,-43.96873f,-43.69213f,-159.5665f,-43.96873f,-45.10634f,-145.3566f,-43.96873f,-53.51061f,-146.3566f,-43.96873f,-55.24266f,-130.4556f,-43.96873f,-59.68276f,-130.9733f,-43.96873f,-61.61462f,-146.3566f,-43.96873f,55.23288f,-146.3566f,-38.71873f,55.23288f,-146.3566f,-43.96873f,55.23288f,-146.3566f,-38.71873f,55.23288f,-146.3566f,-43.96873f,-55.24266f,-159.5665f,-38.71873f,-45.10634f,-159.5665f,-43.96873f,-45.10634f,-146.3566f,-38.71873f,-55.24266f,-146.3566f,-38.71873f,-55.24266f,-146.3566f,-43.96873f,-55.24266f,-159.5665f,-38.71873f,-45.10634f,-159.5665f,-43.96873f,-45.10634f,-130.9733f,-43.96873f,-61.61462f,-130.9733f,-38.71873f,-61.61462f,-130.9733f,-38.71873f,-61.61462f,-130.9733f,-43.96873f,-61.61462f,-114.465f,-43.96873f,-63.78797f,-114.465f,-38.71873f,-63.78797f,-114.465f,-38.71873f,-63.78797f,-114.465f,-43.96873f,-63.78797f,-97.95673f,-43.96873f,-61.61462f,-97.95673f,-38.71873f,-61.61462f,-97.95673f,-38.71873f,-61.61462f,-97.95673f,-43.96873f,-61.61462f,-82.57347f,-43.96873f,-55.24266f,-82.57347f,-38.71873f,-55.24266f,-82.57347f,-38.71873f,-55.24266f,-82.57347f,-43.96873f,-55.24266f,-69.36356f,-43.96873f,-45.10634f,-69.36356f,-38.71873f,-45.10634f,-69.36356f,-38.71873f,-45.10634f,-69.36356f,-43.96873f,-45.10634f,-59.22724f,-38.71873f,-31.89643f,-59.22724f,-43.96873f,-31.89643f,-59.22724f,-38.71873f,-31.89643f,-59.22724f,-43.96873f,-31.89643f,-52.85529f,-38.71873f,-16.51317f,-52.85529f,-43.96873f,-16.51317f,-52.85529f,-38.71873f,-16.51317f,-52.85529f,-43.96873f,-16.51317f,-50.68193f,-38.71873f,-0.004890828f,-50.68193f,-43.96873f,-0.004890828f,-50.68193f,-38.71873f,-0.004890828f,-50.68193f,-43.96873f,-0.004890828f,-52.85529f,-38.71873f,16.50339f,-52.85529f,-43.96873f,16.50339f,-52.85529f,-38.71873f,16.50339f,-52.85529f,-43.96873f,16.50339f,-59.22724f,-38.71873f,31.88665f,-59.22724f,-43.96873f,31.88665f,-59.22724f,-38.71873f,31.88665f,-59.22724f,-43.96873f,31.88665f,-69.36356f,-38.71873f,45.09656f,-69.36356f,-43.96873f,45.09656f,-69.36356f,-38.71873f,45.09656f,-69.36356f,-43.96873f,45.09656f,-159.5665f,-43.96873f,45.09656f,-159.5665f,-38.71873f,45.09656f,-159.5665f,-43.96873f,45.09656f,-159.5665f,-38.71873f,45.09656f,-169.7028f,-38.71873f,31.88665f,-169.7028f,-43.96873f,31.88665f,-169.7028f,-38.71873f,31.88665f,-169.7028f,-43.96873f,31.88665f,-176.0747f,-38.71873f,16.50339f,-176.0747f,-43.96873f,16.50339f,-176.0747f,-38.71873f,16.50339f,-176.0747f,-43.96873f,16.50339f,-178.2481f,-38.71873f,-0.004890828f,-178.2481f,-43.96873f,-0.004890828f,-178.2481f,-38.71873f,-0.004890828f,-178.2481f,-43.96873f,-0.004890828f,-176.0747f,-38.71873f,-16.51317f,-176.0747f,-43.96873f,-16.51317f,-176.0747f,-38.71873f,-16.51317f,-176.0747f,-43.96873f,-16.51317f,-169.7028f,-38.71873f,-31.89643f,-169.7028f,-43.96873f,-31.89643f,-169.7028f,-38.71873f,-31.89643f,-169.7028f,-43.96873f,-31.89643f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,2,8,9,8,2,1,12,13,14,13,12,15,15,12,16,15,16,17,17,16,18,17,18,19,19,18,20,19,20,21,21,20,22,21,22,23,23,22,24,23,24,25,25,24,26,25,26,27,27,26,28,28,26,29,28,29,30,30,29,31,30,31,32,32,31,33,32,33,34,34,33,35,34,35,36,36,35,37,13,38,14,38,13,39,38,39,40,40,39,41,40,41,42,42,41,43,42,43,44,44,43,45,44,45,46,46,45,47,46,47,48,48,47,49,48,49,50,48,50,51,51,50,52,51,52,53,53,52,54,53,54,55,55,54,56,55,56,57,57,56,58,57,58,59,59,58,36,59,36,37,108,3,0,3,108,109,112,113,114,113,112,115,115,112,116,115,116,117,117,116,118,117,118,119,119,118,120,119,120,121,121,120,122,121,122,123,123,122,124,123,124,125,125,124,126,126,124,127,126,127,128,128,127,129,128,129,130,130,129,131,130,131,132,132,131,133,132,133,134,134,133,135,134,135,136,136,135,137,113,138,114,138,113,139,138,139,140,140,139,141,140,141,142,142,141,143,142,143,144,144,143,145,144,145,146,146,145,147,146,147,148,148,147,149,148,149,150,148,150,151,151,150,152,151,152,153,153,152,154,153,154,155,155,154,156,155,156,157,157,156,158,157,158,159,159,158,136,159,136,137,9,208,209,208,9,8,212,213,214,213,212,215,220,215,212,215,220,221,224,221,220,221,224,225,228,225,224,225,228,229,232,229,228,229,232,233,236,233,232,233,236,237,240,236,241,236,240,237,244,241,245,241,244,240,248,245,249,245,248,244,252,249,253,249,252,248,256,253,257,253,256,252,260,257,261,257,260,256,260,109,108,109,260,261,209,264,265,264,209,208,268,264,269,264,268,265,272,269,273,269,272,268,276,273,277,273,276,272,280,277,281,277,280,276,284,281,285,281,284,280,213,285,214,285,213,284,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 432, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glColor4d(0.8, 0.8, 0.1568627, 1.0);
int[] indices = {
4,5,6,7,6,5,6,7,10,11,10,7,60,61,62,61,63,62,62,63,64,63,65,64,64,65,66,65,67,66,66,67,68,67,69,68,68,69,70,69,71,70,70,71,72,71,73,72,73,74,72,72,74,75,74,76,75,75,76,77,76,78,77,77,78,79,78,80,79,79,80,81,80,82,81,81,82,83,82,84,83,85,83,84,60,86,61,61,86,87,86,88,87,87,88,89,88,90,89,89,90,91,90,92,91,91,92,93,92,94,93,93,94,95,95,94,96,94,97,96,96,97,98,97,99,98,98,99,100,99,101,100,100,101,102,101,103,102,102,103,104,103,105,104,104,105,106,105,107,106,106,107,84,85,84,107,110,111,4,5,4,111,160,161,162,161,163,162,162,163,164,163,165,164,164,165,166,165,167,166,166,167,168,167,169,168,168,169,170,169,171,170,170,171,172,171,173,172,173,174,172,172,174,175,174,176,175,175,176,177,176,178,177,177,178,179,178,180,179,179,180,181,180,182,181,181,182,183,182,184,183,185,183,184,160,186,161,161,186,187,186,188,187,187,188,189,188,190,189,189,190,191,190,192,191,191,192,193,192,194,193,193,194,195,194,196,195,195,196,197,197,196,198,196,199,198,198,199,200,199,201,200,200,201,202,201,203,202,202,203,204,203,205,204,204,205,206,205,207,206,206,207,184,185,184,207,10,11,210,211,210,11,216,217,218,219,218,217,222,223,216,217,216,223,226,227,222,223,222,227,230,231,226,227,226,231,234,235,230,231,230,235,238,239,234,235,234,239,238,242,239,243,239,242,242,246,243,247,243,246,246,250,247,251,247,250,250,254,251,255,251,254,254,258,255,259,255,258,258,262,259,263,259,262,263,262,110,111,110,262,210,211,266,267,266,211,267,270,266,271,266,270,270,274,271,275,271,274,274,278,275,279,275,278,278,282,279,283,279,282,282,286,283,287,283,286,286,218,287,219,287,218,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 432, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID32(GL2 gl){
float[] positionsArray = {
-98.47437f,-32.89215f,59.67298f,-114.465f,-38.71873f,61.77819f,-114.465f,-32.89215f,61.77819f,-98.47437f,-38.71873f,59.67298f,-98.47437f,-38.71873f,59.67298f,-98.47437f,-32.89215f,59.67298f,-114.465f,-38.71873f,61.77819f,-114.465f,-32.89215f,61.77819f,-130.4556f,-38.71873f,59.67298f,-130.4556f,-32.89215f,59.67298f,-130.4556f,-38.71873f,59.67298f,-130.4556f,-32.89215f,59.67298f,-83.57347f,-32.89215f,53.50083f,-83.57347f,-38.71873f,53.50083f,-83.57347f,-38.71873f,53.50083f,-83.57347f,-32.89215f,53.50083f,-145.3566f,-38.71873f,53.50083f,-145.3566f,-32.89215f,53.50083f,-145.3566f,-38.71873f,53.50083f,-145.3566f,-32.89215f,53.50083f,-70.77778f,-32.89215f,43.68234f,-70.77778f,-38.71873f,43.68234f,-70.77778f,-38.71873f,43.68234f,-70.77778f,-32.89215f,43.68234f,-158.1522f,-38.71873f,43.68234f,-158.1522f,-32.89215f,43.68234f,-158.1522f,-38.71873f,43.68234f,-158.1522f,-32.89215f,43.68234f,-60.95929f,-38.71873f,30.88665f,-60.95929f,-32.89215f,30.88665f,-60.95929f,-32.89215f,30.88665f,-60.95929f,-38.71873f,30.88665f,-167.9707f,-32.89215f,30.88665f,-167.9707f,-38.71873f,30.88665f,-167.9707f,-32.89215f,30.88665f,-167.9707f,-38.71873f,30.88665f,-54.78714f,-38.71873f,15.98575f,-54.78714f,-32.89215f,15.98575f,-54.78714f,-32.89215f,15.98575f,-54.78714f,-38.71873f,15.98575f,-174.1429f,-32.89215f,15.98575f,-174.1429f,-38.71873f,15.98575f,-174.1429f,-32.89215f,15.98575f,-174.1429f,-38.71873f,15.98575f,-52.68193f,-38.71873f,-0.004890828f,-52.68193f,-32.89215f,-0.004890828f,-52.68193f,-32.89215f,-0.004890828f,-52.68193f,-38.71873f,-0.004890828f,-176.2481f,-32.89215f,-0.004890828f,-176.2481f,-38.71873f,-0.004890828f,-176.2481f,-32.89215f,-0.004890828f,-176.2481f,-38.71873f,-0.004890828f,-54.78714f,-38.71873f,-15.99553f,-54.78714f,-32.89215f,-15.99553f,-54.78714f,-32.89215f,-15.99553f,-54.78714f,-38.71873f,-15.99553f,-174.1429f,-32.89215f,-15.99553f,-174.1429f,-38.71873f,-15.99553f,-174.1429f,-32.89215f,-15.99553f,-174.1429f,-38.71873f,-15.99553f,-60.95929f,-38.71873f,-30.89643f,-60.95929f,-32.89215f,-30.89643f,-60.95929f,-32.89215f,-30.89643f,-60.95929f,-38.71873f,-30.89643f,-167.9707f,-32.89215f,-30.89643f,-167.9707f,-38.71873f,-30.89643f,-167.9707f,-32.89215f,-30.89643f,-167.9707f,-38.71873f,-30.89643f,-70.77778f,-38.71873f,-43.69213f,-70.77778f,-32.89215f,-43.69213f,-70.77778f,-32.89215f,-43.69213f,-70.77778f,-38.71873f,-43.69213f,-158.1522f,-32.89215f,-43.69213f,-158.1522f,-38.71873f,-43.69213f,-158.1522f,-32.89215f,-43.69213f,-158.1522f,-38.71873f,-43.69213f,-83.57347f,-32.89215f,-53.51061f,-83.57347f,-38.71873f,-53.51061f,-83.57347f,-32.89215f,-53.51061f,-83.57347f,-38.71873f,-53.51061f,-145.3566f,-38.71873f,-53.51061f,-145.3566f,-32.89215f,-53.51061f,-145.3566f,-32.89215f,-53.51061f,-145.3566f,-38.71873f,-53.51061f,-98.47437f,-32.89215f,-59.68276f,-98.47437f,-38.71873f,-59.68276f,-98.47437f,-32.89215f,-59.68276f,-98.47437f,-38.71873f,-59.68276f,-130.4556f,-38.71873f,-59.68276f,-130.4556f,-32.89215f,-59.68276f,-130.4556f,-32.89215f,-59.68276f,-130.4556f,-38.71873f,-59.68276f,-114.465f,-32.89215f,-61.78797f,-114.465f,-38.71873f,-61.78797f,-114.465f,-32.89215f,-61.78797f,-114.465f,-38.71873f,-61.78797f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,2,8,9,8,2,1,12,3,0,3,12,13,9,16,17,16,9,8,20,13,12,13,20,21,17,24,25,24,17,16,20,28,21,28,20,29,32,24,33,24,32,25,29,36,28,36,29,37,40,33,41,33,40,32,37,44,36,44,37,45,48,41,49,41,48,40,45,52,44,52,45,53,56,49,57,49,56,48,53,60,52,60,53,61,64,57,65,57,64,56,61,68,60,68,61,69,72,65,73,65,72,64,68,76,77,76,68,69,80,72,73,72,80,81,77,84,85,84,77,76,88,81,80,81,88,89,85,92,93,92,85,84,93,89,88,89,93,92,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 144, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glColor4d(0.2392157, 0.4, 0.2392157, 1.0);
int[] indices = {
4,5,6,7,6,5,6,7,10,11,10,7,14,15,4,5,4,15,10,11,18,19,18,11,22,23,14,15,14,23,18,19,26,27,26,19,30,23,31,22,31,23,27,34,26,35,26,34,38,30,39,31,39,30,34,42,35,43,35,42,46,38,47,39,47,38,42,50,43,51,43,50,54,46,55,47,55,46,50,58,51,59,51,58,62,54,63,55,63,54,58,66,59,67,59,66,70,62,71,63,71,62,66,74,67,75,67,74,70,71,78,79,78,71,82,83,74,75,74,83,78,79,86,87,86,79,90,91,82,83,82,91,86,87,94,95,94,87,94,95,90,91,90,95,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 144, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID38(GL2 gl){
float[] positionsArray = {
-97.95673f,-27.39215f,61.60483f,-114.465f,-32.89215f,63.77819f,-114.465f,-27.39215f,63.77819f,-97.95673f,-32.89215f,61.60483f,-97.95673f,-32.89215f,61.60483f,-97.95673f,-27.39215f,61.60483f,-114.465f,-32.89215f,63.77819f,-114.465f,-27.39215f,63.77819f,-130.9733f,-32.89215f,61.60483f,-130.9733f,-27.39215f,61.60483f,-130.9733f,-32.89215f,61.60483f,-130.9733f,-27.39215f,61.60483f,-97.95673f,-27.39215f,-61.61462f,-114.465f,-27.39215f,-61.78797f,-114.465f,-27.39215f,-63.78797f,-98.47437f,-27.39215f,-59.68276f,-82.57347f,-27.39215f,-55.24266f,-83.57347f,-27.39215f,-53.51061f,-69.36356f,-27.39215f,-45.10634f,-70.77778f,-27.39215f,-43.69213f,-59.22724f,-27.39215f,-31.89643f,-60.95929f,-27.39215f,-30.89643f,-52.85529f,-27.39215f,-16.51317f,-54.78714f,-27.39215f,-15.99553f,-50.68193f,-27.39215f,-0.004890828f,-52.68193f,-27.39215f,-0.004890828f,-52.85529f,-27.39215f,16.50339f,-54.78714f,-27.39215f,15.98575f,-60.95929f,-27.39215f,30.88665f,-59.22724f,-27.39215f,31.88665f,-70.77778f,-27.39215f,43.68234f,-69.36356f,-27.39215f,45.09656f,-83.57347f,-27.39215f,53.50083f,-82.57347f,-27.39215f,55.23288f,-98.47437f,-27.39215f,59.67298f,-97.95673f,-27.39215f,61.60483f,-114.465f,-27.39215f,61.77819f,-114.465f,-27.39215f,63.77819f,-130.9733f,-27.39215f,-61.61462f,-130.4556f,-27.39215f,-59.68276f,-146.3566f,-27.39215f,-55.24266f,-145.3566f,-27.39215f,-53.51061f,-159.5665f,-27.39215f,-45.10634f,-158.1522f,-27.39215f,-43.69213f,-169.7028f,-27.39215f,-31.89643f,-167.9707f,-27.39215f,-30.89643f,-176.0747f,-27.39215f,-16.51317f,-174.1429f,-27.39215f,-15.99553f,-178.2481f,-27.39215f,-0.004890828f,-176.2481f,-27.39215f,-0.004890828f,-174.1429f,-27.39215f,15.98575f,-176.0747f,-27.39215f,16.50339f,-167.9707f,-27.39215f,30.88665f,-169.7028f,-27.39215f,31.88665f,-158.1522f,-27.39215f,43.68234f,-159.5665f,-27.39215f,45.09656f,-145.3566f,-27.39215f,53.50083f,-146.3566f,-27.39215f,55.23288f,-130.4556f,-27.39215f,59.67298f,-130.9733f,-27.39215f,61.60483f,-114.465f,-27.39215f,63.77819f,-114.465f,-27.39215f,61.77819f,-130.9733f,-27.39215f,61.60483f,-130.4556f,-27.39215f,59.67298f,-146.3566f,-27.39215f,55.23288f,-145.3566f,-27.39215f,53.50083f,-159.5665f,-27.39215f,45.09656f,-158.1522f,-27.39215f,43.68234f,-169.7028f,-27.39215f,31.88665f,-167.9707f,-27.39215f,30.88665f,-176.0747f,-27.39215f,16.50339f,-174.1429f,-27.39215f,15.98575f,-178.2481f,-27.39215f,-0.004890828f,-176.2481f,-27.39215f,-0.004890828f,-174.1429f,-27.39215f,-15.99553f,-176.0747f,-27.39215f,-16.51317f,-167.9707f,-27.39215f,-30.89643f,-169.7028f,-27.39215f,-31.89643f,-158.1522f,-27.39215f,-43.69213f,-159.5665f,-27.39215f,-45.10634f,-145.3566f,-27.39215f,-53.51061f,-146.3566f,-27.39215f,-55.24266f,-130.4556f,-27.39215f,-59.68276f,-130.9733f,-27.39215f,-61.61462f,-114.465f,-27.39215f,-61.78797f,-114.465f,-27.39215f,-63.78797f,-97.95673f,-27.39215f,61.60483f,-98.47437f,-27.39215f,59.67298f,-82.57347f,-27.39215f,55.23288f,-83.57347f,-27.39215f,53.50083f,-69.36356f,-27.39215f,45.09656f,-70.77778f,-27.39215f,43.68234f,-59.22724f,-27.39215f,31.88665f,-60.95929f,-27.39215f,30.88665f,-52.85529f,-27.39215f,16.50339f,-54.78714f,-27.39215f,15.98575f,-52.68193f,-27.39215f,-0.004890828f,-50.68193f,-27.39215f,-0.004890828f,-54.78714f,-27.39215f,-15.99553f,-52.85529f,-27.39215f,-16.51317f,-60.95929f,-27.39215f,-30.89643f,-59.22724f,-27.39215f,-31.89643f,-70.77778f,-27.39215f,-43.69213f,-69.36356f,-27.39215f,-45.10634f,-83.57347f,-27.39215f,-53.51061f,-82.57347f,-27.39215f,-55.24266f,-98.47437f,-27.39215f,-59.68276f,-97.95673f,-27.39215f,-61.61462f,-82.57347f,-27.39215f,55.23288f,-82.57347f,-32.89215f,55.23288f,-82.57347f,-32.89215f,55.23288f,-82.57347f,-27.39215f,55.23288f,-130.9733f,-32.89215f,-61.61462f,-114.465f,-32.89215f,-61.78797f,-114.465f,-32.89215f,-63.78797f,-130.4556f,-32.89215f,-59.68276f,-146.3566f,-32.89215f,-55.24266f,-145.3566f,-32.89215f,-53.51061f,-159.5665f,-32.89215f,-45.10634f,-158.1522f,-32.89215f,-43.69213f,-169.7028f,-32.89215f,-31.89643f,-167.9707f,-32.89215f,-30.89643f,-176.0747f,-32.89215f,-16.51317f,-174.1429f,-32.89215f,-15.99553f,-178.2481f,-32.89215f,-0.004890828f,-176.2481f,-32.89215f,-0.004890828f,-174.1429f,-32.89215f,15.98575f,-176.0747f,-32.89215f,16.50339f,-167.9707f,-32.89215f,30.88665f,-169.7028f,-32.89215f,31.88665f,-158.1522f,-32.89215f,43.68234f,-159.5665f,-32.89215f,45.09656f,-145.3566f,-32.89215f,53.50083f,-146.3566f,-32.89215f,55.23288f,-130.4556f,-32.89215f,59.67298f,-130.9733f,-32.89215f,61.60483f,-114.465f,-32.89215f,61.77819f,-114.465f,-32.89215f,63.77819f,-97.95673f,-32.89215f,-61.61462f,-98.47437f,-32.89215f,-59.68276f,-82.57347f,-32.89215f,-55.24266f,-83.57347f,-32.89215f,-53.51061f,-69.36356f,-32.89215f,-45.10634f,-70.77778f,-32.89215f,-43.69213f,-59.22724f,-32.89215f,-31.89643f,-60.95929f,-32.89215f,-30.89643f,-52.85529f,-32.89215f,-16.51317f,-54.78714f,-32.89215f,-15.99553f,-50.68193f,-32.89215f,-0.004890828f,-52.68193f,-32.89215f,-0.004890828f,-54.78714f,-32.89215f,15.98575f,-52.85529f,-32.89215f,16.50339f,-60.95929f,-32.89215f,30.88665f,-59.22724f,-32.89215f,31.88665f,-70.77778f,-32.89215f,43.68234f,-69.36356f,-32.89215f,45.09656f,-83.57347f,-32.89215f,53.50083f,-82.57347f,-32.89215f,55.23288f,-98.47437f,-32.89215f,59.67298f,-97.95673f,-32.89215f,61.60483f,-114.465f,-32.89215f,63.77819f,-114.465f,-32.89215f,61.77819f,-97.95673f,-32.89215f,61.60483f,-98.47437f,-32.89215f,59.67298f,-82.57347f,-32.89215f,55.23288f,-83.57347f,-32.89215f,53.50083f,-69.36356f,-32.89215f,45.09656f,-70.77778f,-32.89215f,43.68234f,-59.22724f,-32.89215f,31.88665f,-60.95929f,-32.89215f,30.88665f,-52.85529f,-32.89215f,16.50339f,-54.78714f,-32.89215f,15.98575f,-50.68193f,-32.89215f,-0.004890828f,-52.68193f,-32.89215f,-0.004890828f,-54.78714f,-32.89215f,-15.99553f,-52.85529f,-32.89215f,-16.51317f,-60.95929f,-32.89215f,-30.89643f,-59.22724f,-32.89215f,-31.89643f,-70.77778f,-32.89215f,-43.69213f,-69.36356f,-32.89215f,-45.10634f,-83.57347f,-32.89215f,-53.51061f,-82.57347f,-32.89215f,-55.24266f,-98.47437f,-32.89215f,-59.68276f,-97.95673f,-32.89215f,-61.61462f,-114.465f,-32.89215f,-61.78797f,-114.465f,-32.89215f,-63.78797f,-130.9733f,-32.89215f,61.60483f,-130.4556f,-32.89215f,59.67298f,-146.3566f,-32.89215f,55.23288f,-145.3566f,-32.89215f,53.50083f,-159.5665f,-32.89215f,45.09656f,-158.1522f,-32.89215f,43.68234f,-169.7028f,-32.89215f,31.88665f,-167.9707f,-32.89215f,30.88665f,-176.0747f,-32.89215f,16.50339f,-174.1429f,-32.89215f,15.98575f,-178.2481f,-32.89215f,-0.004890828f,-176.2481f,-32.89215f,-0.004890828f,-174.1429f,-32.89215f,-15.99553f,-176.0747f,-32.89215f,-16.51317f,-167.9707f,-32.89215f,-30.89643f,-169.7028f,-32.89215f,-31.89643f,-158.1522f,-32.89215f,-43.69213f,-159.5665f,-32.89215f,-45.10634f,-145.3566f,-32.89215f,-53.51061f,-146.3566f,-32.89215f,-55.24266f,-130.4556f,-32.89215f,-59.68276f,-130.9733f,-32.89215f,-61.61462f,-146.3566f,-32.89215f,55.23288f,-146.3566f,-27.39215f,55.23288f,-146.3566f,-32.89215f,55.23288f,-146.3566f,-27.39215f,55.23288f,-130.9733f,-32.89215f,-61.61462f,-146.3566f,-27.39215f,-55.24266f,-146.3566f,-32.89215f,-55.24266f,-130.9733f,-27.39215f,-61.61462f,-130.9733f,-27.39215f,-61.61462f,-130.9733f,-32.89215f,-61.61462f,-146.3566f,-27.39215f,-55.24266f,-146.3566f,-32.89215f,-55.24266f,-114.465f,-32.89215f,-63.78797f,-114.465f,-27.39215f,-63.78797f,-114.465f,-27.39215f,-63.78797f,-114.465f,-32.89215f,-63.78797f,-97.95673f,-32.89215f,-61.61462f,-97.95673f,-27.39215f,-61.61462f,-97.95673f,-27.39215f,-61.61462f,-97.95673f,-32.89215f,-61.61462f,-82.57347f,-32.89215f,-55.24266f,-82.57347f,-27.39215f,-55.24266f,-82.57347f,-27.39215f,-55.24266f,-82.57347f,-32.89215f,-55.24266f,-69.36356f,-32.89215f,-45.10634f,-69.36356f,-27.39215f,-45.10634f,-69.36356f,-27.39215f,-45.10634f,-69.36356f,-32.89215f,-45.10634f,-59.22724f,-27.39215f,-31.89643f,-59.22724f,-32.89215f,-31.89643f,-59.22724f,-27.39215f,-31.89643f,-59.22724f,-32.89215f,-31.89643f,-52.85529f,-27.39215f,-16.51317f,-52.85529f,-32.89215f,-16.51317f,-52.85529f,-27.39215f,-16.51317f,-52.85529f,-32.89215f,-16.51317f,-50.68193f,-27.39215f,-0.004890828f,-50.68193f,-32.89215f,-0.004890828f,-50.68193f,-27.39215f,-0.004890828f,-50.68193f,-32.89215f,-0.004890828f,-52.85529f,-27.39215f,16.50339f,-52.85529f,-32.89215f,16.50339f,-52.85529f,-27.39215f,16.50339f,-52.85529f,-32.89215f,16.50339f,-59.22724f,-27.39215f,31.88665f,-59.22724f,-32.89215f,31.88665f,-59.22724f,-27.39215f,31.88665f,-59.22724f,-32.89215f,31.88665f,-69.36356f,-27.39215f,45.09656f,-69.36356f,-32.89215f,45.09656f,-69.36356f,-27.39215f,45.09656f,-69.36356f,-32.89215f,45.09656f,-159.5665f,-32.89215f,45.09656f,-159.5665f,-27.39215f,45.09656f,-159.5665f,-32.89215f,45.09656f,-159.5665f,-27.39215f,45.09656f,-169.7028f,-27.39215f,31.88665f,-169.7028f,-32.89215f,31.88665f,-169.7028f,-27.39215f,31.88665f,-169.7028f,-32.89215f,31.88665f,-176.0747f,-27.39215f,16.50339f,-176.0747f,-32.89215f,16.50339f,-176.0747f,-27.39215f,16.50339f,-176.0747f,-32.89215f,16.50339f,-178.2481f,-27.39215f,-0.004890828f,-178.2481f,-32.89215f,-0.004890828f,-178.2481f,-27.39215f,-0.004890828f,-178.2481f,-32.89215f,-0.004890828f,-176.0747f,-27.39215f,-16.51317f,-176.0747f,-32.89215f,-16.51317f,-176.0747f,-27.39215f,-16.51317f,-176.0747f,-32.89215f,-16.51317f,-169.7028f,-27.39215f,-31.89643f,-169.7028f,-32.89215f,-31.89643f,-169.7028f,-27.39215f,-31.89643f,-169.7028f,-32.89215f,-31.89643f,-159.5665f,-27.39215f,-45.10634f,-159.5665f,-32.89215f,-45.10634f,-159.5665f,-27.39215f,-45.10634f,-159.5665f,-32.89215f,-45.10634f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,2,8,9,8,2,1,12,13,14,13,12,15,15,12,16,15,16,17,17,16,18,17,18,19,19,18,20,19,20,21,21,20,22,21,22,23,23,22,24,23,24,25,25,24,26,25,26,27,27,26,28,28,26,29,28,29,30,30,29,31,30,31,32,32,31,33,32,33,34,34,33,35,34,35,36,36,35,37,13,38,14,38,13,39,38,39,40,40,39,41,40,41,42,42,41,43,42,43,44,44,43,45,44,45,46,46,45,47,46,47,48,48,47,49,48,49,50,48,50,51,51,50,52,51,52,53,53,52,54,53,54,55,55,54,56,55,56,57,57,56,58,57,58,59,59,58,36,59,36,37,108,3,0,3,108,109,112,113,114,113,112,115,115,112,116,115,116,117,117,116,118,117,118,119,119,118,120,119,120,121,121,120,122,121,122,123,123,122,124,123,124,125,125,124,126,126,124,127,126,127,128,128,127,129,128,129,130,130,129,131,130,131,132,132,131,133,132,133,134,134,133,135,134,135,136,136,135,137,113,138,114,138,113,139,138,139,140,140,139,141,140,141,142,142,141,143,142,143,144,144,143,145,144,145,146,146,145,147,146,147,148,148,147,149,148,149,150,148,150,151,151,150,152,151,152,153,153,152,154,153,154,155,155,154,156,155,156,157,157,156,158,157,158,159,159,158,136,159,136,137,9,208,209,208,9,8,212,213,214,213,212,215,220,215,212,215,220,221,224,221,220,221,224,225,228,225,224,225,228,229,232,229,228,229,232,233,236,232,237,232,236,233,240,237,241,237,240,236,244,241,245,241,244,240,248,245,249,245,248,244,252,249,253,249,252,248,256,253,257,253,256,252,256,109,108,109,256,257,209,260,261,260,209,208,264,260,265,260,264,261,268,265,269,265,268,264,272,269,273,269,272,268,276,273,277,273,276,272,280,277,281,277,280,276,284,281,285,281,284,280,214,284,285,284,214,213,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 432, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glColor4d(0.8, 0.8, 0.1568627, 1.0);
int[] indices = {
4,5,6,7,6,5,6,7,10,11,10,7,60,61,62,61,63,62,62,63,64,63,65,64,64,65,66,65,67,66,66,67,68,67,69,68,68,69,70,69,71,70,70,71,72,71,73,72,73,74,72,72,74,75,74,76,75,75,76,77,76,78,77,77,78,79,78,80,79,79,80,81,80,82,81,81,82,83,82,84,83,85,83,84,60,86,61,61,86,87,86,88,87,87,88,89,88,90,89,89,90,91,90,92,91,91,92,93,92,94,93,93,94,95,95,94,96,94,97,96,96,97,98,97,99,98,98,99,100,99,101,100,100,101,102,101,103,102,102,103,104,103,105,104,104,105,106,105,107,106,106,107,84,85,84,107,110,111,4,5,4,111,160,161,162,161,163,162,162,163,164,163,165,164,164,165,166,165,167,166,166,167,168,167,169,168,168,169,170,169,171,170,170,171,172,171,173,172,173,174,172,172,174,175,174,176,175,175,176,177,176,178,177,177,178,179,178,180,179,179,180,181,180,182,181,181,182,183,182,184,183,185,183,184,160,186,161,161,186,187,186,188,187,187,188,189,188,190,189,189,190,191,190,192,191,191,192,193,192,194,193,193,194,195,194,196,195,195,196,197,197,196,198,196,199,198,198,199,200,199,201,200,200,201,202,201,203,202,202,203,204,203,205,204,204,205,206,205,207,206,206,207,184,185,184,207,10,11,210,211,210,11,216,217,218,219,218,217,222,223,216,217,216,223,226,227,222,223,222,227,230,231,226,227,226,231,234,235,230,231,230,235,234,238,235,239,235,238,238,242,239,243,239,242,242,246,243,247,243,246,246,250,247,251,247,250,250,254,251,255,251,254,254,258,255,259,255,258,259,258,110,111,110,258,210,211,262,263,262,211,263,266,262,267,262,266,266,270,267,271,267,270,270,274,271,275,271,274,274,278,275,279,275,278,278,282,279,283,279,282,282,286,283,287,283,286,218,219,286,287,286,219,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 432, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID44(GL2 gl){
float[] positionsArray = {
-98.47437f,-21.64215f,59.67298f,-114.465f,-27.39215f,61.77819f,-114.465f,-21.64215f,61.77819f,-98.47437f,-27.39215f,59.67298f,-98.47437f,-27.39215f,59.67298f,-98.47437f,-21.64215f,59.67298f,-114.465f,-27.39215f,61.77819f,-114.465f,-21.64215f,61.77819f,-130.4556f,-27.39215f,59.67298f,-130.4556f,-21.64215f,59.67298f,-130.4556f,-27.39215f,59.67298f,-130.4556f,-21.64215f,59.67298f,-83.57347f,-21.64215f,53.50083f,-83.57347f,-27.39215f,53.50083f,-83.57347f,-27.39215f,53.50083f,-83.57347f,-21.64215f,53.50083f,-145.3566f,-27.39215f,53.50083f,-145.3566f,-21.64215f,53.50083f,-145.3566f,-27.39215f,53.50083f,-145.3566f,-21.64215f,53.50083f,-70.77778f,-21.64215f,43.68234f,-70.77778f,-27.39215f,43.68234f,-70.77778f,-27.39215f,43.68234f,-70.77778f,-21.64215f,43.68234f,-158.1522f,-27.39215f,43.68234f,-158.1522f,-21.64215f,43.68234f,-158.1522f,-27.39215f,43.68234f,-158.1522f,-21.64215f,43.68234f,-60.95929f,-27.39215f,30.88665f,-60.95929f,-21.64215f,30.88665f,-60.95929f,-21.64215f,30.88665f,-60.95929f,-27.39215f,30.88665f,-167.9707f,-21.64215f,30.88665f,-167.9707f,-27.39215f,30.88665f,-167.9707f,-21.64215f,30.88665f,-167.9707f,-27.39215f,30.88665f,-54.78714f,-27.39215f,15.98575f,-54.78714f,-21.64215f,15.98575f,-54.78714f,-21.64215f,15.98575f,-54.78714f,-27.39215f,15.98575f,-174.1429f,-21.64215f,15.98575f,-174.1429f,-27.39215f,15.98575f,-174.1429f,-21.64215f,15.98575f,-174.1429f,-27.39215f,15.98575f,-52.68193f,-27.39215f,-0.004890828f,-52.68193f,-21.64215f,-0.004890828f,-52.68193f,-21.64215f,-0.004890828f,-52.68193f,-27.39215f,-0.004890828f,-176.2481f,-21.64215f,-0.004890828f,-176.2481f,-27.39215f,-0.004890828f,-176.2481f,-21.64215f,-0.004890828f,-176.2481f,-27.39215f,-0.004890828f,-54.78714f,-27.39215f,-15.99553f,-54.78714f,-21.64215f,-15.99553f,-54.78714f,-21.64215f,-15.99553f,-54.78714f,-27.39215f,-15.99553f,-174.1429f,-21.64215f,-15.99553f,-174.1429f,-27.39215f,-15.99553f,-174.1429f,-21.64215f,-15.99553f,-174.1429f,-27.39215f,-15.99553f,-60.95929f,-27.39215f,-30.89643f,-60.95929f,-21.64215f,-30.89643f,-60.95929f,-21.64215f,-30.89643f,-60.95929f,-27.39215f,-30.89643f,-167.9707f,-21.64215f,-30.89643f,-167.9707f,-27.39215f,-30.89643f,-167.9707f,-21.64215f,-30.89643f,-167.9707f,-27.39215f,-30.89643f,-70.77778f,-27.39215f,-43.69213f,-70.77778f,-21.64215f,-43.69213f,-70.77778f,-21.64215f,-43.69213f,-70.77778f,-27.39215f,-43.69213f,-158.1522f,-21.64215f,-43.69213f,-158.1522f,-27.39215f,-43.69213f,-158.1522f,-21.64215f,-43.69213f,-158.1522f,-27.39215f,-43.69213f,-83.57347f,-21.64215f,-53.51061f,-83.57347f,-27.39215f,-53.51061f,-83.57347f,-21.64215f,-53.51061f,-83.57347f,-27.39215f,-53.51061f,-145.3566f,-27.39215f,-53.51061f,-145.3566f,-21.64215f,-53.51061f,-145.3566f,-21.64215f,-53.51061f,-145.3566f,-27.39215f,-53.51061f,-98.47437f,-21.64215f,-59.68276f,-98.47437f,-27.39215f,-59.68276f,-98.47437f,-21.64215f,-59.68276f,-98.47437f,-27.39215f,-59.68276f,-130.4556f,-27.39215f,-59.68276f,-130.4556f,-21.64215f,-59.68276f,-130.4556f,-21.64215f,-59.68276f,-130.4556f,-27.39215f,-59.68276f,-114.465f,-21.64215f,-61.78797f,-114.465f,-27.39215f,-61.78797f,-114.465f,-21.64215f,-61.78797f,-114.465f,-27.39215f,-61.78797f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,2,8,9,8,2,1,12,3,0,3,12,13,9,16,17,16,9,8,20,13,12,13,20,21,17,24,25,24,17,16,20,28,21,28,20,29,32,24,33,24,32,25,29,36,28,36,29,37,40,33,41,33,40,32,37,44,36,44,37,45,48,41,49,41,48,40,45,52,44,52,45,53,56,49,57,49,56,48,53,60,52,60,53,61,64,57,65,57,64,56,61,68,60,68,61,69,72,65,73,65,72,64,68,76,77,76,68,69,80,72,73,72,80,81,77,84,85,84,77,76,88,81,80,81,88,89,85,92,93,92,85,84,93,89,88,89,93,92,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 144, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glColor4d(0.2392157, 0.4, 0.2392157, 1.0);
int[] indices = {
4,5,6,7,6,5,6,7,10,11,10,7,14,15,4,5,4,15,10,11,18,19,18,11,22,23,14,15,14,23,18,19,26,27,26,19,30,23,31,22,31,23,27,34,26,35,26,34,38,30,39,31,39,30,34,42,35,43,35,42,46,38,47,39,47,38,42,50,43,51,43,50,54,46,55,47,55,46,50,58,51,59,51,58,62,54,63,55,63,54,58,66,59,67,59,66,70,62,71,63,71,62,66,74,67,75,67,74,70,71,78,79,78,71,82,83,74,75,74,83,78,79,86,87,86,79,90,91,82,83,82,91,86,87,94,95,94,87,94,95,90,91,90,95,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 144, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID50(GL2 gl){
float[] positionsArray = {
-97.95673f,-16.14215f,61.60483f,-114.465f,-21.64215f,63.77819f,-114.465f,-16.14215f,63.77819f,-97.95673f,-21.64215f,61.60483f,-97.95673f,-21.64215f,61.60483f,-97.95673f,-16.14215f,61.60483f,-114.465f,-21.64215f,63.77819f,-114.465f,-16.14215f,63.77819f,-130.9733f,-21.64215f,61.60483f,-130.9733f,-16.14215f,61.60483f,-130.9733f,-21.64215f,61.60483f,-130.9733f,-16.14215f,61.60483f,-97.95673f,-16.14215f,-61.61462f,-114.465f,-16.14215f,-61.78797f,-114.465f,-16.14215f,-63.78797f,-98.47437f,-16.14215f,-59.68276f,-82.57347f,-16.14215f,-55.24266f,-83.57347f,-16.14215f,-53.51061f,-69.36356f,-16.14215f,-45.10634f,-70.77778f,-16.14215f,-43.69213f,-59.22724f,-16.14215f,-31.89643f,-60.95929f,-16.14215f,-30.89643f,-52.85529f,-16.14215f,-16.51317f,-54.78714f,-16.14215f,-15.99553f,-50.68193f,-16.14215f,-0.004890828f,-52.68193f,-16.14215f,-0.004890828f,-52.85529f,-16.14215f,16.50339f,-54.78714f,-16.14215f,15.98575f,-60.95929f,-16.14215f,30.88665f,-59.22724f,-16.14215f,31.88665f,-70.77778f,-16.14215f,43.68234f,-69.36356f,-16.14215f,45.09656f,-83.57347f,-16.14215f,53.50083f,-82.57347f,-16.14215f,55.23288f,-98.47437f,-16.14215f,59.67298f,-97.95673f,-16.14215f,61.60483f,-114.465f,-16.14215f,61.77819f,-114.465f,-16.14215f,63.77819f,-130.9733f,-16.14215f,-61.61462f,-130.4556f,-16.14215f,-59.68276f,-146.3566f,-16.14215f,-55.24266f,-145.3566f,-16.14215f,-53.51061f,-159.5665f,-16.14215f,-45.10634f,-158.1522f,-16.14215f,-43.69213f,-169.7028f,-16.14215f,-31.89643f,-167.9707f,-16.14215f,-30.89643f,-176.0747f,-16.14215f,-16.51317f,-174.1429f,-16.14215f,-15.99553f,-178.2481f,-16.14215f,-0.004890828f,-176.2481f,-16.14215f,-0.004890828f,-174.1429f,-16.14215f,15.98575f,-176.0747f,-16.14215f,16.50339f,-167.9707f,-16.14215f,30.88665f,-169.7028f,-16.14215f,31.88665f,-158.1522f,-16.14215f,43.68234f,-159.5665f,-16.14215f,45.09656f,-145.3566f,-16.14215f,53.50083f,-146.3566f,-16.14215f,55.23288f,-130.4556f,-16.14215f,59.67298f,-130.9733f,-16.14215f,61.60483f,-114.465f,-16.14215f,63.77819f,-114.465f,-16.14215f,61.77819f,-130.9733f,-16.14215f,61.60483f,-130.4556f,-16.14215f,59.67298f,-146.3566f,-16.14215f,55.23288f,-145.3566f,-16.14215f,53.50083f,-159.5665f,-16.14215f,45.09656f,-158.1522f,-16.14215f,43.68234f,-169.7028f,-16.14215f,31.88665f,-167.9707f,-16.14215f,30.88665f,-176.0747f,-16.14215f,16.50339f,-174.1429f,-16.14215f,15.98575f,-178.2481f,-16.14215f,-0.004890828f,-176.2481f,-16.14215f,-0.004890828f,-174.1429f,-16.14215f,-15.99553f,-176.0747f,-16.14215f,-16.51317f,-167.9707f,-16.14215f,-30.89643f,-169.7028f,-16.14215f,-31.89643f,-158.1522f,-16.14215f,-43.69213f,-159.5665f,-16.14215f,-45.10634f,-145.3566f,-16.14215f,-53.51061f,-146.3566f,-16.14215f,-55.24266f,-130.4556f,-16.14215f,-59.68276f,-130.9733f,-16.14215f,-61.61462f,-114.465f,-16.14215f,-61.78797f,-114.465f,-16.14215f,-63.78797f,-97.95673f,-16.14215f,61.60483f,-98.47437f,-16.14215f,59.67298f,-82.57347f,-16.14215f,55.23288f,-83.57347f,-16.14215f,53.50083f,-69.36356f,-16.14215f,45.09656f,-70.77778f,-16.14215f,43.68234f,-59.22724f,-16.14215f,31.88665f,-60.95929f,-16.14215f,30.88665f,-52.85529f,-16.14215f,16.50339f,-54.78714f,-16.14215f,15.98575f,-52.68193f,-16.14215f,-0.004890828f,-50.68193f,-16.14215f,-0.004890828f,-54.78714f,-16.14215f,-15.99553f,-52.85529f,-16.14215f,-16.51317f,-60.95929f,-16.14215f,-30.89643f,-59.22724f,-16.14215f,-31.89643f,-70.77778f,-16.14215f,-43.69213f,-69.36356f,-16.14215f,-45.10634f,-83.57347f,-16.14215f,-53.51061f,-82.57347f,-16.14215f,-55.24266f,-98.47437f,-16.14215f,-59.68276f,-97.95673f,-16.14215f,-61.61462f,-82.57347f,-16.14215f,55.23288f,-82.57347f,-21.64215f,55.23288f,-82.57347f,-21.64215f,55.23288f,-82.57347f,-16.14215f,55.23288f,-130.9733f,-21.64215f,-61.61462f,-114.465f,-21.64215f,-61.78797f,-114.465f,-21.64215f,-63.78797f,-130.4556f,-21.64215f,-59.68276f,-146.3566f,-21.64215f,-55.24266f,-145.3566f,-21.64215f,-53.51061f,-159.5665f,-21.64215f,-45.10634f,-158.1522f,-21.64215f,-43.69213f,-169.7028f,-21.64215f,-31.89643f,-167.9707f,-21.64215f,-30.89643f,-176.0747f,-21.64215f,-16.51317f,-174.1429f,-21.64215f,-15.99553f,-178.2481f,-21.64215f,-0.004890828f,-176.2481f,-21.64215f,-0.004890828f,-174.1429f,-21.64215f,15.98575f,-176.0747f,-21.64215f,16.50339f,-167.9707f,-21.64215f,30.88665f,-169.7028f,-21.64215f,31.88665f,-158.1522f,-21.64215f,43.68234f,-159.5665f,-21.64215f,45.09656f,-145.3566f,-21.64215f,53.50083f,-146.3566f,-21.64215f,55.23288f,-130.4556f,-21.64215f,59.67298f,-130.9733f,-21.64215f,61.60483f,-114.465f,-21.64215f,61.77819f,-114.465f,-21.64215f,63.77819f,-97.95673f,-21.64215f,-61.61462f,-98.47437f,-21.64215f,-59.68276f,-82.57347f,-21.64215f,-55.24266f,-83.57347f,-21.64215f,-53.51061f,-69.36356f,-21.64215f,-45.10634f,-70.77778f,-21.64215f,-43.69213f,-59.22724f,-21.64215f,-31.89643f,-60.95929f,-21.64215f,-30.89643f,-52.85529f,-21.64215f,-16.51317f,-54.78714f,-21.64215f,-15.99553f,-50.68193f,-21.64215f,-0.004890828f,-52.68193f,-21.64215f,-0.004890828f,-54.78714f,-21.64215f,15.98575f,-52.85529f,-21.64215f,16.50339f,-60.95929f,-21.64215f,30.88665f,-59.22724f,-21.64215f,31.88665f,-70.77778f,-21.64215f,43.68234f,-69.36356f,-21.64215f,45.09656f,-83.57347f,-21.64215f,53.50083f,-82.57347f,-21.64215f,55.23288f,-98.47437f,-21.64215f,59.67298f,-97.95673f,-21.64215f,61.60483f,-114.465f,-21.64215f,63.77819f,-114.465f,-21.64215f,61.77819f,-97.95673f,-21.64215f,61.60483f,-98.47437f,-21.64215f,59.67298f,-82.57347f,-21.64215f,55.23288f,-83.57347f,-21.64215f,53.50083f,-69.36356f,-21.64215f,45.09656f,-70.77778f,-21.64215f,43.68234f,-59.22724f,-21.64215f,31.88665f,-60.95929f,-21.64215f,30.88665f,-52.85529f,-21.64215f,16.50339f,-54.78714f,-21.64215f,15.98575f,-50.68193f,-21.64215f,-0.004890828f,-52.68193f,-21.64215f,-0.004890828f,-54.78714f,-21.64215f,-15.99553f,-52.85529f,-21.64215f,-16.51317f,-60.95929f,-21.64215f,-30.89643f,-59.22724f,-21.64215f,-31.89643f,-70.77778f,-21.64215f,-43.69213f,-69.36356f,-21.64215f,-45.10634f,-83.57347f,-21.64215f,-53.51061f,-82.57347f,-21.64215f,-55.24266f,-98.47437f,-21.64215f,-59.68276f,-97.95673f,-21.64215f,-61.61462f,-114.465f,-21.64215f,-61.78797f,-114.465f,-21.64215f,-63.78797f,-130.9733f,-21.64215f,61.60483f,-130.4556f,-21.64215f,59.67298f,-146.3566f,-21.64215f,55.23288f,-145.3566f,-21.64215f,53.50083f,-159.5665f,-21.64215f,45.09656f,-158.1522f,-21.64215f,43.68234f,-169.7028f,-21.64215f,31.88665f,-167.9707f,-21.64215f,30.88665f,-176.0747f,-21.64215f,16.50339f,-174.1429f,-21.64215f,15.98575f,-178.2481f,-21.64215f,-0.004890828f,-176.2481f,-21.64215f,-0.004890828f,-174.1429f,-21.64215f,-15.99553f,-176.0747f,-21.64215f,-16.51317f,-167.9707f,-21.64215f,-30.89643f,-169.7028f,-21.64215f,-31.89643f,-158.1522f,-21.64215f,-43.69213f,-159.5665f,-21.64215f,-45.10634f,-145.3566f,-21.64215f,-53.51061f,-146.3566f,-21.64215f,-55.24266f,-130.4556f,-21.64215f,-59.68276f,-130.9733f,-21.64215f,-61.61462f,-146.3566f,-21.64215f,55.23288f,-146.3566f,-16.14215f,55.23288f,-146.3566f,-21.64215f,55.23288f,-146.3566f,-16.14215f,55.23288f,-52.85529f,-16.14215f,-16.51317f,-59.22724f,-21.64215f,-31.89643f,-52.85529f,-21.64215f,-16.51317f,-59.22724f,-16.14215f,-31.89643f,-59.22724f,-16.14215f,-31.89643f,-52.85529f,-16.14215f,-16.51317f,-59.22724f,-21.64215f,-31.89643f,-52.85529f,-21.64215f,-16.51317f,-50.68193f,-16.14215f,-0.004890828f,-50.68193f,-21.64215f,-0.004890828f,-50.68193f,-16.14215f,-0.004890828f,-50.68193f,-21.64215f,-0.004890828f,-52.85529f,-16.14215f,16.50339f,-52.85529f,-21.64215f,16.50339f,-52.85529f,-16.14215f,16.50339f,-52.85529f,-21.64215f,16.50339f,-59.22724f,-16.14215f,31.88665f,-59.22724f,-21.64215f,31.88665f,-59.22724f,-16.14215f,31.88665f,-59.22724f,-21.64215f,31.88665f,-69.36356f,-16.14215f,45.09656f,-69.36356f,-21.64215f,45.09656f,-69.36356f,-16.14215f,45.09656f,-69.36356f,-21.64215f,45.09656f,-159.5665f,-21.64215f,45.09656f,-159.5665f,-16.14215f,45.09656f,-159.5665f,-21.64215f,45.09656f,-159.5665f,-16.14215f,45.09656f,-169.7028f,-16.14215f,31.88665f,-169.7028f,-21.64215f,31.88665f,-169.7028f,-16.14215f,31.88665f,-169.7028f,-21.64215f,31.88665f,-176.0747f,-16.14215f,16.50339f,-176.0747f,-21.64215f,16.50339f,-176.0747f,-16.14215f,16.50339f,-176.0747f,-21.64215f,16.50339f,-178.2481f,-16.14215f,-0.004890828f,-178.2481f,-21.64215f,-0.004890828f,-178.2481f,-16.14215f,-0.004890828f,-178.2481f,-21.64215f,-0.004890828f,-176.0747f,-16.14215f,-16.51317f,-176.0747f,-21.64215f,-16.51317f,-176.0747f,-16.14215f,-16.51317f,-176.0747f,-21.64215f,-16.51317f,-169.7028f,-16.14215f,-31.89643f,-169.7028f,-21.64215f,-31.89643f,-169.7028f,-16.14215f,-31.89643f,-169.7028f,-21.64215f,-31.89643f,-159.5665f,-16.14215f,-45.10634f,-159.5665f,-21.64215f,-45.10634f,-159.5665f,-16.14215f,-45.10634f,-159.5665f,-21.64215f,-45.10634f,-146.3566f,-21.64215f,-55.24266f,-146.3566f,-16.14215f,-55.24266f,-146.3566f,-16.14215f,-55.24266f,-146.3566f,-21.64215f,-55.24266f,-130.9733f,-21.64215f,-61.61462f,-130.9733f,-16.14215f,-61.61462f,-130.9733f,-16.14215f,-61.61462f,-130.9733f,-21.64215f,-61.61462f,-114.465f,-21.64215f,-63.78797f,-114.465f,-16.14215f,-63.78797f,-114.465f,-16.14215f,-63.78797f,-114.465f,-21.64215f,-63.78797f,-97.95673f,-21.64215f,-61.61462f,-97.95673f,-16.14215f,-61.61462f,-97.95673f,-16.14215f,-61.61462f,-97.95673f,-21.64215f,-61.61462f,-82.57347f,-21.64215f,-55.24266f,-82.57347f,-16.14215f,-55.24266f,-82.57347f,-16.14215f,-55.24266f,-82.57347f,-21.64215f,-55.24266f,-69.36356f,-21.64215f,-45.10634f,-69.36356f,-16.14215f,-45.10634f,-69.36356f,-16.14215f,-45.10634f,-69.36356f,-21.64215f,-45.10634f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,2,8,9,8,2,1,12,13,14,13,12,15,15,12,16,15,16,17,17,16,18,17,18,19,19,18,20,19,20,21,21,20,22,21,22,23,23,22,24,23,24,25,25,24,26,25,26,27,27,26,28,28,26,29,28,29,30,30,29,31,30,31,32,32,31,33,32,33,34,34,33,35,34,35,36,36,35,37,13,38,14,38,13,39,38,39,40,40,39,41,40,41,42,42,41,43,42,43,44,44,43,45,44,45,46,46,45,47,46,47,48,48,47,49,48,49,50,48,50,51,51,50,52,51,52,53,53,52,54,53,54,55,55,54,56,55,56,57,57,56,58,57,58,59,59,58,36,59,36,37,108,3,0,3,108,109,112,113,114,113,112,115,115,112,116,115,116,117,117,116,118,117,118,119,119,118,120,119,120,121,121,120,122,121,122,123,123,122,124,123,124,125,125,124,126,126,124,127,126,127,128,128,127,129,128,129,130,130,129,131,130,131,132,132,131,133,132,133,134,134,133,135,134,135,136,136,135,137,113,138,114,138,113,139,138,139,140,140,139,141,140,141,142,142,141,143,142,143,144,144,143,145,144,145,146,146,145,147,146,147,148,148,147,149,148,149,150,148,150,151,151,150,152,151,152,153,153,152,154,153,154,155,155,154,156,155,156,157,157,156,158,157,158,159,159,158,136,159,136,137,9,208,209,208,9,8,212,213,214,213,212,215,220,214,221,214,220,212,224,221,225,221,224,220,228,225,229,225,228,224,232,229,233,229,232,228,232,109,108,109,232,233,209,236,237,236,209,208,240,236,241,236,240,237,244,241,245,241,244,240,248,245,249,245,248,244,252,249,253,249,252,248,256,253,257,253,256,252,260,257,261,257,260,256,264,260,261,260,264,265,268,265,264,265,268,269,272,269,268,269,272,273,276,273,272,273,276,277,280,277,276,277,280,281,284,281,280,281,284,285,215,284,213,284,215,285,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 432, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glColor4d(0.8, 0.8, 0.1568627, 1.0);
int[] indices = {
4,5,6,7,6,5,6,7,10,11,10,7,60,61,62,61,63,62,62,63,64,63,65,64,64,65,66,65,67,66,66,67,68,67,69,68,68,69,70,69,71,70,70,71,72,71,73,72,73,74,72,72,74,75,74,76,75,75,76,77,76,78,77,77,78,79,78,80,79,79,80,81,80,82,81,81,82,83,82,84,83,85,83,84,60,86,61,61,86,87,86,88,87,87,88,89,88,90,89,89,90,91,90,92,91,91,92,93,92,94,93,93,94,95,95,94,96,94,97,96,96,97,98,97,99,98,98,99,100,99,101,100,100,101,102,101,103,102,102,103,104,103,105,104,104,105,106,105,107,106,106,107,84,85,84,107,110,111,4,5,4,111,160,161,162,161,163,162,162,163,164,163,165,164,164,165,166,165,167,166,166,167,168,167,169,168,168,169,170,169,171,170,170,171,172,171,173,172,173,174,172,172,174,175,174,176,175,175,176,177,176,178,177,177,178,179,178,180,179,179,180,181,180,182,181,181,182,183,182,184,183,185,183,184,160,186,161,161,186,187,186,188,187,187,188,189,188,190,189,189,190,191,190,192,191,191,192,193,192,194,193,193,194,195,194,196,195,195,196,197,197,196,198,196,199,198,198,199,200,199,201,200,200,201,202,201,203,202,202,203,204,203,205,204,204,205,206,205,207,206,206,207,184,185,184,207,10,11,210,211,210,11,216,217,218,219,218,217,217,222,219,223,219,222,222,226,223,227,223,226,226,230,227,231,227,230,230,234,231,235,231,234,235,234,110,111,110,234,210,211,238,239,238,211,239,242,238,243,238,242,242,246,243,247,243,246,246,250,247,251,247,250,250,254,251,255,251,254,254,258,255,259,255,258,258,262,259,263,259,262,266,267,262,263,262,267,270,271,266,267,266,271,274,275,270,271,270,275,278,279,274,275,274,279,282,283,278,279,278,283,286,287,282,283,282,287,286,216,287,218,287,216,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 432, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID56(GL2 gl){
float[] positionsArray = {
-97.95673f,-2.142154f,61.60483f,-114.465f,-7.642154f,63.77819f,-114.465f,-2.142154f,63.77819f,-97.95673f,-7.642154f,61.60483f,-97.95673f,-7.642154f,61.60483f,-97.95673f,-2.142154f,61.60483f,-114.465f,-7.642154f,63.77819f,-114.465f,-2.142154f,63.77819f,-130.9733f,-7.642154f,61.60483f,-130.9733f,-2.142154f,61.60483f,-130.9733f,-7.642154f,61.60483f,-130.9733f,-2.142154f,61.60483f,-97.95673f,-2.142154f,-61.61462f,-114.465f,-2.142154f,-61.78797f,-114.465f,-2.142154f,-63.78797f,-98.47437f,-2.142154f,-59.68276f,-82.57347f,-2.142154f,-55.24266f,-83.57347f,-2.142154f,-53.51061f,-69.36356f,-2.142154f,-45.10634f,-70.77778f,-2.142154f,-43.69213f,-59.22724f,-2.142154f,-31.89643f,-60.95929f,-2.142154f,-30.89643f,-52.85529f,-2.142154f,-16.51317f,-54.78714f,-2.142154f,-15.99553f,-50.68193f,-2.142154f,-0.004890828f,-52.68193f,-2.142154f,-0.004890828f,-52.85529f,-2.142154f,16.50339f,-54.78714f,-2.142154f,15.98575f,-60.95929f,-2.142154f,30.88665f,-59.22724f,-2.142154f,31.88665f,-70.77778f,-2.142154f,43.68234f,-69.36356f,-2.142154f,45.09656f,-83.57347f,-2.142154f,53.50083f,-82.57347f,-2.142154f,55.23288f,-98.47437f,-2.142154f,59.67298f,-97.95673f,-2.142154f,61.60483f,-114.465f,-2.142154f,61.77819f,-114.465f,-2.142154f,63.77819f,-130.9733f,-2.142154f,-61.61462f,-130.4556f,-2.142154f,-59.68276f,-146.3566f,-2.142154f,-55.24266f,-145.3566f,-2.142154f,-53.51061f,-159.5665f,-2.142154f,-45.10634f,-158.1522f,-2.142154f,-43.69213f,-169.7028f,-2.142154f,-31.89643f,-167.9707f,-2.142154f,-30.89643f,-176.0747f,-2.142154f,-16.51317f,-174.1429f,-2.142154f,-15.99553f,-178.2481f,-2.142154f,-0.004890828f,-176.2481f,-2.142154f,-0.004890828f,-174.1429f,-2.142154f,15.98575f,-176.0747f,-2.142154f,16.50339f,-167.9707f,-2.142154f,30.88665f,-169.7028f,-2.142154f,31.88665f,-158.1522f,-2.142154f,43.68234f,-159.5665f,-2.142154f,45.09656f,-145.3566f,-2.142154f,53.50083f,-146.3566f,-2.142154f,55.23288f,-130.4556f,-2.142154f,59.67298f,-130.9733f,-2.142154f,61.60483f,-114.465f,-2.142154f,63.77819f,-114.465f,-2.142154f,61.77819f,-130.9733f,-2.142154f,61.60483f,-130.4556f,-2.142154f,59.67298f,-146.3566f,-2.142154f,55.23288f,-145.3566f,-2.142154f,53.50083f,-159.5665f,-2.142154f,45.09656f,-158.1522f,-2.142154f,43.68234f,-169.7028f,-2.142154f,31.88665f,-167.9707f,-2.142154f,30.88665f,-176.0747f,-2.142154f,16.50339f,-174.1429f,-2.142154f,15.98575f,-178.2481f,-2.142154f,-0.004890828f,-176.2481f,-2.142154f,-0.004890828f,-174.1429f,-2.142154f,-15.99553f,-176.0747f,-2.142154f,-16.51317f,-167.9707f,-2.142154f,-30.89643f,-169.7028f,-2.142154f,-31.89643f,-158.1522f,-2.142154f,-43.69213f,-159.5665f,-2.142154f,-45.10634f,-145.3566f,-2.142154f,-53.51061f,-146.3566f,-2.142154f,-55.24266f,-130.4556f,-2.142154f,-59.68276f,-130.9733f,-2.142154f,-61.61462f,-114.465f,-2.142154f,-61.78797f,-114.465f,-2.142154f,-63.78797f,-97.95673f,-2.142154f,61.60483f,-98.47437f,-2.142154f,59.67298f,-82.57347f,-2.142154f,55.23288f,-83.57347f,-2.142154f,53.50083f,-69.36356f,-2.142154f,45.09656f,-70.77778f,-2.142154f,43.68234f,-59.22724f,-2.142154f,31.88665f,-60.95929f,-2.142154f,30.88665f,-52.85529f,-2.142154f,16.50339f,-54.78714f,-2.142154f,15.98575f,-52.68193f,-2.142154f,-0.004890828f,-50.68193f,-2.142154f,-0.004890828f,-54.78714f,-2.142154f,-15.99553f,-52.85529f,-2.142154f,-16.51317f,-60.95929f,-2.142154f,-30.89643f,-59.22724f,-2.142154f,-31.89643f,-70.77778f,-2.142154f,-43.69213f,-69.36356f,-2.142154f,-45.10634f,-83.57347f,-2.142154f,-53.51061f,-82.57347f,-2.142154f,-55.24266f,-98.47437f,-2.142154f,-59.68276f,-97.95673f,-2.142154f,-61.61462f,-82.57347f,-2.142154f,55.23288f,-82.57347f,-7.642154f,55.23288f,-82.57347f,-7.642154f,55.23288f,-82.57347f,-2.142154f,55.23288f,-130.9733f,-7.642154f,-61.61462f,-114.465f,-7.642154f,-61.78797f,-114.465f,-7.642154f,-63.78797f,-130.4556f,-7.642154f,-59.68276f,-146.3566f,-7.642154f,-55.24266f,-145.3566f,-7.642154f,-53.51061f,-159.5665f,-7.642154f,-45.10634f,-158.1522f,-7.642154f,-43.69213f,-169.7028f,-7.642154f,-31.89643f,-167.9707f,-7.642154f,-30.89643f,-176.0747f,-7.642154f,-16.51317f,-174.1429f,-7.642154f,-15.99553f,-178.2481f,-7.642154f,-0.004890828f,-176.2481f,-7.642154f,-0.004890828f,-174.1429f,-7.642154f,15.98575f,-176.0747f,-7.642154f,16.50339f,-167.9707f,-7.642154f,30.88665f,-169.7028f,-7.642154f,31.88665f,-158.1522f,-7.642154f,43.68234f,-159.5665f,-7.642154f,45.09656f,-145.3566f,-7.642154f,53.50083f,-146.3566f,-7.642154f,55.23288f,-130.4556f,-7.642154f,59.67298f,-130.9733f,-7.642154f,61.60483f,-114.465f,-7.642154f,61.77819f,-114.465f,-7.642154f,63.77819f,-97.95673f,-7.642154f,-61.61462f,-98.47437f,-7.642154f,-59.68276f,-82.57347f,-7.642154f,-55.24266f,-83.57347f,-7.642154f,-53.51061f,-69.36356f,-7.642154f,-45.10634f,-70.77778f,-7.642154f,-43.69213f,-59.22724f,-7.642154f,-31.89643f,-60.95929f,-7.642154f,-30.89643f,-52.85529f,-7.642154f,-16.51317f,-54.78714f,-7.642154f,-15.99553f,-50.68193f,-7.642154f,-0.004890828f,-52.68193f,-7.642154f,-0.004890828f,-54.78714f,-7.642154f,15.98575f,-52.85529f,-7.642154f,16.50339f,-60.95929f,-7.642154f,30.88665f,-59.22724f,-7.642154f,31.88665f,-70.77778f,-7.642154f,43.68234f,-69.36356f,-7.642154f,45.09656f,-83.57347f,-7.642154f,53.50083f,-82.57347f,-7.642154f,55.23288f,-98.47437f,-7.642154f,59.67298f,-97.95673f,-7.642154f,61.60483f,-114.465f,-7.642154f,63.77819f,-114.465f,-7.642154f,61.77819f,-97.95673f,-7.642154f,61.60483f,-98.47437f,-7.642154f,59.67298f,-82.57347f,-7.642154f,55.23288f,-83.57347f,-7.642154f,53.50083f,-69.36356f,-7.642154f,45.09656f,-70.77778f,-7.642154f,43.68234f,-59.22724f,-7.642154f,31.88665f,-60.95929f,-7.642154f,30.88665f,-52.85529f,-7.642154f,16.50339f,-54.78714f,-7.642154f,15.98575f,-50.68193f,-7.642154f,-0.004890828f,-52.68193f,-7.642154f,-0.004890828f,-54.78714f,-7.642154f,-15.99553f,-52.85529f,-7.642154f,-16.51317f,-60.95929f,-7.642154f,-30.89643f,-59.22724f,-7.642154f,-31.89643f,-70.77778f,-7.642154f,-43.69213f,-69.36356f,-7.642154f,-45.10634f,-83.57347f,-7.642154f,-53.51061f,-82.57347f,-7.642154f,-55.24266f,-98.47437f,-7.642154f,-59.68276f,-97.95673f,-7.642154f,-61.61462f,-114.465f,-7.642154f,-61.78797f,-114.465f,-7.642154f,-63.78797f,-130.9733f,-7.642154f,61.60483f,-130.4556f,-7.642154f,59.67298f,-146.3566f,-7.642154f,55.23288f,-145.3566f,-7.642154f,53.50083f,-159.5665f,-7.642154f,45.09656f,-158.1522f,-7.642154f,43.68234f,-169.7028f,-7.642154f,31.88665f,-167.9707f,-7.642154f,30.88665f,-176.0747f,-7.642154f,16.50339f,-174.1429f,-7.642154f,15.98575f,-178.2481f,-7.642154f,-0.004890828f,-176.2481f,-7.642154f,-0.004890828f,-174.1429f,-7.642154f,-15.99553f,-176.0747f,-7.642154f,-16.51317f,-167.9707f,-7.642154f,-30.89643f,-169.7028f,-7.642154f,-31.89643f,-158.1522f,-7.642154f,-43.69213f,-159.5665f,-7.642154f,-45.10634f,-145.3566f,-7.642154f,-53.51061f,-146.3566f,-7.642154f,-55.24266f,-130.4556f,-7.642154f,-59.68276f,-130.9733f,-7.642154f,-61.61462f,-146.3566f,-7.642154f,55.23288f,-146.3566f,-2.142154f,55.23288f,-146.3566f,-7.642154f,55.23288f,-146.3566f,-2.142154f,55.23288f,-169.7028f,-2.142154f,31.88665f,-159.5665f,-7.642154f,45.09656f,-169.7028f,-7.642154f,31.88665f,-159.5665f,-2.142154f,45.09656f,-159.5665f,-2.142154f,45.09656f,-169.7028f,-2.142154f,31.88665f,-159.5665f,-7.642154f,45.09656f,-169.7028f,-7.642154f,31.88665f,-176.0747f,-2.142154f,16.50339f,-176.0747f,-7.642154f,16.50339f,-176.0747f,-2.142154f,16.50339f,-176.0747f,-7.642154f,16.50339f,-178.2481f,-2.142154f,-0.004890828f,-178.2481f,-7.642154f,-0.004890828f,-178.2481f,-2.142154f,-0.004890828f,-178.2481f,-7.642154f,-0.004890828f,-176.0747f,-2.142154f,-16.51317f,-176.0747f,-7.642154f,-16.51317f,-176.0747f,-2.142154f,-16.51317f,-176.0747f,-7.642154f,-16.51317f,-169.7028f,-2.142154f,-31.89643f,-169.7028f,-7.642154f,-31.89643f,-169.7028f,-2.142154f,-31.89643f,-169.7028f,-7.642154f,-31.89643f,-159.5665f,-2.142154f,-45.10634f,-159.5665f,-7.642154f,-45.10634f,-159.5665f,-2.142154f,-45.10634f,-159.5665f,-7.642154f,-45.10634f,-146.3566f,-7.642154f,-55.24266f,-146.3566f,-2.142154f,-55.24266f,-146.3566f,-2.142154f,-55.24266f,-146.3566f,-7.642154f,-55.24266f,-130.9733f,-7.642154f,-61.61462f,-130.9733f,-2.142154f,-61.61462f,-130.9733f,-2.142154f,-61.61462f,-130.9733f,-7.642154f,-61.61462f,-114.465f,-7.642154f,-63.78797f,-114.465f,-2.142154f,-63.78797f,-114.465f,-2.142154f,-63.78797f,-114.465f,-7.642154f,-63.78797f,-97.95673f,-7.642154f,-61.61462f,-97.95673f,-2.142154f,-61.61462f,-97.95673f,-2.142154f,-61.61462f,-97.95673f,-7.642154f,-61.61462f,-82.57347f,-7.642154f,-55.24266f,-82.57347f,-2.142154f,-55.24266f,-82.57347f,-2.142154f,-55.24266f,-82.57347f,-7.642154f,-55.24266f,-69.36356f,-7.642154f,-45.10634f,-69.36356f,-2.142154f,-45.10634f,-69.36356f,-2.142154f,-45.10634f,-69.36356f,-7.642154f,-45.10634f,-59.22724f,-2.142154f,-31.89643f,-59.22724f,-7.642154f,-31.89643f,-59.22724f,-2.142154f,-31.89643f,-59.22724f,-7.642154f,-31.89643f,-52.85529f,-2.142154f,-16.51317f,-52.85529f,-7.642154f,-16.51317f,-52.85529f,-2.142154f,-16.51317f,-52.85529f,-7.642154f,-16.51317f,-50.68193f,-2.142154f,-0.004890828f,-50.68193f,-7.642154f,-0.004890828f,-50.68193f,-2.142154f,-0.004890828f,-50.68193f,-7.642154f,-0.004890828f,-52.85529f,-2.142154f,16.50339f,-52.85529f,-7.642154f,16.50339f,-52.85529f,-2.142154f,16.50339f,-52.85529f,-7.642154f,16.50339f,-59.22724f,-2.142154f,31.88665f,-59.22724f,-7.642154f,31.88665f,-59.22724f,-2.142154f,31.88665f,-59.22724f,-7.642154f,31.88665f,-69.36356f,-2.142154f,45.09656f,-69.36356f,-7.642154f,45.09656f,-69.36356f,-2.142154f,45.09656f,-69.36356f,-7.642154f,45.09656f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,2,8,9,8,2,1,12,13,14,13,12,15,15,12,16,15,16,17,17,16,18,17,18,19,19,18,20,19,20,21,21,20,22,21,22,23,23,22,24,23,24,25,25,24,26,25,26,27,27,26,28,28,26,29,28,29,30,30,29,31,30,31,32,32,31,33,32,33,34,34,33,35,34,35,36,36,35,37,13,38,14,38,13,39,38,39,40,40,39,41,40,41,42,42,41,43,42,43,44,44,43,45,44,45,46,46,45,47,46,47,48,48,47,49,48,49,50,48,50,51,51,50,52,51,52,53,53,52,54,53,54,55,55,54,56,55,56,57,57,56,58,57,58,59,59,58,36,59,36,37,108,3,0,3,108,109,112,113,114,113,112,115,115,112,116,115,116,117,117,116,118,117,118,119,119,118,120,119,120,121,121,120,122,121,122,123,123,122,124,123,124,125,125,124,126,126,124,127,126,127,128,128,127,129,128,129,130,130,129,131,130,131,132,132,131,133,132,133,134,134,133,135,134,135,136,136,135,137,113,138,114,138,113,139,138,139,140,140,139,141,140,141,142,142,141,143,142,143,144,144,143,145,144,145,146,146,145,147,146,147,148,148,147,149,148,149,150,148,150,151,151,150,152,151,152,153,153,152,154,153,154,155,155,154,156,155,156,157,157,156,158,157,158,159,159,158,136,159,136,137,9,208,209,208,9,8,212,213,214,213,212,215,220,214,221,214,220,212,224,221,225,221,224,220,228,225,229,225,228,224,232,229,233,229,232,228,236,233,237,233,236,232,240,236,237,236,240,241,244,241,240,241,244,245,248,245,244,245,248,249,252,249,248,249,252,253,256,253,252,253,256,257,260,257,256,257,260,261,264,260,265,260,264,261,268,265,269,265,268,264,272,269,273,269,272,268,276,273,277,273,276,272,280,277,281,277,280,276,284,281,285,281,284,280,284,109,108,109,284,285,209,213,215,213,209,208,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 432, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glColor4d(0.8, 0.8, 0.1568627, 1.0);
int[] indices = {
4,5,6,7,6,5,6,7,10,11,10,7,60,61,62,61,63,62,62,63,64,63,65,64,64,65,66,65,67,66,66,67,68,67,69,68,68,69,70,69,71,70,70,71,72,71,73,72,73,74,72,72,74,75,74,76,75,75,76,77,76,78,77,77,78,79,78,80,79,79,80,81,80,82,81,81,82,83,82,84,83,85,83,84,60,86,61,61,86,87,86,88,87,87,88,89,88,90,89,89,90,91,90,92,91,91,92,93,92,94,93,93,94,95,95,94,96,94,97,96,96,97,98,97,99,98,98,99,100,99,101,100,100,101,102,101,103,102,102,103,104,103,105,104,104,105,106,105,107,106,106,107,84,85,84,107,110,111,4,5,4,111,160,161,162,161,163,162,162,163,164,163,165,164,164,165,166,165,167,166,166,167,168,167,169,168,168,169,170,169,171,170,170,171,172,171,173,172,173,174,172,172,174,175,174,176,175,175,176,177,176,178,177,177,178,179,178,180,179,179,180,181,180,182,181,181,182,183,182,184,183,185,183,184,160,186,161,161,186,187,186,188,187,187,188,189,188,190,189,189,190,191,190,192,191,191,192,193,192,194,193,193,194,195,194,196,195,195,196,197,197,196,198,196,199,198,198,199,200,199,201,200,200,201,202,201,203,202,202,203,204,203,205,204,204,205,206,205,207,206,206,207,184,185,184,207,10,11,210,211,210,11,216,217,218,219,218,217,217,222,219,223,219,222,222,226,223,227,223,226,226,230,227,231,227,230,230,234,231,235,231,234,234,238,235,239,235,238,242,243,238,239,238,243,246,247,242,243,242,247,250,251,246,247,246,251,254,255,250,251,250,255,258,259,254,255,254,259,262,263,258,259,258,263,262,266,263,267,263,266,266,270,267,271,267,270,270,274,271,275,271,274,274,278,275,279,275,278,278,282,279,283,279,282,282,286,283,287,283,286,287,286,110,111,110,286,210,211,218,216,218,211,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 432, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID62(GL2 gl){
float[] positionsArray = {
-97.95673f,12.35785f,61.60483f,-114.465f,6.857846f,63.77819f,-114.465f,12.35785f,63.77819f,-97.95673f,6.857846f,61.60483f,-97.95673f,6.857846f,61.60483f,-97.95673f,12.35785f,61.60483f,-114.465f,6.857846f,63.77819f,-114.465f,12.35785f,63.77819f,-130.9733f,6.857846f,61.60483f,-130.9733f,12.35785f,61.60483f,-130.9733f,6.857846f,61.60483f,-130.9733f,12.35785f,61.60483f,-97.95673f,12.35785f,-61.61462f,-114.465f,12.35785f,-61.78797f,-114.465f,12.35785f,-63.78797f,-98.47437f,12.35785f,-59.68276f,-82.57347f,12.35785f,-55.24266f,-83.57347f,12.35785f,-53.51061f,-69.36356f,12.35785f,-45.10634f,-70.77778f,12.35785f,-43.69213f,-59.22724f,12.35785f,-31.89643f,-60.95929f,12.35785f,-30.89643f,-52.85529f,12.35785f,-16.51317f,-54.78714f,12.35785f,-15.99553f,-50.68193f,12.35785f,-0.004890828f,-52.68193f,12.35785f,-0.004890828f,-52.85529f,12.35785f,16.50339f,-54.78714f,12.35785f,15.98575f,-60.95929f,12.35785f,30.88665f,-59.22724f,12.35785f,31.88665f,-70.77778f,12.35785f,43.68234f,-69.36356f,12.35785f,45.09656f,-83.57347f,12.35785f,53.50083f,-82.57347f,12.35785f,55.23288f,-98.47437f,12.35785f,59.67298f,-97.95673f,12.35785f,61.60483f,-114.465f,12.35785f,61.77819f,-114.465f,12.35785f,63.77819f,-130.9733f,12.35785f,-61.61462f,-130.4556f,12.35785f,-59.68276f,-146.3566f,12.35785f,-55.24266f,-145.3566f,12.35785f,-53.51061f,-159.5665f,12.35785f,-45.10634f,-158.1522f,12.35785f,-43.69213f,-169.7028f,12.35785f,-31.89643f,-167.9707f,12.35785f,-30.89643f,-176.0747f,12.35785f,-16.51317f,-174.1429f,12.35785f,-15.99553f,-178.2481f,12.35785f,-0.004890828f,-176.2481f,12.35785f,-0.004890828f,-174.1429f,12.35785f,15.98575f,-176.0747f,12.35785f,16.50339f,-167.9707f,12.35785f,30.88665f,-169.7028f,12.35785f,31.88665f,-158.1522f,12.35785f,43.68234f,-159.5665f,12.35785f,45.09656f,-145.3566f,12.35785f,53.50083f,-146.3566f,12.35785f,55.23288f,-130.4556f,12.35785f,59.67298f,-130.9733f,12.35785f,61.60483f,-114.465f,12.35785f,63.77819f,-114.465f,12.35785f,61.77819f,-130.9733f,12.35785f,61.60483f,-130.4556f,12.35785f,59.67298f,-146.3566f,12.35785f,55.23288f,-145.3566f,12.35785f,53.50083f,-159.5665f,12.35785f,45.09656f,-158.1522f,12.35785f,43.68234f,-169.7028f,12.35785f,31.88665f,-167.9707f,12.35785f,30.88665f,-176.0747f,12.35785f,16.50339f,-174.1429f,12.35785f,15.98575f,-178.2481f,12.35785f,-0.004890828f,-176.2481f,12.35785f,-0.004890828f,-174.1429f,12.35785f,-15.99553f,-176.0747f,12.35785f,-16.51317f,-167.9707f,12.35785f,-30.89643f,-169.7028f,12.35785f,-31.89643f,-158.1522f,12.35785f,-43.69213f,-159.5665f,12.35785f,-45.10634f,-145.3566f,12.35785f,-53.51061f,-146.3566f,12.35785f,-55.24266f,-130.4556f,12.35785f,-59.68276f,-130.9733f,12.35785f,-61.61462f,-114.465f,12.35785f,-61.78797f,-114.465f,12.35785f,-63.78797f,-97.95673f,12.35785f,61.60483f,-98.47437f,12.35785f,59.67298f,-82.57347f,12.35785f,55.23288f,-83.57347f,12.35785f,53.50083f,-69.36356f,12.35785f,45.09656f,-70.77778f,12.35785f,43.68234f,-59.22724f,12.35785f,31.88665f,-60.95929f,12.35785f,30.88665f,-52.85529f,12.35785f,16.50339f,-54.78714f,12.35785f,15.98575f,-52.68193f,12.35785f,-0.004890828f,-50.68193f,12.35785f,-0.004890828f,-54.78714f,12.35785f,-15.99553f,-52.85529f,12.35785f,-16.51317f,-60.95929f,12.35785f,-30.89643f,-59.22724f,12.35785f,-31.89643f,-70.77778f,12.35785f,-43.69213f,-69.36356f,12.35785f,-45.10634f,-83.57347f,12.35785f,-53.51061f,-82.57347f,12.35785f,-55.24266f,-98.47437f,12.35785f,-59.68276f,-97.95673f,12.35785f,-61.61462f,-82.57347f,12.35785f,55.23288f,-82.57347f,6.857846f,55.23288f,-82.57347f,6.857846f,55.23288f,-82.57347f,12.35785f,55.23288f,-130.9733f,6.857846f,-61.61462f,-114.465f,6.857846f,-61.78797f,-114.465f,6.857846f,-63.78797f,-130.4556f,6.857846f,-59.68276f,-146.3566f,6.857846f,-55.24266f,-145.3566f,6.857846f,-53.51061f,-159.5665f,6.857846f,-45.10634f,-158.1522f,6.857846f,-43.69213f,-169.7028f,6.857846f,-31.89643f,-167.9707f,6.857846f,-30.89643f,-176.0747f,6.857846f,-16.51317f,-174.1429f,6.857846f,-15.99553f,-178.2481f,6.857846f,-0.004890828f,-176.2481f,6.857846f,-0.004890828f,-174.1429f,6.857846f,15.98575f,-176.0747f,6.857846f,16.50339f,-167.9707f,6.857846f,30.88665f,-169.7028f,6.857846f,31.88665f,-158.1522f,6.857846f,43.68234f,-159.5665f,6.857846f,45.09656f,-145.3566f,6.857846f,53.50083f,-146.3566f,6.857846f,55.23288f,-130.4556f,6.857846f,59.67298f,-130.9733f,6.857846f,61.60483f,-114.465f,6.857846f,61.77819f,-114.465f,6.857846f,63.77819f,-97.95673f,6.857846f,-61.61462f,-98.47437f,6.857846f,-59.68276f,-82.57347f,6.857846f,-55.24266f,-83.57347f,6.857846f,-53.51061f,-69.36356f,6.857846f,-45.10634f,-70.77778f,6.857846f,-43.69213f,-59.22724f,6.857846f,-31.89643f,-60.95929f,6.857846f,-30.89643f,-52.85529f,6.857846f,-16.51317f,-54.78714f,6.857846f,-15.99553f,-50.68193f,6.857846f,-0.004890828f,-52.68193f,6.857846f,-0.004890828f,-54.78714f,6.857846f,15.98575f,-52.85529f,6.857846f,16.50339f,-60.95929f,6.857846f,30.88665f,-59.22724f,6.857846f,31.88665f,-70.77778f,6.857846f,43.68234f,-69.36356f,6.857846f,45.09656f,-83.57347f,6.857846f,53.50083f,-82.57347f,6.857846f,55.23288f,-98.47437f,6.857846f,59.67298f,-97.95673f,6.857846f,61.60483f,-114.465f,6.857846f,63.77819f,-114.465f,6.857846f,61.77819f,-97.95673f,6.857846f,61.60483f,-98.47437f,6.857846f,59.67298f,-82.57347f,6.857846f,55.23288f,-83.57347f,6.857846f,53.50083f,-69.36356f,6.857846f,45.09656f,-70.77778f,6.857846f,43.68234f,-59.22724f,6.857846f,31.88665f,-60.95929f,6.857846f,30.88665f,-52.85529f,6.857846f,16.50339f,-54.78714f,6.857846f,15.98575f,-50.68193f,6.857846f,-0.004890828f,-52.68193f,6.857846f,-0.004890828f,-54.78714f,6.857846f,-15.99553f,-52.85529f,6.857846f,-16.51317f,-60.95929f,6.857846f,-30.89643f,-59.22724f,6.857846f,-31.89643f,-70.77778f,6.857846f,-43.69213f,-69.36356f,6.857846f,-45.10634f,-83.57347f,6.857846f,-53.51061f,-82.57347f,6.857846f,-55.24266f,-98.47437f,6.857846f,-59.68276f,-97.95673f,6.857846f,-61.61462f,-114.465f,6.857846f,-61.78797f,-114.465f,6.857846f,-63.78797f,-130.9733f,6.857846f,61.60483f,-130.4556f,6.857846f,59.67298f,-146.3566f,6.857846f,55.23288f,-145.3566f,6.857846f,53.50083f,-159.5665f,6.857846f,45.09656f,-158.1522f,6.857846f,43.68234f,-169.7028f,6.857846f,31.88665f,-167.9707f,6.857846f,30.88665f,-176.0747f,6.857846f,16.50339f,-174.1429f,6.857846f,15.98575f,-178.2481f,6.857846f,-0.004890828f,-176.2481f,6.857846f,-0.004890828f,-174.1429f,6.857846f,-15.99553f,-176.0747f,6.857846f,-16.51317f,-167.9707f,6.857846f,-30.89643f,-169.7028f,6.857846f,-31.89643f,-158.1522f,6.857846f,-43.69213f,-159.5665f,6.857846f,-45.10634f,-145.3566f,6.857846f,-53.51061f,-146.3566f,6.857846f,-55.24266f,-130.4556f,6.857846f,-59.68276f,-130.9733f,6.857846f,-61.61462f,-146.3566f,6.857846f,55.23288f,-146.3566f,12.35785f,55.23288f,-146.3566f,6.857846f,55.23288f,-146.3566f,12.35785f,55.23288f,-159.5665f,6.857846f,45.09656f,-159.5665f,12.35785f,45.09656f,-159.5665f,6.857846f,45.09656f,-159.5665f,12.35785f,45.09656f,-169.7028f,12.35785f,31.88665f,-169.7028f,6.857846f,31.88665f,-169.7028f,12.35785f,31.88665f,-169.7028f,6.857846f,31.88665f,-176.0747f,12.35785f,16.50339f,-176.0747f,6.857846f,16.50339f,-176.0747f,12.35785f,16.50339f,-176.0747f,6.857846f,16.50339f,-178.2481f,12.35785f,-0.004890828f,-178.2481f,6.857846f,-0.004890828f,-178.2481f,12.35785f,-0.004890828f,-178.2481f,6.857846f,-0.004890828f,-176.0747f,12.35785f,-16.51317f,-176.0747f,6.857846f,-16.51317f,-176.0747f,12.35785f,-16.51317f,-176.0747f,6.857846f,-16.51317f,-169.7028f,12.35785f,-31.89643f,-169.7028f,6.857846f,-31.89643f,-169.7028f,12.35785f,-31.89643f,-169.7028f,6.857846f,-31.89643f,-159.5665f,12.35785f,-45.10634f,-159.5665f,6.857846f,-45.10634f,-159.5665f,12.35785f,-45.10634f,-159.5665f,6.857846f,-45.10634f,-146.3566f,6.857846f,-55.24266f,-146.3566f,12.35785f,-55.24266f,-146.3566f,12.35785f,-55.24266f,-146.3566f,6.857846f,-55.24266f,-130.9733f,6.857846f,-61.61462f,-130.9733f,12.35785f,-61.61462f,-130.9733f,12.35785f,-61.61462f,-130.9733f,6.857846f,-61.61462f,-114.465f,6.857846f,-63.78797f,-114.465f,12.35785f,-63.78797f,-114.465f,12.35785f,-63.78797f,-114.465f,6.857846f,-63.78797f,-97.95673f,6.857846f,-61.61462f,-97.95673f,12.35785f,-61.61462f,-97.95673f,12.35785f,-61.61462f,-97.95673f,6.857846f,-61.61462f,-82.57347f,6.857846f,-55.24266f,-82.57347f,12.35785f,-55.24266f,-82.57347f,12.35785f,-55.24266f,-82.57347f,6.857846f,-55.24266f,-69.36356f,6.857846f,-45.10634f,-69.36356f,12.35785f,-45.10634f,-69.36356f,12.35785f,-45.10634f,-69.36356f,6.857846f,-45.10634f,-59.22724f,12.35785f,-31.89643f,-59.22724f,6.857846f,-31.89643f,-59.22724f,12.35785f,-31.89643f,-59.22724f,6.857846f,-31.89643f,-52.85529f,12.35785f,-16.51317f,-52.85529f,6.857846f,-16.51317f,-52.85529f,12.35785f,-16.51317f,-52.85529f,6.857846f,-16.51317f,-50.68193f,12.35785f,-0.004890828f,-50.68193f,6.857846f,-0.004890828f,-50.68193f,12.35785f,-0.004890828f,-50.68193f,6.857846f,-0.004890828f,-52.85529f,12.35785f,16.50339f,-52.85529f,6.857846f,16.50339f,-52.85529f,12.35785f,16.50339f,-52.85529f,6.857846f,16.50339f,-59.22724f,12.35785f,31.88665f,-59.22724f,6.857846f,31.88665f,-59.22724f,12.35785f,31.88665f,-59.22724f,6.857846f,31.88665f,-69.36356f,12.35785f,45.09656f,-69.36356f,6.857846f,45.09656f,-69.36356f,12.35785f,45.09656f,-69.36356f,6.857846f,45.09656f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,2,8,9,8,2,1,12,13,14,13,12,15,15,12,16,15,16,17,17,16,18,17,18,19,19,18,20,19,20,21,21,20,22,21,22,23,23,22,24,23,24,25,25,24,26,25,26,27,27,26,28,28,26,29,28,29,30,30,29,31,30,31,32,32,31,33,32,33,34,34,33,35,34,35,36,36,35,37,13,38,14,38,13,39,38,39,40,40,39,41,40,41,42,42,41,43,42,43,44,44,43,45,44,45,46,46,45,47,46,47,48,48,47,49,48,49,50,48,50,51,51,50,52,51,52,53,53,52,54,53,54,55,55,54,56,55,56,57,57,56,58,57,58,59,59,58,36,59,36,37,108,3,0,3,108,109,112,113,114,113,112,115,115,112,116,115,116,117,117,116,118,117,118,119,119,118,120,119,120,121,121,120,122,121,122,123,123,122,124,123,124,125,125,124,126,126,124,127,126,127,128,128,127,129,128,129,130,130,129,131,130,131,132,132,131,133,132,133,134,134,133,135,134,135,136,136,135,137,113,138,114,138,113,139,138,139,140,140,139,141,140,141,142,142,141,143,142,143,144,144,143,145,144,145,146,146,145,147,146,147,148,148,147,149,148,149,150,148,150,151,151,150,152,151,152,153,153,152,154,153,154,155,155,154,156,155,156,157,157,156,158,157,158,159,159,158,136,159,136,137,9,208,209,208,9,8,209,212,213,212,209,208,216,212,217,212,216,213,220,217,221,217,220,216,224,221,225,221,224,220,228,225,229,225,228,224,232,229,233,229,232,228,236,233,237,233,236,232,240,236,237,236,240,241,244,241,240,241,244,245,248,245,244,245,248,249,252,249,248,249,252,253,256,253,252,253,256,257,260,257,256,257,260,261,264,260,265,260,264,261,268,265,269,265,268,264,272,269,273,269,272,268,276,273,277,273,276,272,280,277,281,277,280,276,284,281,285,281,284,280,284,109,108,109,284,285,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 432, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glColor4d(0.8, 0.8, 0.1568627, 1.0);
int[] indices = {
4,5,6,7,6,5,6,7,10,11,10,7,60,61,62,61,63,62,62,63,64,63,65,64,64,65,66,65,67,66,66,67,68,67,69,68,68,69,70,69,71,70,70,71,72,71,73,72,73,74,72,72,74,75,74,76,75,75,76,77,76,78,77,77,78,79,78,80,79,79,80,81,80,82,81,81,82,83,82,84,83,85,83,84,60,86,61,61,86,87,86,88,87,87,88,89,88,90,89,89,90,91,90,92,91,91,92,93,92,94,93,93,94,95,95,94,96,94,97,96,96,97,98,97,99,98,98,99,100,99,101,100,100,101,102,101,103,102,102,103,104,103,105,104,104,105,106,105,107,106,106,107,84,85,84,107,110,111,4,5,4,111,160,161,162,161,163,162,162,163,164,163,165,164,164,165,166,165,167,166,166,167,168,167,169,168,168,169,170,169,171,170,170,171,172,171,173,172,173,174,172,172,174,175,174,176,175,175,176,177,176,178,177,177,178,179,178,180,179,179,180,181,180,182,181,181,182,183,182,184,183,185,183,184,160,186,161,161,186,187,186,188,187,187,188,189,188,190,189,189,190,191,190,192,191,191,192,193,192,194,193,193,194,195,194,196,195,195,196,197,197,196,198,196,199,198,198,199,200,199,201,200,200,201,202,201,203,202,202,203,204,203,205,204,204,205,206,205,207,206,206,207,184,185,184,207,10,11,210,211,210,11,210,211,214,215,214,211,215,218,214,219,214,218,218,222,219,223,219,222,222,226,223,227,223,226,226,230,227,231,227,230,230,234,231,235,231,234,234,238,235,239,235,238,242,243,238,239,238,243,246,247,242,243,242,247,250,251,246,247,246,251,254,255,250,251,250,255,258,259,254,255,254,259,262,263,258,259,258,263,262,266,263,267,263,266,266,270,267,271,267,270,270,274,271,275,271,274,274,278,275,279,275,278,278,282,279,283,279,282,282,286,283,287,283,286,287,286,110,111,110,286,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 432, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID68(GL2 gl){
float[] positionsArray = {
-98.47437f,-7.642154f,59.67298f,-114.465f,-16.14215f,61.77819f,-114.465f,-7.642154f,61.77819f,-98.47437f,-16.14215f,59.67298f,-98.47437f,-16.14215f,59.67298f,-98.47437f,-7.642154f,59.67298f,-114.465f,-16.14215f,61.77819f,-114.465f,-7.642154f,61.77819f,-130.4556f,-16.14215f,59.67298f,-130.4556f,-7.642154f,59.67298f,-130.4556f,-16.14215f,59.67298f,-130.4556f,-7.642154f,59.67298f,-83.57347f,-7.642154f,53.50083f,-83.57347f,-16.14215f,53.50083f,-83.57347f,-16.14215f,53.50083f,-83.57347f,-7.642154f,53.50083f,-145.3566f,-16.14215f,53.50083f,-145.3566f,-7.642154f,53.50083f,-145.3566f,-16.14215f,53.50083f,-145.3566f,-7.642154f,53.50083f,-70.77778f,-7.642154f,43.68234f,-70.77778f,-16.14215f,43.68234f,-70.77778f,-16.14215f,43.68234f,-70.77778f,-7.642154f,43.68234f,-158.1522f,-16.14215f,43.68234f,-158.1522f,-7.642154f,43.68234f,-158.1522f,-16.14215f,43.68234f,-158.1522f,-7.642154f,43.68234f,-60.95929f,-16.14215f,30.88665f,-60.95929f,-7.642154f,30.88665f,-60.95929f,-7.642154f,30.88665f,-60.95929f,-16.14215f,30.88665f,-167.9707f,-7.642154f,30.88665f,-167.9707f,-16.14215f,30.88665f,-167.9707f,-7.642154f,30.88665f,-167.9707f,-16.14215f,30.88665f,-54.78714f,-16.14215f,15.98575f,-54.78714f,-7.642154f,15.98575f,-54.78714f,-7.642154f,15.98575f,-54.78714f,-16.14215f,15.98575f,-174.1429f,-7.642154f,15.98575f,-174.1429f,-16.14215f,15.98575f,-174.1429f,-7.642154f,15.98575f,-174.1429f,-16.14215f,15.98575f,-52.68193f,-16.14215f,-0.004890828f,-52.68193f,-7.642154f,-0.004890828f,-52.68193f,-7.642154f,-0.004890828f,-52.68193f,-16.14215f,-0.004890828f,-176.2481f,-7.642154f,-0.004890828f,-176.2481f,-16.14215f,-0.004890828f,-176.2481f,-7.642154f,-0.004890828f,-176.2481f,-16.14215f,-0.004890828f,-54.78714f,-16.14215f,-15.99553f,-54.78714f,-7.642154f,-15.99553f,-54.78714f,-7.642154f,-15.99553f,-54.78714f,-16.14215f,-15.99553f,-174.1429f,-7.642154f,-15.99553f,-174.1429f,-16.14215f,-15.99553f,-174.1429f,-7.642154f,-15.99553f,-174.1429f,-16.14215f,-15.99553f,-60.95929f,-16.14215f,-30.89643f,-60.95929f,-7.642154f,-30.89643f,-60.95929f,-7.642154f,-30.89643f,-60.95929f,-16.14215f,-30.89643f,-167.9707f,-7.642154f,-30.89643f,-167.9707f,-16.14215f,-30.89643f,-167.9707f,-7.642154f,-30.89643f,-167.9707f,-16.14215f,-30.89643f,-70.77778f,-16.14215f,-43.69213f,-70.77778f,-7.642154f,-43.69213f,-70.77778f,-7.642154f,-43.69213f,-70.77778f,-16.14215f,-43.69213f,-158.1522f,-7.642154f,-43.69213f,-158.1522f,-16.14215f,-43.69213f,-158.1522f,-7.642154f,-43.69213f,-158.1522f,-16.14215f,-43.69213f,-83.57347f,-7.642154f,-53.51061f,-83.57347f,-16.14215f,-53.51061f,-83.57347f,-7.642154f,-53.51061f,-83.57347f,-16.14215f,-53.51061f,-145.3566f,-16.14215f,-53.51061f,-145.3566f,-7.642154f,-53.51061f,-145.3566f,-7.642154f,-53.51061f,-145.3566f,-16.14215f,-53.51061f,-98.47437f,-7.642154f,-59.68276f,-98.47437f,-16.14215f,-59.68276f,-98.47437f,-7.642154f,-59.68276f,-98.47437f,-16.14215f,-59.68276f,-130.4556f,-16.14215f,-59.68276f,-130.4556f,-7.642154f,-59.68276f,-130.4556f,-7.642154f,-59.68276f,-130.4556f,-16.14215f,-59.68276f,-114.465f,-7.642154f,-61.78797f,-114.465f,-16.14215f,-61.78797f,-114.465f,-7.642154f,-61.78797f,-114.465f,-16.14215f,-61.78797f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,2,8,9,8,2,1,12,3,0,3,12,13,9,16,17,16,9,8,20,13,12,13,20,21,17,24,25,24,17,16,20,28,21,28,20,29,32,24,33,24,32,25,29,36,28,36,29,37,40,33,41,33,40,32,37,44,36,44,37,45,48,41,49,41,48,40,45,52,44,52,45,53,56,49,57,49,56,48,53,60,52,60,53,61,64,57,65,57,64,56,61,68,60,68,61,69,72,65,73,65,72,64,68,76,77,76,68,69,80,72,73,72,80,81,77,84,85,84,77,76,88,81,80,81,88,89,85,92,93,92,85,84,93,89,88,89,93,92,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 144, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glColor4d(0.2392157, 0.4, 0.2392157, 1.0);
int[] indices = {
4,5,6,7,6,5,6,7,10,11,10,7,14,15,4,5,4,15,10,11,18,19,18,11,22,23,14,15,14,23,18,19,26,27,26,19,30,23,31,22,31,23,27,34,26,35,26,34,38,30,39,31,39,30,34,42,35,43,35,42,46,38,47,39,47,38,42,50,43,51,43,50,54,46,55,47,55,46,50,58,51,59,51,58,62,54,63,55,63,54,58,66,59,67,59,66,70,62,71,63,71,62,66,74,67,75,67,74,70,71,78,79,78,71,82,83,74,75,74,83,78,79,86,87,86,79,90,91,82,83,82,91,86,87,94,95,94,87,94,95,90,91,90,95,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 144, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID74(GL2 gl){
float[] positionsArray = {
-98.47437f,6.857846f,59.67298f,-114.465f,-2.142154f,61.77819f,-114.465f,6.857846f,61.77819f,-98.47437f,-2.142154f,59.67298f,-98.47437f,-2.142154f,59.67298f,-98.47437f,6.857846f,59.67298f,-114.465f,-2.142154f,61.77819f,-114.465f,6.857846f,61.77819f,-130.4556f,-2.142154f,59.67298f,-130.4556f,6.857846f,59.67298f,-130.4556f,-2.142154f,59.67298f,-130.4556f,6.857846f,59.67298f,-83.57347f,6.857846f,53.50083f,-83.57347f,-2.142154f,53.50083f,-83.57347f,-2.142154f,53.50083f,-83.57347f,6.857846f,53.50083f,-145.3566f,-2.142154f,53.50083f,-145.3566f,6.857846f,53.50083f,-145.3566f,-2.142154f,53.50083f,-145.3566f,6.857846f,53.50083f,-70.77778f,6.857846f,43.68234f,-70.77778f,-2.142154f,43.68234f,-70.77778f,-2.142154f,43.68234f,-70.77778f,6.857846f,43.68234f,-158.1522f,-2.142154f,43.68234f,-158.1522f,6.857846f,43.68234f,-158.1522f,-2.142154f,43.68234f,-158.1522f,6.857846f,43.68234f,-60.95929f,-2.142154f,30.88665f,-60.95929f,6.857846f,30.88665f,-60.95929f,6.857846f,30.88665f,-60.95929f,-2.142154f,30.88665f,-167.9707f,6.857846f,30.88665f,-167.9707f,-2.142154f,30.88665f,-167.9707f,6.857846f,30.88665f,-167.9707f,-2.142154f,30.88665f,-54.78714f,-2.142154f,15.98575f,-54.78714f,6.857846f,15.98575f,-54.78714f,6.857846f,15.98575f,-54.78714f,-2.142154f,15.98575f,-174.1429f,6.857846f,15.98575f,-174.1429f,-2.142154f,15.98575f,-174.1429f,6.857846f,15.98575f,-174.1429f,-2.142154f,15.98575f,-52.68193f,-2.142154f,-0.004890828f,-52.68193f,6.857846f,-0.004890828f,-52.68193f,6.857846f,-0.004890828f,-52.68193f,-2.142154f,-0.004890828f,-176.2481f,6.857846f,-0.004890828f,-176.2481f,-2.142154f,-0.004890828f,-176.2481f,6.857846f,-0.004890828f,-176.2481f,-2.142154f,-0.004890828f,-54.78714f,-2.142154f,-15.99553f,-54.78714f,6.857846f,-15.99553f,-54.78714f,6.857846f,-15.99553f,-54.78714f,-2.142154f,-15.99553f,-174.1429f,6.857846f,-15.99553f,-174.1429f,-2.142154f,-15.99553f,-174.1429f,6.857846f,-15.99553f,-174.1429f,-2.142154f,-15.99553f,-60.95929f,-2.142154f,-30.89643f,-60.95929f,6.857846f,-30.89643f,-60.95929f,6.857846f,-30.89643f,-60.95929f,-2.142154f,-30.89643f,-167.9707f,6.857846f,-30.89643f,-167.9707f,-2.142154f,-30.89643f,-167.9707f,6.857846f,-30.89643f,-167.9707f,-2.142154f,-30.89643f,-70.77778f,-2.142154f,-43.69213f,-70.77778f,6.857846f,-43.69213f,-70.77778f,6.857846f,-43.69213f,-70.77778f,-2.142154f,-43.69213f,-158.1522f,6.857846f,-43.69213f,-158.1522f,-2.142154f,-43.69213f,-158.1522f,6.857846f,-43.69213f,-158.1522f,-2.142154f,-43.69213f,-83.57347f,6.857846f,-53.51061f,-83.57347f,-2.142154f,-53.51061f,-83.57347f,6.857846f,-53.51061f,-83.57347f,-2.142154f,-53.51061f,-145.3566f,-2.142154f,-53.51061f,-145.3566f,6.857846f,-53.51061f,-145.3566f,6.857846f,-53.51061f,-145.3566f,-2.142154f,-53.51061f,-98.47437f,6.857846f,-59.68276f,-98.47437f,-2.142154f,-59.68276f,-98.47437f,6.857846f,-59.68276f,-98.47437f,-2.142154f,-59.68276f,-130.4556f,-2.142154f,-59.68276f,-130.4556f,6.857846f,-59.68276f,-130.4556f,6.857846f,-59.68276f,-130.4556f,-2.142154f,-59.68276f,-114.465f,6.857846f,-61.78797f,-114.465f,-2.142154f,-61.78797f,-114.465f,6.857846f,-61.78797f,-114.465f,-2.142154f,-61.78797f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,2,8,9,8,2,1,12,3,0,3,12,13,9,16,17,16,9,8,20,13,12,13,20,21,17,24,25,24,17,16,20,28,21,28,20,29,32,24,33,24,32,25,29,36,28,36,29,37,40,33,41,33,40,32,37,44,36,44,37,45,48,41,49,41,48,40,45,52,44,52,45,53,56,49,57,49,56,48,53,60,52,60,53,61,64,57,65,57,64,56,61,68,60,68,61,69,72,65,73,65,72,64,68,76,77,76,68,69,80,72,73,72,80,81,77,84,85,84,77,76,88,81,80,81,88,89,85,92,93,92,85,84,93,89,88,89,93,92,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 144, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glColor4d(0.2392157, 0.4, 0.2392157, 1.0);
int[] indices = {
4,5,6,7,6,5,6,7,10,11,10,7,14,15,4,5,4,15,10,11,18,19,18,11,22,23,14,15,14,23,18,19,26,27,26,19,30,23,31,22,31,23,27,34,26,35,26,34,38,30,39,31,39,30,34,42,35,43,35,42,46,38,47,39,47,38,42,50,43,51,43,50,54,46,55,47,55,46,50,58,51,59,51,58,62,54,63,55,63,54,58,66,59,67,59,66,70,62,71,63,71,62,66,74,67,75,67,74,70,71,78,79,78,71,82,83,74,75,74,83,78,79,86,87,86,79,90,91,82,83,82,91,86,87,94,95,94,87,94,95,90,91,90,95,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 144, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID80(GL2 gl){
float[] positionsArray = {
-98.47437f,22.28127f,59.67298f,-114.465f,12.35785f,61.77819f,-114.465f,22.28127f,61.77819f,-98.47437f,12.35785f,59.67298f,-98.47437f,12.35785f,59.67298f,-98.47437f,22.28127f,59.67298f,-114.465f,12.35785f,61.77819f,-114.465f,22.28127f,61.77819f,-130.4556f,12.35785f,59.67298f,-130.4556f,22.28127f,59.67298f,-130.4556f,12.35785f,59.67298f,-130.4556f,22.28127f,59.67298f,-114.465f,62.77978f,52.71614f,-98.47437f,22.28127f,59.67298f,-114.465f,22.28127f,61.77819f,-100.8198f,62.77978f,50.91971f,-100.8198f,62.77978f,50.91971f,-114.465f,62.77978f,52.71614f,-98.47437f,22.28127f,59.67298f,-114.465f,22.28127f,61.77819f,-83.57347f,22.28127f,53.50083f,-83.57347f,12.35785f,53.50083f,-83.57347f,12.35785f,53.50083f,-83.57347f,22.28127f,53.50083f,-145.3566f,12.35785f,53.50083f,-145.3566f,22.28127f,53.50083f,-145.3566f,12.35785f,53.50083f,-145.3566f,22.28127f,53.50083f,-128.1102f,62.77978f,50.91971f,-130.4556f,22.28127f,59.67298f,-128.1102f,62.77978f,50.91971f,-130.4556f,22.28127f,59.67298f,-88.1045f,62.77978f,45.65286f,-83.57347f,22.28127f,53.50083f,-83.57347f,22.28127f,53.50083f,-88.1045f,62.77978f,45.65286f,-100.8198f,62.77978f,50.91971f,-114.465f,62.77978f,52.71614f,-108.6716f,121.7624f,21.22767f,-108.6716f,121.7624f,21.22767f,-114.465f,62.77978f,52.71614f,-100.8198f,62.77978f,50.91971f,-70.77778f,22.28127f,43.68234f,-70.77778f,12.35785f,43.68234f,-70.77778f,12.35785f,43.68234f,-70.77778f,22.28127f,43.68234f,-158.1522f,12.35785f,43.68234f,-158.1522f,22.28127f,43.68234f,-158.1522f,12.35785f,43.68234f,-158.1522f,22.28127f,43.68234f,-140.8255f,62.77978f,45.65286f,-145.3566f,22.28127f,53.50083f,-140.8255f,62.77978f,45.65286f,-145.3566f,22.28127f,53.50083f,-114.465f,62.77978f,52.71614f,-128.1102f,62.77978f,50.91971f,-120.0636f,121.7624f,21.27987f,-120.0636f,121.7624f,21.27987f,-128.1102f,62.77978f,50.91971f,-114.465f,62.77978f,52.71614f,-88.1045f,62.77978f,45.65286f,-103.3739f,121.7624f,19.00478f,-103.3739f,121.7624f,19.00478f,-88.1045f,62.77978f,45.65286f,-77.18561f,62.77978f,37.27451f,-70.77778f,22.28127f,43.68234f,-70.77778f,22.28127f,43.68234f,-77.18561f,62.77978f,37.27451f,-114.3642f,121.7624f,22.00366f,-114.3642f,121.7624f,22.00366f,-60.95929f,12.35785f,30.88665f,-60.95929f,22.28127f,30.88665f,-60.95929f,22.28127f,30.88665f,-60.95929f,12.35785f,30.88665f,-167.9707f,22.28127f,30.88665f,-167.9707f,12.35785f,30.88665f,-167.9707f,22.28127f,30.88665f,-167.9707f,12.35785f,30.88665f,-151.7444f,62.77978f,37.27451f,-158.1522f,22.28127f,43.68234f,-151.7444f,62.77978f,37.27451f,-158.1522f,22.28127f,43.68234f,-125.3815f,121.7624f,19.10562f,-140.8255f,62.77978f,45.65286f,-140.8255f,62.77978f,45.65286f,-125.3815f,121.7624f,19.10562f,-114.465f,92.2711f,37.35956f,-114.465f,92.2711f,37.35956f,-98.83197f,121.7624f,15.48647f,-98.83197f,121.7624f,15.48647f,-77.18561f,62.77978f,37.27451f,-77.18561f,62.77978f,37.27451f,-60.95929f,22.28127f,30.88665f,-68.80726f,62.77978f,26.35562f,-68.80726f,62.77978f,26.35562f,-60.95929f,22.28127f,30.88665f,-114.465f,92.2711f,37.35956f,-114.465f,92.2711f,37.35956f,-108.8664f,121.7624f,-21.28783f,-120.2584f,121.7624f,-21.23563f,-114.5659f,121.7624f,-22.01162f,-103.5485f,121.7624f,-19.11358f,-125.5562f,121.7624f,-19.01274f,-98.97458f,121.7624f,-15.63704f,-130.0981f,121.7624f,-15.49443f,-95.45627f,121.7624f,-11.09513f,-133.5746f,121.7624f,-10.92047f,-93.23338f,121.7624f,-5.797382f,-135.7489f,121.7624f,-5.602569f,-92.45739f,121.7624f,-0.1048206f,-136.4727f,121.7624f,0.09686413f,-93.18118f,121.7624f,5.594613f,-135.6967f,121.7624f,5.789425f,-95.35543f,121.7624f,10.91251f,-133.4738f,121.7624f,11.08718f,-98.83197f,121.7624f,15.48647f,-129.9555f,121.7624f,15.62908f,-103.3739f,121.7624f,19.00478f,-125.3815f,121.7624f,19.10562f,-108.6716f,121.7624f,21.22767f,-120.0636f,121.7624f,21.27987f,-114.3642f,121.7624f,22.00366f,-114.3642f,121.7624f,22.00366f,-108.6716f,121.7624f,21.22767f,-120.0636f,121.7624f,21.27987f,-125.3815f,121.7624f,19.10562f,-103.3739f,121.7624f,19.00478f,-129.9555f,121.7624f,15.62908f,-98.83197f,121.7624f,15.48647f,-133.4738f,121.7624f,11.08718f,-95.35543f,121.7624f,10.91251f,-135.6967f,121.7624f,5.789425f,-93.18118f,121.7624f,5.594613f,-136.4727f,121.7624f,0.09686413f,-92.45739f,121.7624f,-0.1048206f,-135.7489f,121.7624f,-5.602569f,-93.23338f,121.7624f,-5.797382f,-133.5746f,121.7624f,-10.92047f,-95.45627f,121.7624f,-11.09513f,-130.0981f,121.7624f,-15.49443f,-98.97458f,121.7624f,-15.63704f,-125.5562f,121.7624f,-19.01274f,-103.5485f,121.7624f,-19.11358f,-120.2584f,121.7624f,-21.23563f,-108.8664f,121.7624f,-21.28783f,-114.5659f,121.7624f,-22.01162f,-54.78714f,12.35785f,15.98575f,-54.78714f,22.28127f,15.98575f,-54.78714f,22.28127f,15.98575f,-54.78714f,12.35785f,15.98575f,-174.1429f,22.28127f,15.98575f,-174.1429f,12.35785f,15.98575f,-174.1429f,22.28127f,15.98575f,-174.1429f,12.35785f,15.98575f,-160.1228f,62.77978f,26.35562f,-167.9707f,22.28127f,30.88665f,-160.1228f,62.77978f,26.35562f,-167.9707f,22.28127f,30.88665f,-129.9555f,121.7624f,15.62908f,-151.7444f,62.77978f,37.27451f,-151.7444f,62.77978f,37.27451f,-129.9555f,121.7624f,15.62908f,-114.3642f,121.7624f,22.00366f,-114.3642f,121.7624f,22.00366f,-68.80726f,62.77978f,26.35562f,-68.80726f,62.77978f,26.35562f,-54.78714f,22.28127f,15.98575f,-63.54041f,62.77978f,13.64032f,-63.54041f,62.77978f,13.64032f,-54.78714f,22.28127f,15.98575f,-88.1045f,62.77978f,-45.66264f,-98.97458f,121.7624f,-15.63704f,-103.5485f,121.7624f,-19.11358f,-103.5485f,121.7624f,-19.11358f,-98.97458f,121.7624f,-15.63704f,-88.1045f,62.77978f,-45.66264f,-77.18561f,62.77978f,-37.28429f,-95.45627f,121.7624f,-11.09513f,-95.45627f,121.7624f,-11.09513f,-77.18561f,62.77978f,-37.28429f,-68.80726f,62.77978f,-26.36541f,-93.23338f,121.7624f,-5.797382f,-93.23338f,121.7624f,-5.797382f,-68.80726f,62.77978f,-26.36541f,-63.54041f,62.77978f,-13.6501f,-92.45739f,121.7624f,-0.1048206f,-92.45739f,121.7624f,-0.1048206f,-63.54041f,62.77978f,-13.6501f,-92.45739f,121.7624f,-0.1048206f,-61.74398f,62.77978f,-0.004890828f,-93.18118f,121.7624f,5.594613f,-93.18118f,121.7624f,5.594613f,-61.74398f,62.77978f,-0.004890828f,-92.45739f,121.7624f,-0.1048206f,-63.54041f,62.77978f,13.64032f,-95.35543f,121.7624f,10.91251f,-95.35543f,121.7624f,10.91251f,-63.54041f,62.77978f,13.64032f,-133.4738f,121.7624f,11.08718f,-133.4738f,121.7624f,11.08718f,-160.1228f,62.77978f,26.35562f,-135.6967f,121.7624f,5.789425f,-135.6967f,121.7624f,5.789425f,-160.1228f,62.77978f,26.35562f,-165.3896f,62.77978f,13.64032f,-136.4727f,121.7624f,0.09686413f,-136.4727f,121.7624f,0.09686413f,-165.3896f,62.77978f,13.64032f,-136.4727f,121.7624f,0.09686413f,-167.186f,62.77978f,-0.004890828f,-135.7489f,121.7624f,-5.602569f,-135.7489f,121.7624f,-5.602569f,-167.186f,62.77978f,-0.004890828f,-136.4727f,121.7624f,0.09686413f,-165.3896f,62.77978f,-13.6501f,-133.5746f,121.7624f,-10.92047f,-133.5746f,121.7624f,-10.92047f,-165.3896f,62.77978f,-13.6501f,-160.1228f,62.77978f,-26.36541f,-130.0981f,121.7624f,-15.49443f,-130.0981f,121.7624f,-15.49443f,-160.1228f,62.77978f,-26.36541f,-125.5562f,121.7624f,-19.01274f,-140.8255f,62.77978f,-45.66264f,-140.8255f,62.77978f,-45.66264f,-125.5562f,121.7624f,-19.01274f,-120.2584f,121.7624f,-21.23563f,-128.1102f,62.77978f,-50.9295f,-128.1102f,62.77978f,-50.9295f,-120.2584f,121.7624f,-21.23563f,-114.465f,62.77978f,-52.72592f,-114.5659f,121.7624f,-22.01162f,-114.5659f,121.7624f,-22.01162f,-114.465f,62.77978f,-52.72592f,-108.8664f,121.7624f,-21.28783f,-114.5659f,121.7624f,-22.01162f,-114.465f,62.77978f,-52.72592f,-114.465f,62.77978f,-52.72592f,-114.5659f,121.7624f,-22.01162f,-108.8664f,121.7624f,-21.28783f,-100.8198f,62.77978f,-50.9295f,-100.8198f,62.77978f,-50.9295f,-52.68193f,12.35785f,-0.004890828f,-52.68193f,22.28127f,-0.004890828f,-52.68193f,22.28127f,-0.004890828f,-52.68193f,12.35785f,-0.004890828f,-176.2481f,22.28127f,-0.004890828f,-176.2481f,12.35785f,-0.004890828f,-176.2481f,22.28127f,-0.004890828f,-176.2481f,12.35785f,-0.004890828f,-165.3896f,62.77978f,13.64032f,-174.1429f,22.28127f,15.98575f,-165.3896f,62.77978f,13.64032f,-174.1429f,22.28127f,15.98575f,-52.68193f,22.28127f,-0.004890828f,-61.74398f,62.77978f,-0.004890828f,-61.74398f,62.77978f,-0.004890828f,-52.68193f,22.28127f,-0.004890828f,-61.74398f,62.77978f,-0.004890828f,-61.74398f,62.77978f,-0.004890828f,-167.186f,62.77978f,-0.004890828f,-167.186f,62.77978f,-0.004890828f,-151.7444f,62.77978f,-37.28429f,-151.7444f,62.77978f,-37.28429f,-54.78714f,12.35785f,-15.99553f,-54.78714f,22.28127f,-15.99553f,-54.78714f,22.28127f,-15.99553f,-54.78714f,12.35785f,-15.99553f,-174.1429f,22.28127f,-15.99553f,-174.1429f,12.35785f,-15.99553f,-174.1429f,22.28127f,-15.99553f,-174.1429f,12.35785f,-15.99553f,-167.186f,62.77978f,-0.004890828f,-176.2481f,22.28127f,-0.004890828f,-167.186f,62.77978f,-0.004890828f,-176.2481f,22.28127f,-0.004890828f,-54.78714f,22.28127f,-15.99553f,-63.54041f,62.77978f,-13.6501f,-63.54041f,62.77978f,-13.6501f,-54.78714f,22.28127f,-15.99553f,-98.47437f,22.28127f,-59.68276f,-88.1045f,62.77978f,-45.66264f,-100.8198f,62.77978f,-50.9295f,-83.57347f,22.28127f,-53.51061f,-83.57347f,22.28127f,-53.51061f,-98.47437f,22.28127f,-59.68276f,-88.1045f,62.77978f,-45.66264f,-100.8198f,62.77978f,-50.9295f,-77.18561f,62.77978f,-37.28429f,-70.77778f,22.28127f,-43.69213f,-70.77778f,22.28127f,-43.69213f,-77.18561f,62.77978f,-37.28429f,-68.80726f,62.77978f,-26.36541f,-60.95929f,22.28127f,-30.89643f,-68.80726f,62.77978f,-26.36541f,-60.95929f,22.28127f,-30.89643f,-165.3896f,62.77978f,-13.6501f,-174.1429f,22.28127f,-15.99553f,-165.3896f,62.77978f,-13.6501f,-174.1429f,22.28127f,-15.99553f,-160.1228f,62.77978f,-26.36541f,-167.9707f,22.28127f,-30.89643f,-160.1228f,62.77978f,-26.36541f,-167.9707f,22.28127f,-30.89643f,-151.7444f,62.77978f,-37.28429f,-158.1522f,22.28127f,-43.69213f,-151.7444f,62.77978f,-37.28429f,-158.1522f,22.28127f,-43.69213f,-145.3566f,22.28127f,-53.51061f,-140.8255f,62.77978f,-45.66264f,-140.8255f,62.77978f,-45.66264f,-145.3566f,22.28127f,-53.51061f,-130.4556f,22.28127f,-59.68276f,-128.1102f,62.77978f,-50.9295f,-128.1102f,62.77978f,-50.9295f,-130.4556f,22.28127f,-59.68276f,-114.465f,22.28127f,-61.78797f,-114.465f,62.77978f,-52.72592f,-114.465f,62.77978f,-52.72592f,-114.465f,22.28127f,-61.78797f,-60.95929f,12.35785f,-30.89643f,-60.95929f,22.28127f,-30.89643f,-60.95929f,22.28127f,-30.89643f,-60.95929f,12.35785f,-30.89643f,-167.9707f,22.28127f,-30.89643f,-167.9707f,12.35785f,-30.89643f,-167.9707f,22.28127f,-30.89643f,-167.9707f,12.35785f,-30.89643f,-83.57347f,12.35785f,-53.51061f,-98.47437f,22.28127f,-59.68276f,-98.47437f,12.35785f,-59.68276f,-83.57347f,22.28127f,-53.51061f,-83.57347f,22.28127f,-53.51061f,-83.57347f,12.35785f,-53.51061f,-98.47437f,22.28127f,-59.68276f,-98.47437f,12.35785f,-59.68276f,-70.77778f,12.35785f,-43.69213f,-70.77778f,22.28127f,-43.69213f,-70.77778f,22.28127f,-43.69213f,-70.77778f,12.35785f,-43.69213f,-158.1522f,22.28127f,-43.69213f,-158.1522f,12.35785f,-43.69213f,-158.1522f,22.28127f,-43.69213f,-158.1522f,12.35785f,-43.69213f,-145.3566f,12.35785f,-53.51061f,-145.3566f,22.28127f,-53.51061f,-145.3566f,22.28127f,-53.51061f,-145.3566f,12.35785f,-53.51061f,-130.4556f,12.35785f,-59.68276f,-130.4556f,22.28127f,-59.68276f,-130.4556f,22.28127f,-59.68276f,-130.4556f,12.35785f,-59.68276f,-114.465f,12.35785f,-61.78797f,-114.465f,22.28127f,-61.78797f,-114.465f,22.28127f,-61.78797f,-114.465f,12.35785f,-61.78797f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,2,8,9,8,2,1,12,13,14,13,12,15,20,3,0,3,20,21,9,24,25,24,9,8,28,14,29,14,28,12,32,13,15,13,32,33,36,37,38,42,21,20,21,42,43,25,46,47,46,25,24,50,29,51,29,50,28,54,55,56,60,36,61,64,33,32,33,64,65,38,37,68,36,38,61,42,70,43,70,42,71,74,46,75,46,74,47,78,51,79,51,78,50,82,55,83,56,55,82,54,56,86,60,61,88,90,60,88,64,92,65,92,64,93,68,37,96,98,99,100,99,98,101,99,101,102,102,101,103,102,103,104,104,103,105,104,105,106,106,105,107,106,107,108,108,107,109,108,109,110,110,109,111,110,111,112,112,111,113,112,113,114,114,113,115,114,115,116,116,115,117,116,117,118,118,117,119,118,119,120,120,119,121,71,146,70,146,71,147,150,75,151,75,150,74,154,79,155,79,154,78,158,83,159,82,83,158,162,86,56,88,164,90,93,166,92,166,93,167,170,171,172,171,176,177,177,180,181,181,184,185,188,189,190,190,194,195,195,164,88,158,159,198,198,200,201,201,204,205,208,209,210,210,214,215,215,218,219,222,219,223,226,222,227,230,231,226,234,235,236,240,172,234,147,242,146,242,147,243,246,151,247,151,246,150,250,155,251,155,250,154,198,159,200,195,194,164,167,254,166,254,167,255,170,172,240,176,171,170,177,176,180,181,180,184,185,184,258,190,189,194,201,200,204,205,204,260,210,209,214,215,214,218,219,218,262,219,262,223,222,223,227,230,226,227,240,234,236,243,264,242,264,243,265,268,247,269,247,268,246,272,251,273,251,272,250,255,276,254,276,255,277,280,281,282,281,280,283,283,288,281,288,283,289,292,289,293,289,292,288,277,293,276,293,277,292,296,273,297,273,296,272,300,297,301,297,300,296,304,301,305,301,304,300,308,304,305,304,308,309,312,309,308,309,312,313,316,313,312,313,316,317,316,282,317,282,316,280,265,320,264,320,265,321,324,269,325,269,324,268,328,329,330,329,328,331,336,331,328,331,336,337,321,336,320,336,321,337,340,325,341,325,340,324,344,340,341,340,344,345,348,345,344,345,348,349,352,349,348,349,352,353,330,353,352,353,330,329,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 504, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
{
gl.glColor4d(0.2392157, 0.4, 0.2392157, 1.0);
int[] indices = {
4,5,6,7,6,5,6,7,10,11,10,7,16,17,18,19,18,17,22,23,4,5,4,23,10,11,26,27,26,11,17,30,19,31,19,30,34,35,18,16,18,35,39,40,41,44,45,22,23,22,45,26,27,48,49,48,27,30,52,31,53,31,52,57,58,59,62,41,63,66,67,34,35,34,67,69,40,39,62,39,41,72,45,73,44,73,45,49,76,48,77,48,76,52,80,53,81,53,80,84,58,85,85,58,57,87,57,59,89,62,63,89,63,91,94,67,95,66,95,67,97,40,69,122,123,124,124,123,125,123,126,125,125,126,127,126,128,127,127,128,129,128,130,129,129,130,131,130,132,131,131,132,133,132,134,133,133,134,135,134,136,135,135,136,137,136,138,137,137,138,139,138,140,139,139,140,141,140,142,141,141,142,143,142,144,143,145,143,144,148,72,149,73,149,72,76,152,77,153,77,152,80,156,81,157,81,156,160,84,161,161,84,85,57,87,163,91,165,89,168,94,169,95,169,94,173,174,175,178,179,174,182,183,178,186,187,182,191,192,193,196,197,191,89,165,196,199,160,161,202,203,199,206,207,202,211,212,213,216,217,211,220,221,216,224,220,225,228,225,229,229,232,233,237,238,239,239,173,241,244,148,245,149,245,148,152,248,153,249,153,248,156,252,157,253,157,252,203,160,199,165,197,196,256,168,257,169,257,168,241,173,175,175,174,179,183,179,178,187,183,182,259,187,186,197,192,191,207,203,202,261,207,206,217,212,211,221,217,216,263,221,220,224,263,220,228,224,225,228,229,233,237,239,241,266,244,267,245,267,244,248,270,249,271,249,270,252,274,253,275,253,274,278,256,279,257,279,256,284,285,286,287,286,285,290,284,291,286,291,284,291,294,290,295,290,294,294,278,295,279,295,278,274,298,275,299,275,298,298,302,299,303,299,302,302,306,303,307,303,306,310,311,306,307,306,311,314,315,310,311,310,315,318,319,314,315,314,319,285,319,287,318,287,319,322,266,323,267,323,266,270,326,271,327,271,326,332,333,334,335,334,333,338,339,332,333,332,339,338,322,339,323,339,322,326,342,327,343,327,342,346,347,342,343,342,347,350,351,346,347,346,351,354,355,350,351,350,355,334,335,354,355,354,335,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 504, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID86(GL2 gl){
float[] positionsArray = {
-114.465f,145.7624f,63.15159f,-114.3029f,68.83721f,56.73332f,-114.465f,62.77978f,52.71614f,-114.1687f,75.20993f,60.23f,-114.0634f,81.85321f,63.18163f,-113.9876f,88.7204f,65.56749f,-113.9419f,95.76329f,67.37083f,-113.9266f,102.9324f,68.57899f,-113.9419f,110.1775f,69.18349f,-113.9876f,117.4476f,69.18007f,-114.0634f,124.6917f,68.56877f,-114.1687f,131.8589f,67.35387f,-114.3029f,138.899f,65.54391f,-114.3029f,138.899f,65.54391f,-114.465f,145.7624f,63.15159f,-114.1687f,131.8589f,67.35387f,-114.0634f,124.6917f,68.56877f,-113.9876f,117.4476f,69.18007f,-113.9419f,110.1775f,69.18349f,-113.9266f,102.9324f,68.57899f,-113.9419f,95.76329f,67.37083f,-113.9876f,88.7204f,65.56749f,-114.0634f,81.85321f,63.18163f,-114.1687f,75.20993f,60.23f,-114.3029f,68.83721f,56.73332f,-114.465f,62.77978f,52.71614f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(0.8, 0.8, 0.1568627, 1.0);
int[] indices = {
0,1,2,1,0,3,3,0,4,4,0,5,5,0,6,6,0,7,7,0,8,8,0,9,9,0,10,10,0,11,11,0,12,13,14,15,15,14,16,16,14,17,17,14,18,18,14,19,19,14,20,20,14,21,21,14,22,22,14,23,23,14,24,25,24,14,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 66, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID92(GL2 gl){
float[] positionsArray = {
-114.465f,145.7624f,48.90159f,-114.3642f,121.7624f,22.00366f,-114.465f,145.4821f,43.46214f,-114.465f,145.4821f,43.46214f,-114.3642f,121.7624f,22.00366f,-114.465f,145.7624f,48.90159f,-114.465f,92.2711f,37.35956f,-114.465f,92.2711f,37.35956f,-114.465f,92.2711f,37.35956f,-114.465f,145.7624f,63.15159f,-114.465f,62.77978f,52.71614f,-114.465f,145.7624f,48.90159f,-114.465f,145.7624f,48.90159f,-114.465f,92.2711f,37.35956f,-114.465f,145.7624f,63.15159f,-114.465f,62.77978f,52.71614f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(0.2392157, 0.4, 0.2392157, 1.0);
int[] indices = {
0,1,2,3,4,5,0,6,1,4,7,5,8,9,10,9,8,11,12,13,14,15,14,13,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 24, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID98(GL2 gl){
float[] positionsArray = {
-70.99823f,145.4821f,-0.1048206f,-61.74423f,62.77978f,-0.1048206f,-92.45739f,121.7624f,-0.1048206f,-65.55878f,145.7624f,-0.1048206f,-51.30878f,145.7624f,-0.1048206f,-51.30878f,145.7624f,-0.1048206f,-65.55878f,145.7624f,-0.1048206f,-61.74423f,62.77978f,-0.1048206f,-70.99823f,145.4821f,-0.1048206f,-92.45739f,121.7624f,-0.1048206f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(0.2392157, 0.4, 0.2392157, 1.0);
int[] indices = {
0,1,2,1,0,3,1,3,4,5,6,7,6,8,7,9,7,8,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 18, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID104(GL2 gl){
float[] positionsArray = {
-183.05f,102.9324f,0.5003517f,-183.6509f,117.4476f,0.438145f,-183.6544f,110.1775f,0.4838249f,-183.0395f,124.6917f,0.3636327f,-181.8418f,95.76329f,0.4876094f,-181.8244f,131.8589f,0.2608112f,-180.0384f,88.7204f,0.4456874f,-180.0141f,138.899f,0.1304024f,-177.6523f,81.85321f,0.3748801f,-177.6215f,145.7624f,-0.02667817f,-174.7005f,75.20993f,0.2756845f,-167.186f,62.77978f,-0.004890828f,-171.2035f,68.83721f,0.1487973f,-171.2035f,68.83721f,0.1487973f,-174.7005f,75.20993f,0.2756845f,-167.186f,62.77978f,-0.004890828f,-177.6215f,145.7624f,-0.02667817f,-177.6523f,81.85321f,0.3748801f,-180.0141f,138.899f,0.1304024f,-180.0384f,88.7204f,0.4456874f,-181.8244f,131.8589f,0.2608112f,-181.8418f,95.76329f,0.4876094f,-183.0395f,124.6917f,0.3636327f,-183.05f,102.9324f,0.5003517f,-183.6509f,117.4476f,0.438145f,-183.6544f,110.1775f,0.4838249f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(0.8, 0.8, 0.1568627, 1.0);
int[] indices = {
0,1,2,1,0,3,3,0,4,3,4,5,5,4,6,5,6,7,7,6,8,7,8,9,9,8,10,9,10,11,11,10,12,13,14,15,15,14,16,14,17,16,16,17,18,17,19,18,18,19,20,19,21,20,20,21,22,21,23,22,22,23,24,25,24,23,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 66, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID110(GL2 gl){
float[] positionsArray = {
-51.30878f,145.7624f,-0.1048206f,-57.72706f,68.83721f,-0.2668962f,-61.74423f,62.77978f,-0.1048206f,-54.23037f,75.20993f,-0.4010842f,-51.27874f,81.85321f,-0.5064424f,-48.91646f,138.899f,-0.2668962f,-48.89288f,88.7204f,-0.5822312f,-47.1065f,131.8589f,-0.4010842f,-47.08954f,95.76329f,-0.6279183f,-45.8916f,124.6917f,-0.5064424f,-45.88138f,102.9324f,-0.6431831f,-45.2803f,117.4476f,-0.5822312f,-45.27689f,110.1775f,-0.6279183f,-45.27689f,110.1775f,-0.6279183f,-45.2803f,117.4476f,-0.5822312f,-45.88138f,102.9324f,-0.6431831f,-45.8916f,124.6917f,-0.5064424f,-47.08954f,95.76329f,-0.6279183f,-47.1065f,131.8589f,-0.4010842f,-48.89288f,88.7204f,-0.5822312f,-48.91646f,138.899f,-0.2668962f,-51.27874f,81.85321f,-0.5064424f,-51.30878f,145.7624f,-0.1048206f,-54.23037f,75.20993f,-0.4010842f,-57.72706f,68.83721f,-0.2668962f,-61.74423f,62.77978f,-0.1048206f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(0.8, 0.8, 0.1568627, 1.0);
int[] indices = {
0,1,2,1,0,3,3,0,4,4,0,5,4,5,6,6,5,7,6,7,8,8,7,9,8,9,10,10,9,11,10,11,12,13,14,15,14,16,15,15,16,17,16,18,17,17,18,19,18,20,19,19,20,21,20,22,21,21,22,23,23,22,24,25,24,22,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 66, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID116(GL2 gl){
float[] positionsArray = {
-167.186f,62.77978f,-0.004890828f,-163.3715f,145.7624f,0.003073254f,-177.6215f,145.7624f,-0.02667817f,-136.473f,121.7624f,0.0592327f,-157.9321f,145.4821f,0.01442985f,-157.9321f,145.4821f,0.01442985f,-136.473f,121.7624f,0.0592327f,-163.3715f,145.7624f,0.003073254f,-167.186f,62.77978f,-0.004890828f,-177.6215f,145.7624f,-0.02667817f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(0.2392157, 0.4, 0.2392157, 1.0);
int[] indices = {
0,1,2,1,0,3,1,3,4,5,6,7,6,8,7,9,7,8,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 18, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID122(GL2 gl){
float[] positionsArray = {
-114.4813f,145.7624f,-63.16136f,-114.6333f,68.83721f,-56.74284f,-114.465f,62.77978f,-52.72592f,-114.773f,75.20993f,-60.23931f,-114.8829f,81.85321f,-63.19077f,-114.9624f,88.7204f,-65.57652f,-115.0109f,95.76329f,-67.37978f,-115.0281f,102.9324f,-68.58792f,-115.0138f,110.1775f,-69.19243f,-114.9681f,117.4476f,-69.18909f,-114.8913f,124.6917f,-68.5779f,-114.7841f,131.8589f,-67.36317f,-114.6471f,138.899f,-65.55342f,-114.6471f,138.899f,-65.55342f,-114.4813f,145.7624f,-63.16136f,-114.7841f,131.8589f,-67.36317f,-114.8913f,124.6917f,-68.5779f,-114.9681f,117.4476f,-69.18909f,-115.0138f,110.1775f,-69.19243f,-115.0281f,102.9324f,-68.58792f,-115.0109f,95.76329f,-67.37978f,-114.9624f,88.7204f,-65.57652f,-114.8829f,81.85321f,-63.19077f,-114.773f,75.20993f,-60.23931f,-114.6333f,68.83721f,-56.74284f,-114.465f,62.77978f,-52.72592f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(0.8, 0.8, 0.1568627, 1.0);
int[] indices = {
0,1,2,1,0,3,3,0,4,4,0,5,5,0,6,6,0,7,7,0,8,8,0,9,9,0,10,10,0,11,11,0,12,13,14,15,15,14,16,16,14,17,17,14,18,18,14,19,19,14,20,20,14,21,21,14,22,22,14,23,23,14,24,25,24,14,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 66, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID128(GL2 gl){
float[] positionsArray = {
-120.5083f,-103.168f,-22.55864f,-108.4218f,-103.168f,-22.55864f,-114.465f,-103.168f,-23.35425f,-126.1397f,-103.168f,-20.22603f,-102.7903f,-103.168f,-20.22603f,-130.9755f,-103.168f,-16.51538f,-97.95452f,-103.168f,-16.51538f,-134.6861f,-103.168f,-11.67957f,-94.24387f,-103.168f,-11.67957f,-137.0188f,-103.168f,-6.04815f,-91.91126f,-103.168f,-6.04815f,-137.8144f,-103.168f,-0.004890828f,-91.11565f,-103.168f,-0.004890828f,-91.91126f,-103.168f,6.038368f,-137.0188f,-103.168f,6.038368f,-134.6861f,-103.168f,11.66979f,-94.24387f,-103.168f,11.66979f,-130.9755f,-103.168f,16.5056f,-97.95452f,-103.168f,16.5056f,-126.1397f,-103.168f,20.21625f,-102.7903f,-103.168f,20.21625f,-108.4218f,-103.168f,22.54886f,-120.5083f,-103.168f,22.54886f,-114.465f,-103.168f,23.34447f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,1,3,4,4,3,5,4,5,6,6,5,7,6,7,8,8,7,9,8,9,10,10,9,11,10,11,12,12,11,13,13,11,14,13,14,15,13,15,16,16,15,17,16,17,18,18,17,19,18,19,20,20,19,21,21,19,22,21,22,23,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 66, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID134(GL2 gl){
float[] positionsArray = {
-116.4073f,-107.9166f,-7.253756f,-112.5227f,-107.9166f,-7.253756f,-114.465f,-107.9166f,-7.509469f,-118.2173f,-107.9166f,-6.504046f,-110.7127f,-107.9166f,-6.504046f,-119.7715f,-107.9166f,-5.311429f,-109.1585f,-107.9166f,-5.311429f,-120.9642f,-107.9166f,-3.75718f,-107.9659f,-107.9166f,-3.75718f,-121.7139f,-107.9166f,-1.947218f,-107.2161f,-107.9166f,-1.947218f,-121.9696f,-107.9166f,-0.004890828f,-106.9604f,-107.9166f,-0.004890828f,-121.7139f,-107.9166f,1.937437f,-107.2161f,-107.9166f,1.937437f,-107.9659f,-107.9166f,3.747398f,-120.9642f,-107.9166f,3.747398f,-109.1585f,-107.9166f,5.301647f,-119.7715f,-107.9166f,5.301647f,-110.7127f,-107.9166f,6.494264f,-118.2173f,-107.9166f,6.494264f,-116.4073f,-107.9166f,7.243975f,-112.5227f,-107.9166f,7.243975f,-114.465f,-107.9166f,7.499687f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(1.0, 1.0, 1.0, 1.0);
int[] indices = {
0,1,2,1,0,3,1,3,4,4,3,5,4,5,6,6,5,7,6,7,8,8,7,9,8,9,10,10,9,11,10,11,12,12,11,13,12,13,14,14,13,15,15,13,16,15,16,17,17,16,18,17,18,19,19,18,20,19,20,21,19,21,22,22,21,23,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 66, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID140(GL2 gl){
float[] positionsArray = {
-114.4172f,121.7624f,-22.0128f,-114.4813f,145.7624f,-63.16136f,-114.465f,62.77978f,-52.72592f,-114.4506f,145.4821f,-43.47193f,-114.4591f,145.7624f,-48.91138f,-114.4591f,145.7624f,-48.91138f,-114.4506f,145.4821f,-43.47193f,-114.4813f,145.7624f,-63.16136f,-114.4172f,121.7624f,-22.0128f,-114.465f,62.77978f,-52.72592f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glColor4d(0.2392157, 0.4, 0.2392157, 1.0);
int[] indices = {
0,1,2,1,0,3,1,3,4,5,6,7,6,8,7,9,7,8,};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices, 0);
gl.glDrawElements(GL2.GL_TRIANGLES, 18, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_TEXTURE_2D);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
private void ID146(GL2 gl){
float[] positionsArray = {
-167.186f,62.77978f,-0.004890828f,-136.4723f,121.7624f,0.2079547f,};
FloatBuffer fbv = GLBuffers.newDirectFloatBuffer(positionsArray, 0);
gl.glVertexPointer(3, GL2.GL_FLOAT, 0, fbv);
gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
FloatBuffer fbn = null;
FloatBuffer fbt = null;
float[] texcoordArray = null;
{
gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
gl.glEnable(GL2.GL_BLEND);
gl.glColor4d(0.0, 0.0, 0.0, 1.0);
int[] indices = {
1,
0,
};
IntBuffer fbi = GLBuffers.newDirectIntBuffer(indices);
gl.glDrawElements(GL2.GL_LINES, indices.length, GL2.GL_UNSIGNED_INT, fbi);
gl.glDisable(GL2.GL_BLEND);
}
gl.glDisableClientState(GL2.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);
gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
}
}
